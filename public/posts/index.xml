<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on natescode blog</title>
        <link>https://natescode.com/posts/</link>
        <description>Recent content in Posts on natescode blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>All Rights Reserved</copyright>
        <lastBuildDate>Fri, 29 Nov 2024 11:39:31 -0600</lastBuildDate>
        <atom:link href="https://natescode.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Productivity Life Hacks for Software Engineers</title>
            <link>https://natescode.com/posts/2024/11/productivity-life-hacks-for-software-engineers/</link>
            <pubDate>Fri, 29 Nov 2024 11:39:31 -0600</pubDate>
            
            <guid>https://natescode.com/posts/2024/11/productivity-life-hacks-for-software-engineers/</guid>
            <description>My co-worker, Abdullahi, encouraged me to write this post. Since I&amp;rsquo;m on Thanskgiving vacation, I thought why not? Plus, writting this post proves him correct; I&amp;rsquo;m very productive.
I generally don&amp;rsquo;t think of myself as very productive. I was diagnosed with ADHD. I&amp;rsquo;ve always tried to take on too many projects, jobs and challenges; failing multiple responsibilities simultaneously.
I work 2 jobs, sometimes 3, I am a father of twin girls that are in school plus I make time to work on NatesCode blog posts, videos, exercise and be a son, boyfriend and play DnD.</description>
            <content type="html"><![CDATA[<p>My co-worker, Abdullahi, encouraged me to write this post. Since I&rsquo;m on Thanskgiving vacation, I thought why not? Plus, writting this post proves him correct; I&rsquo;m <em>very</em> productive.</p>
<p>I generally don&rsquo;t think of myself as very productive. I was diagnosed with ADHD. I&rsquo;ve always tried to take on too many projects, jobs and challenges; failing multiple responsibilities simultaneously.</p>
<p>I work 2 jobs, sometimes 3, I am a father of twin girls that are in school plus I make time to work on NatesCode blog posts, videos, exercise and be a son, boyfriend and play DnD.</p>
<p>How do I find time?</p>
<p>A part of the answer is that not what I <strong>DO</strong> have time for but which activities I don&rsquo;t do that most others do. I don&rsquo;t watch T.V., I&rsquo;ve never owned cable and Cobra Kai is the only TV I&rsquo;ve finished in the last decade. I don&rsquo;t go out with friends as much as others might. Everyone&rsquo;s life is different.</p>
<p>Another thing, is that I&rsquo;ve learned to schedule my time and prioritize which activities are the MOST important. Sometimes, not often, sometimes I <em>can</em> do two things at the same time, sorta.</p>
<p>Here is my schedule for example:</p>
<h2 id="natescodes-schedule-kids-week">NatesCode's Schedule (Kids Week)</h2>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Time (24h)</th>
<th>Activity</th>
</tr>
</thead>
<tbody>
<tr>
<td>30m</td>
<td>06:00</td>
<td>Wake, Quick exercise, self prep</td>
</tr>
<tr>
<td>15m</td>
<td>06:30</td>
<td>Prep kids for school</td>
</tr>
<tr>
<td>45m</td>
<td>06:45</td>
<td>Drive kids to school</td>
</tr>
<tr>
<td>6h</td>
<td>07:30</td>
<td>Work from home</td>
</tr>
<tr>
<td>1h</td>
<td>13:30</td>
<td>Pickup kids from school</td>
</tr>
<tr>
<td>2h</td>
<td>14:30</td>
<td>Finish work day</td>
</tr>
<tr>
<td>30m</td>
<td>16:30</td>
<td>Family time</td>
</tr>
<tr>
<td>30m</td>
<td>17:00</td>
<td>Dinner</td>
</tr>
</tbody>
</table>
<h3 id="monday-wednesday-thursday">Monday, Wednesday, Thursday</h3>
<p>I teach a coding bootcamp online through the University of Minnesota.</p>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Time (24h)</th>
<th>Activity</th>
</tr>
</thead>
<tbody>
<tr>
<td>2h 15m</td>
<td>17:45</td>
<td>Teach coding bootcamp online</td>
</tr>
<tr>
<td>15m</td>
<td>20:00</td>
<td>Break; Read kids story before bed</td>
</tr>
<tr>
<td>1h 30m</td>
<td>21:30</td>
<td>Finish teaching</td>
</tr>
<tr>
<td>30m</td>
<td>22:00</td>
<td>Prep for bed</td>
</tr>
<tr>
<td>7h 30m</td>
<td>22:30</td>
<td>Sleep</td>
</tr>
</tbody>
</table>
<h3 id="tuesday-friday">Tuesday, Friday</h3>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Time (24h)</th>
<th>Activity</th>
</tr>
</thead>
<tbody>
<tr>
<td>15m</td>
<td>20:00</td>
<td>Tuck kids in bed</td>
</tr>
<tr>
<td>2h 15m</td>
<td>20:15</td>
<td>NatesCode projects</td>
</tr>
<tr>
<td>7h 30m</td>
<td>22:30</td>
<td>Sleep</td>
</tr>
</tbody>
</table>
<h3 id="hours-summary-with-kids-week">Hours Summary (With Kids Week)</h3>
<p>This is just my work week for the weeks I have my kids. When I don&rsquo;t have them, I spend time with my girlfriend and work
on NatesCode Projects.</p>
<table>
<thead>
<tr>
<th>Activity</th>
<th>Total Hours</th>
</tr>
</thead>
<tbody>
<tr>
<td>Family Time</td>
<td>09h 30m</td>
</tr>
<tr>
<td>Work</td>
<td>40h 00m</td>
</tr>
<tr>
<td>NatesCode</td>
<td>04h 30m</td>
</tr>
<tr>
<td>Sleep</td>
<td>37h 30m</td>
</tr>
<tr>
<td>Exercise</td>
<td>01h 15m</td>
</tr>
<tr>
<td>Teaching</td>
<td>12h 45m</td>
</tr>
</tbody>
</table>
<h2 id="natescodes-schedule-without-kids-week">NatesCode's Schedule (Without Kids Week)</h2>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Time (24h)</th>
<th>Activity</th>
</tr>
</thead>
<tbody>
<tr>
<td>30m</td>
<td>06:00</td>
<td>Wake, self prep</td>
</tr>
<tr>
<td>30m</td>
<td>06:30</td>
<td>Free time, do Worlde, more excercise</td>
</tr>
<tr>
<td>30m</td>
<td>07:00</td>
<td>Coffee with GF before work</td>
</tr>
<tr>
<td>25m</td>
<td>07:30</td>
<td>Drive to work</td>
</tr>
<tr>
<td>6h</td>
<td>07:55</td>
<td>Work from home</td>
</tr>
<tr>
<td>30m</td>
<td>12:00</td>
<td>Lunch</td>
</tr>
<tr>
<td>4h 30m</td>
<td>12:30</td>
<td>Finish Work</td>
</tr>
<tr>
<td>30m</td>
<td>16:30</td>
<td>Drive Home</td>
</tr>
<tr>
<td>30m</td>
<td>17:00</td>
<td>Dinner</td>
</tr>
</tbody>
</table>
<h3 id="monday-wednesday-thursday-1">Monday, Wednesday, Thursday</h3>
<p>I teach a coding bootcamp online through the University of Minnesota.</p>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Time (24h)</th>
<th>Activity</th>
</tr>
</thead>
<tbody>
<tr>
<td>2h 30m</td>
<td>17:30</td>
<td>Teach coding bootcamp online</td>
</tr>
<tr>
<td>15m</td>
<td>20:00</td>
<td>Break</td>
</tr>
<tr>
<td>1h 45m</td>
<td>20:15</td>
<td>Finish teaching</td>
</tr>
<tr>
<td>30m</td>
<td>22:00</td>
<td>Prep for bed</td>
</tr>
<tr>
<td>7h 30m</td>
<td>22:30</td>
<td>Sleep</td>
</tr>
</tbody>
</table>
<h3 id="tuesday-friday-1">Tuesday, Friday</h3>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Time (24h)</th>
<th>Activity</th>
</tr>
</thead>
<tbody>
<tr>
<td>4h 30m</td>
<td>17:30</td>
<td>Free Time / Natescode Projects</td>
</tr>
<tr>
<td>7h 30m</td>
<td>22:30</td>
<td>Sleep</td>
</tr>
</tbody>
</table>
<h3 id="hours-summary-without-kids-week">Hours Summary (Without Kids Week)</h3>
<p>This is just my work week for the weeks I have my kids. When I don&rsquo;t have them, I spend time with my girlfriend and work
on NatesCode Projects.</p>
<table>
<thead>
<tr>
<th>Activity</th>
<th>Total Hours</th>
</tr>
</thead>
<tbody>
<tr>
<td>Work</td>
<td>40h 00m</td>
</tr>
<tr>
<td>Free time / NatesCode</td>
<td>09h 00m</td>
</tr>
<tr>
<td>GF time</td>
<td>5h 00m (at least)</td>
</tr>
<tr>
<td>Sleep</td>
<td>37h 30m</td>
</tr>
<tr>
<td>Exercise</td>
<td>02h 30m</td>
</tr>
<tr>
<td>Teaching</td>
<td>12h 45m</td>
</tr>
</tbody>
</table>
<h2 id="weekends">Weekends</h2>
<p>I have my kids every other week so I&rsquo;m free every other weekend. I play DnD 1-2 weekends per month, kids play with the other kids of DnD parents.
I spend time with family, girlfriend and work on Natescode stuff in the evenings on free weekends and week days.</p>
<p>I have about 30 free waking hours on weekends. I can spend time with family, kids, friends, chores, do taxes, clean, meal prep
for the week (usually do that on Sunday) and work on my own projects.</p>
<h2 id="faqs">FAQS</h2>
<h3 id="only-15-minutes-to-prep-kids-for-school">Only 15 minutes to prep kids for school?</h3>
<p>Yes, I lay out their outfits the night before. They have their own alarm clocks to wake up. They know how to
brush their teeth and get dressed themselves. I also already have their backpacks ready by the door.</p>
<h3 id="1-hour-for-kids-pickup">1 hour for kids pickup?</h3>
<p>Yes, I work from home but the kids go to a Spanish immersion school that is in their mom&rsquo;s school district so it
is only a 15 minute drive but then I have to wait in the parent pickup line for 10 minutes, then 15 minutes back. I spend the last 15 - 20 minutes getting the kids a snack, going over their school work and asking about their day.</p>
<h3 id="7-12-hours-of-sleep">7 1/2 hours of sleep?</h3>
<p>Yes, that is the minimum I need. I avoid caffeine because it exasterbates my anxiety and ruins my sleep schedule. I <strong>RARELY</strong> get less than 7.5 - 8 hours of sleep. Sleep is critical to being able to be productive. Productivity isn&rsquo;t quantity of hours performing a task but the value produced during the hours worked.</p>
<h3 id="what-else">What else?</h3>
<p>Lists, Make a list for the day, week and month. I have lists with priorities at work. Prioritizing is SO importanty. You can do <strong>ANYTHING</strong> with your time but <em>not</em> <strong>EVERYTHING</strong>. I have learned to say <strong>NO</strong> in order to protect my time.</p>
<h2 id="how-you-can-be-productive-">How YOU can be productive ?</h2>
<p>You can, think long term. You have to make small, sustainable changes. I gave up alcohol this year (2024), that was a sustainable change. My next change will be making time for working out. I&rsquo;ll start with 15 minutes in the morning: jump rope, squats, leg lifts, push ups.</p>
<p>I suggest starting by writting down your <strong>current</strong> schedule. See where your time is going. Just like in personal finance, you first have to audit
where your money is going before you can make a realistic budget. Budget your time and prioritize it. When I get free time or take PTO, I spend that time with my GF or kids because they&rsquo;re my #1 priority.</p>
<h3 id="steps">Steps</h3>
<ol>
<li>Write down your priorities. What are the top 3 things you care about? I.E Family, Exercise, Sleep</li>
<li>Log your time. Where does your time go?</li>
<li>Drop the lowest priority activities. You <em>CAN</em> do them later, just pause them for now.</li>
<li>Add only one new activity per week, don&rsquo;t try to wake up at 4am to run a marathon, cure cancer and start a YouTube channel tomorrow.</li>
<li>Say &ldquo;NO&rdquo; to anything impeding you from spending time on your top 3 priorities.</li>
<li>Make 3 lists of priorities: Daily, Weekly, Monthly.</li>
<li>REPEAT</li>
</ol>
<h2 id="summary">Summary</h2>
<p>That was LOOOONG. Hope that helps though.</p>
]]></content>
        </item>
        
        <item>
            <title>Software Interviews Explained</title>
            <link>https://natescode.com/posts/2024/04/software-interviews-explained/</link>
            <pubDate>Tue, 02 Apr 2024 16:39:58 -0500</pubDate>
            
            <guid>https://natescode.com/posts/2024/04/software-interviews-explained/</guid>
            <description>Practical Software Interviews A medium article about Google interviews sparked an interesting debate about technical interview methods and questions. I realized that the vast majority of developers have never been the interviewer. Many developers may misunderstand the goals of a technical interview and the vantage point of the technical interviewer. Furthermore, influencers make Leetcode style interviews seem like they&amp;rsquo;re common outside of FAANG; they&amp;rsquo;re not. Here I&amp;rsquo;ll go over how typical software engineer interviews are run as well as debunking some common myths about software interviews.</description>
            <content type="html"><![CDATA[<h2 id="practical-software-interviews">Practical Software Interviews</h2>
<p>A medium article about Google interviews sparked an interesting debate about technical interview methods and questions. I realized that the vast majority of developers have never been the interviewer. Many developers may misunderstand the goals of a technical interview and the vantage point of the technical interviewer. Furthermore, influencers make Leetcode style interviews seem like they&rsquo;re common outside of FAANG; they&rsquo;re not. Here I&rsquo;ll go over how typical software engineer interviews are run as well as debunking some common myths about software interviews.</p>
<h2 id="rule-of-thumb">Rule of Thumb</h2>
<p>No, most SWEs aren&rsquo;t making $500,000 after 10 years of experience, or 20. The average developer has 5 years of experience and makes around $110,000. A USA software engineer will make about $50,000 to $70,000 per year PLUS $10,000 per year of experience. This means it takes the typical developer 3-5 years to reach a salary of $100,000 USD. Again, this is outside of startups, FAANG or big cities where $120,000 qualifies a family of 4 for government benefits.</p>
<h2 id="the-question-doesnt-matter">The Question Doesn&rsquo;t Matter</h2>
<p>I think most say this out of frustration. &ldquo;I&rsquo;ll NEVER need to reverse a linked list on the job!&rdquo;.</p>
<p>While that may be true, the question isn&rsquo;t the point. The goal of an interview is to assess the skills of the candidate. Outside of FAANG, senior software engineers are rarely asked to code in technical interviews. If a senior is asked to code, it is usually an easy task just to do a &ldquo;gut check&rdquo; to make sure they&rsquo;re not a fraud.</p>
<p>While reversing a linked list may not be a common task as a developer; I&rsquo;ve never done it. It DOES test if the developer understands basic data-structures and how to traverse them. In my humble opinion, there are much better questions to ask. Again, the question doesn&rsquo;t matter too much. Furthermore, this would only be one of MANY questions asked in a 1 hour technical interview.</p>
<p>I do NOT have a bank of questions. Neither do most of the other lead developers. Why? Because we do software engineering daily. Why would we have to prep to talk about what we are masters of? Furthermore, my questions depend on YOUR RESUME. If you list Java, then I&rsquo;ll ask about Java. If you list REST then we&rsquo;ll talk about HTTP and REST. This isn&rsquo;t rocket science. The interview isn&rsquo;t about asking &ldquo;how many balloons could you fit in Wrigley Field?&rdquo;. I want to test the candidate on the subjects that they are best at. That shows me they can learn.</p>
<p>*side note. I realized after coding for 17 years that I had never reversed a linked list so I finally did. . . yeah that was boring.</p>
<p>Why doesn&rsquo;t the question matter that much? Let&rsquo;s use an analogy.</p>
<p>I don&rsquo;t care about the question that much.</p>
<p>Imagine a chef is being interviewed for a position at a Michelin star restaurant. The interviewer asks the chef to make a simple dish.</p>
<p>The chef says &ldquo;This is stupid! I&rsquo;ll never make such a simple dish helper at such a fancy restaurant. This is beneath me! This doesn&rsquo;t test practical kitchen skills.&rdquo;</p>
<p>This tells the interviewer they have a poor attitude and a large ego. The interviewer calmly replies &ldquo;Correct. BUT you will have to follow a recipe, measure ingredients, use a stove, taste the food making adjustments as needed while maintaining a clean workspace. WHAT you make doesn&rsquo;t really matter, HOW you make it does&rdquo;.</p>
<p>This brings me to a quote from the latest and final John Wick movie, &ldquo;How you do anything is how you do everything.&rdquo;. That is the point. How a candidate approaches a new problem, even an impractical one, is the same way they&rsquo;ll approach most other problems.</p>
<p>This brings me to another comment that said something like &ldquo;I should be able to use any and all tools available to me in the interview&rdquo;. The interviewer isn&rsquo;t evaluating CHAT GPT or one&rsquo;s skills at copy pasting from Stack-overflow. The interviewer wants to know if the candidate has the fundamental skills to solve problems. This is why whiteboards, Google docs etc are used without IDEs, AI, Google etc.</p>
<p>Again, the goal of the interview for the chef isn&rsquo;t about getting a free meal anymore then a software interview is about getting free software developed.</p>
<h2 id="the-answer-doesnt-matter">The Answer Doesn&rsquo;t Matter</h2>
<p>I blame schools. Students think the answer is more important than the method used to reach the answer. This is especially true when I&rsquo;m conducting interviews of Interns or Junior developers. Again, seniors I don&rsquo;t really ask to code. An Intern or SWE I isn&rsquo;t going to have much practical or depth of knowledge on any one subject.</p>
<p>So if a human still needs to understand how to read, write and evaluate code to use CHAT GPT, then why wouldn&rsquo;t I test that skill in an interview? Should I ask complex problems to</p>
<h2 id="the-code-doesnt-matter">The Code Doesn&rsquo;t Matter</h2>
<p>When I&rsquo;ve been the interviewer and the candidate, the code doesn&rsquo;t matter that much. Many interviews have the interviewer share their screen and the candidate tells them where and what to code. This of course is less efficient than real life. One&rsquo;s fingers can move faster, use IDE shortcuts, search, use AI etc. Nerves are involved as well. I like this approach because the candidate must explain what to do instead of just doing it.</p>
<p>If the interview is on the whiteboard then the code doesn&rsquo;t need to compile or be perfect. For all intents and purposes pseudo-code to show the correct steps.</p>
<p>I think candidates are too focused on the code and solving the problem. I blame school for putting too much focus on grades and test scores; results. Software interviews are more like my high school math homework. On the very first day of class my math teacher gave us the answer key to all the homework problems. He cared more about us knowing how to use the correct method to obtain the correct answer, using the answer key to verify we had, instead of just giving the answers without comprehension. This is much like software where we start with the answers, unit tests, and then work backwards to verify our code produces the correct answers.</p>
<p>The article talked about how most candidates fail Google&rsquo;s technical interview because they don&rsquo;t show their work. I&rsquo;ve interview candidate that had all the right answers memorized but once I asked open-ended critical thinking questions, they failed. They couldn&rsquo;t ask clarifying questions. They couldn&rsquo;t explain how to break the problem down into steps.</p>
<p>Even if a candidate can&rsquo;t 100% complete a test, that doesn&rsquo;t mean they failed. The test is just to see the candidate&rsquo;s ability to solve problems, communicate possible solutions, explain possible side-effects etc. Very little of it is about code, especially at the senior level. It has been several years since I&rsquo;ve been ask to actually write code during an interview. Usually it is higher level systems design questions, discussing the HTTP spec etc.</p>
<p>I sporadically write code at work. Some months I write a lot of code, others I spend doing dev lead tasks such as architecture, DevOps, helping my developers, working with BAs to create user stories and helping QA understand how to test upcoming features.</p>
<h2 id="your-approach-does-matter">Your Approach Does Matter</h2>
<blockquote>
<p>&ldquo;So you can figure out anything during the stress of the interview even if you haven&rsquo;t done it before?&rdquo; &ndash; Robert</p>
</blockquote>
<p>Yes, that is the job of software engineers. We solve problems that we haven&rsquo;t seem before. Otherwise, why would companies pay well into the 6 figures for me to copy paste solutions from CHAT GPT or Stack overflow? Anyone can write code, even AI, but few can write the correct code in the correct place that is efficient and performant.</p>
<p>Again to my Chef analogy. If the interviewer asks the chef to make Beef Wellington, something they have never done before. They should be able to do it. They may not be an expert at Beef Wellington but they should understand how to make a puff pastry, prep the ingredients, good meat etc. If they can&rsquo;t then the interview would be concerned the Chef has used rote memorization to only mimic deeper comprehension.</p>
<p>(I made Beef Wellington for the first time last Christmas. Hence the analogy. I use a hybrid of two recipes. Oh so good. I&rsquo;m not so good at keeping a clean workspace though.)</p>
]]></content>
        </item>
        
        <item>
            <title>Dangers of Functional Programming</title>
            <link>https://natescode.com/posts/2023/12/dangers-of-functional-programming/</link>
            <pubDate>Wed, 06 Dec 2023 15:33:15 -0600</pubDate>
            
            <guid>https://natescode.com/posts/2023/12/dangers-of-functional-programming/</guid>
            <description>Functional Programming has grown in popularity the last few years. Unfortunately, that also means it has become a bit of a buzzword. Some may call themselves &amp;ldquo;FP nerds&amp;rdquo; while only superficially emulating functional programming.
Sometimes mimicking functional techniques, especially in a non-functional language, I&amp;rsquo;m looking at you ES2024, is bit inefficient or dangerous. Let&amp;rsquo;s cover some dangers of blindly using FP techniques without understand how they work instead of blindly following some self-proclaimed FP guru (typical FAANG to influencer) told you FP is a panacea.</description>
            <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Function_(computer_programming)">Functional Programming</a> has grown in popularity the last few years. Unfortunately, that also means it has become a bit of a buzzword. Some may call themselves &ldquo;FP nerds&rdquo; while only superficially emulating functional programming.</p>
<p>Sometimes mimicking functional techniques, especially in a non-functional language, <em>I&rsquo;m looking at you ES2024</em>, is bit inefficient or dangerous. Let&rsquo;s cover some dangers of blindly using FP techniques without understand <em>how</em> they work instead of blindly following some self-proclaimed FP guru (typical FAANG to influencer) told you FP is a panacea.</p>
<p><strong>DISCLAIMER</strong></p>
<p>These are my opinions. I like FP, but it is just a tool. I&rsquo;m not a fanboy of any particular technique; I use want works given my requirements and constraints (yes, skill issues are constraints).</p>
<h2 id="1-dangers-of-lies">1) Dangers of Lies</h2>
<p>The first lie is from FP &lsquo;gurus&rsquo; you&rsquo;ll first here is &ldquo;it makes code easier to test&rdquo;. While that may be true, FP comes from Lambda Calculus and in mathematics, there are no Unit Tests, only proofs. So strictly speaking if we were doing TRUE FP (no real Scottsman), there would be only proofs in the compiler. Thare are logical languages that do this but you and I are unlikely to ever get paid to use them commercially.</p>
<h2 id="2-danger-of-recursion">2) Danger of Recursion</h2>
<p>True FP nerds will even avoid <code>for</code> and <code>while</code> and opt for recursion. Recursive algorithms / code can be beautiful but also dangerous.</p>
<p>Many major programming languages: <code>Python</code>, <code>C#</code>, <code>Java</code>, <code>PHP</code>, <code>ECMAscript</code>, <code>Ruby</code> either completely lack or don&rsquo;t guarantee runtime or compiler support for <a href="https://en.wikipedia.org/wiki/Tail_call">TCO</a>.</p>
<p>Let&rsquo;s look at the following C# code that recursively implements the fibonacci sequence.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> fib(<span style="color:#66d9ef">int</span> n){
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span>(n &lt;= <span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">return</span> n;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> fib( n - <span style="color:#ae81ff">1</span> ) + fib( n - <span style="color:#ae81ff">2</span> );
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Unfortunately, while C# runtime, CLR, supports TCO, the C# compiler does not. This means that we may be getting stackoverflow then immediately going to the site of the same name to solve our error.</p>
<p>We <em>can</em> use a technique called <a href="https://volgarev.me/2013/09/27/tail-recursion-and-trampolining-in-csharp.html">bouncing</a>, also explained <a href="http://blog.functionalfun.net/2008/04/bouncing-on-your-tail.html">here</a> to prevent this.</p>
<h3 id="stack-overflow">Stack Overflow</h3>
<p>No, not the Q&amp;A website. Many language runtimes, including V8 for Javascript, don&rsquo;t have <a href="https://exploringjs.com/es6/ch_tail-calls.html">TCO</a> meaning recursive function calls will get added to the stack before they&rsquo;re called, overflowing the stack. I say <em>language runtime</em> instead of language because the ECMAscript specification does infact support TCO. Specifications don&rsquo;t help when they&rsquo;re not properly or completely implemented.</p>
<h3 id="big-o">Big O</h3>
<p>Take the classic Fibonacci algorithm. The Iterative solution runs in O(n). The recursive solution runs in O(2^n). Sure it <em>can</em> be O(n) WITH <a href="/">memoization</a>, that still means we use O(n) extra memory to do the same thing. We <em>could</em> write the recursive version to be more similar to the iterative version but for no gain and loss of code readability.</p>
<h3 id="runtime-immutability-referencial-transparency">Runtime, Immutability, Referencial Transparency</h3>
<p>TRUE FP means during runtime ALL code is referencially transparent. What does that mean? A basic definition is given in code below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#75715e">// a language is RF if the following is ALWAYS true for all expressions
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">random</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">b</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">==</span> Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">+</span> Math.<span style="color:#a6e22e">random</span>();
</span></span></code></pre></div><p>Many FP features actually require a runtime. This means system languages like <code>Rust</code> and <code>Zig</code> can never be fully FP like Haskell. Features that require a runtime: <code>immutable data-structures</code>, and often use <code>monads</code> as a solution to handle impure operations. FP languages like Haskell require a runtime to evaluate commands to handle IO at runtime.</p>
<h2 id="dangers-of-mapreducefilter">Dangers of <code>map</code>,<code>reduce</code>,<code>filter</code></h2>
<p>These methods are great!</p>
<h3 id="no-early-returns">No Early Returns</h3>
<p>Unfortunately, most languages aren&rsquo;t <code>Ruby</code> so therefore lack <a href="/">non-local return</a> so you can&rsquo;t return early when using <a href="/">internal iterators</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-es" data-lang="es"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> a <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>a.map((v,i)<span style="color:#f92672">=&gt;</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">//</span> this returns for lambda function NOT for map. Map will continue
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">if</span>(v <span style="color:#f92672">===</span> <span style="color:#ae81ff">2</span>) return; 
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><h3 id="nom-nom-ram">NOM NOM RAM</h3>
<p>More memory usage is also a problem.</p>
<h2 id="dangers-of-data-structures">Dangers of Data-Structures</h2>
<p>In languages where everything is an object, it is easy to allocate too many object and clone them. If a developer blindly follows
FP they may avoid mutation and in doing so allocate a ton more memory for the GC to clean up later. FP language compilers and runtimes are optimized for this, your ECMAscript that doesn&rsquo;t
even have a standard library in 2024, doesn&rsquo;t.</p>
<p>Unfortunately, many languages: <code>C#</code>, <code>Java</code>, <code>Javascript</code>, <code>ruby</code>, <code>php</code>&hellip; don&rsquo;t natively have immutable data-structures. This means you are spending A LOT of CPU and Memory to copy objects constantly just to avoid mutation. Plus, syntatically it is VERY verbose to do so.</p>
<p>Proper FP languages: <code>F#, Scala, OCaml, Haskell, Elm</code> use <a href="/">Immutable Data Structures</a> to prevent freeing too many objects and making the <a href="/">garbage collector</a> go BRRRR.</p>
<h3 id="more-fp--more-objects">More FP = More Objects?</h3>
<p>Javascript&rsquo;s <code>Array.prototype.reduce</code> method will actually allocate more objects! I know I thought we were being functional.</p>
<p><code>...</code> syntax, in some cases, can also be very inefficient.</p>
<h2 id="dangers-of-functions">Dangers of Functions</h2>
<p>Functions are great. Why would there be anything dangerous about functions?</p>
<h2 id="more-objects">More Objects</h2>
<p>Creates more objects.</p>
<h3 id="currying--partial-application">Currying / Partial Application</h3>
<p><a href="https://stackoverflow.com/questions/53852138/functional-programming-when-to-curry">Stackoverflow answer explains it well</a></p>
<blockquote>
<p>Currying is the transformation of applying a sequence of argument to a function to applying a sequence of functions to individual arguments. In JS this translates to creating a bunch of Functions which has a significant cost at runtime. However, this also has benefits in expressiveness for instance:</p>
</blockquote>
<p>// the mapping function is
// created at each invocation of add2
const add2 = (coll) =&gt; map((x) =&gt; x + 2, coll);</p>
<p>// the mapping function is
// created once
const add2 = map((x) =&gt; x + 2);</p>
<blockquote>
<p>This illustrates that</p>
</blockquote>
<blockquote>
<p>currying is putting emphasis on the fact that functions are 1st class citizens in your language and your domain (you pass around functions and values to model your domain).
it has significant costs in JS if currying happens on a critical path of your app.
curried functions must be consistent in their argument positioning. For instance by convention, transformation functions will take the collection on which to iterate as the last argument.</p>
</blockquote>
<p>Currying or Partial Application can have a bit of execution overhead when used in Javascript. There will be multiple object created at runtime to support this.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Functional Programming has many valuable concepts that lend to better code. However, FP is just a tool. It shouldn&rsquo;t be applied blindly or superficially imitated aka cargo cult. Sometimes, a plain old C-style for loop is exactly what is needed. Take the concepts and apply them where appropriate in your language / framework with some thought.</p>
]]></content>
        </item>
        
        <item>
            <title>Typing Speed Matters for Software Developers</title>
            <link>https://natescode.com/posts/2023/09/typing-speed-matters-for-software-developers/</link>
            <pubDate>Sat, 23 Sep 2023 21:56:58 -0400</pubDate>
            
            <guid>https://natescode.com/posts/2023/09/typing-speed-matters-for-software-developers/</guid>
            <description>Typing efficiency and speed is an often underrated and underappreciated skill for new and novice developers. I teach a coding bootcamp. I see adults of all ages, talents, backgrounds and walks of life start their journey into software development.
One issue, of many, I have with coding bootcamps is that they say there are no prerequisits when there definitely are. I&amp;rsquo;ve seen students start bootcamp with a brand-new laptop, likely their first, log onto the Zoom class all bright eyed with ethusiam and wonder.</description>
            <content type="html"><![CDATA[<p>Typing efficiency and speed is an often underrated and underappreciated skill for new and novice developers. I teach a coding bootcamp. I see adults of all ages, talents, backgrounds and walks of life start their journey into software development.</p>
<p>One issue, of many, I have with coding bootcamps is that they say there are no prerequisits when there definitely are. I&rsquo;ve seen students start bootcamp with a brand-new laptop, likely their first, log onto the Zoom class all bright eyed with ethusiam and wonder. They&rsquo;re ready to learn, only to then be crushed because the type minutes per word, have no idea how to work their computer and they quickly burn out. If you&rsquo;ve never downloaded a zip file and extracted it, or done basic computer tasks, learning to code may be something you should wait on doing, especially if you&rsquo;re planning on dropping $10,000 USD and 6 month of your life on a coding bootcamp.</p>
<p>One of those many skills that help with this is typing and a good keyboard. Software developers type A LOT. I always hear the poor argument &ldquo;programmers spend most of their time thinking, not coding&rdquo; as to justify very slow typing speeds. I bet those same people would get mad if they waited 30 minutes for their food at a sit-down restaurant only to see the waiter spend 10 minutes slowly walking to their table to bring them their food; &ldquo;most, 75%, of the time was spend cooking it, not serving it&rdquo;.</p>
<p>Developers don&rsquo;t just type code, we write Slack messages, emails, JIRA comments, JIRA tickets, documentation, GIT commit messages, terminal commands, Google queries etc. That is a LOT of typing. If a developer types 5,000 words per day and they type only 30 words per minute that is 2 hours and 46 minutes of typing per day. If that same developer works up to a decent 90 words per minute that time drops to 55 minutes; saving nearly 2 HOURS per day to do other things! That means they get a whole extra 9 hours and 25 minutes per week, basically an extra work day per week!</p>
<p>Small changes add up to a lot. Even if YOU only type 2,000 words per day and go from 45 WPM to 60 WPM that is still an extra 11 minutes per day or nearly hour per week or 44 hours per year which is still a whole extra week of productivity!</p>
<p><img alt="Monkey Type Test Result" src="/images/typing_example.png"></p>
<h2 id="steps-to-a-professional-typist">Steps to a Professional Typist</h2>
<p>I&rsquo;ll cover the steps to becoming an efficient (notice I didn&rsquo;t say fast) typist.</p>
<h3 id="ten-finger-typing">Ten Finger Typing</h3>
<p>Type with all 10 of your fingers. Not pointer fingers, not 4 fingers, all 10. I promise it is worth it in the long run.</p>
<h3 id="home-row">Home Row</h3>
<p>Always have your fingers start and return to the home row when you are typing. One can even type over 100 WPM while always returning to the homerow. This increases accuracy.</p>
<p>For faster typists, I suggest what I call the <code>prancing method</code> which jsut means that you type each word as quickly as possible but pause long enough between words to return your fingers to the homerow and read / think-of the next word. This works well over 100wpm. The pause between words will eventually shrink and you&rsquo;ll learn to read / think ahead when you are typing. Again, I personally care more about efficiency and accuracy than raw speed.</p>
<h3 id="touch-typing">Touch Typing</h3>
<p>Learn to type without looking at your keyboard. This does take some practice but it can be done.</p>
<h3 id="hover">Hover</h3>
<p>Don&rsquo;t rest your palms on the keyboard or laptop. They should hover. This may seem weird at first but this keeps the wrist straight and prenvent RSI.</p>
<h3 id="ctrl-shift">CTRL, SHIFT</h3>
<p>Learn to use the left control and shift for right letters. For QWERTY, you should be using LEFT SHIFT for writing &lsquo;P&rsquo; since P is on the right hand. You can turn this setting on in Monkey Type to enforce this. I personally don&rsquo;t but it isn&rsquo;t a bad idea.</p>
<h3 id="advanced-techniques">Advanced Techniques</h3>
<p>Just pratice Monkey type for 5 minutes per day. Really focus on 100% accuracy, touch typing and proper technique; speed comes with time. Some other things to practice are rolling letters.</p>
<h3 id="dvorak--alternative-layout">DVORAK / alternative layout</h3>
<p>I recommend DVORAK, COLEMAK or any common alternative keyboard layout. Later, sure make your own custom layout but having a common one makes it easy to switch your work computer.</p>
<h3 id="ergo-keyboard">ERGO Keyboard</h3>
<p>There are many ergo keyboards out there. I prefer something concave, and split with thumb clusters like the KINESIS. I like my MOONLANDER but the keys are pretty far apart and don&rsquo;t work for small hands and it isn&rsquo;t concave. The GLOVE80 or DACTYL are good alternatives.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Software developers type, A LOT, I&rsquo;m typing this blog post right now. The more efficiently and quickly we can type the more time we have for coffee breaks an occasionally touch grass. I&rsquo;m not saying everyone needs to type 160WPM.</p>
<p>I think 80-100 wpm with 90% accuracy over hours is a great long-term goal. Also, get yourself an ergonomic keyboard, they&rsquo;re expensive but last years and will prevent RSI. Especially one that supports QMK so you can program your own macros which actually reduces the number of keystrokes you need; again efficiency &gt; raw speed. My Moonlander is great but it doesn&rsquo;t work the best for raw speed, but I don&rsquo;t care. I can easily type 80-WPM all day long with fewer keystrokes and less strain on my wrists than if I typed on this MBA keyboard, what I&rsquo;m using right now. Granted it is so much easer type 160 WPM on a low profile MBA keyboard but I have a very hard time sustaining it. My Kinesis however is amazing. I can type full-speed on that thing and it is <strong>SO</strong> comfortable.</p>
<blockquote>
<p>This is also why developers should know their operating system of choice, their IDE and other tools well. Learning to navigate code even 2% more efficently adds up to over 40 hours of time savings in a year, that&rsquo;s a whole extra WEEK worth of work! If you find 5 places to become 2% more efficent then suddenly you are saving 5 weeks worth of effort per year. I&rsquo;m not saying go crazy about optimizing everything, but it is worth spending a few hours per month learning to be just a little more efficient with your tools.</p>
</blockquote>
<p>Another thought</p>
<blockquote>
<p>I think 70-100 WPM is sufficient. We aren&rsquo;t going for speed records but long-sustained typing speed and efficiency. My mom was a medical transcriptionist for many year and can type 115 WPM, fast but not 200wpm like world records, BUT her speed is extremely impressive when you realize she could write 125 WPM with full punctuation, no mistakes AND doing it for 8 hours straight. I remember writing up a school paper by hand and forgetting to type it up as a kid. I dictated the paper to her and she was typing faster than I was reading! Printing seemed to take longer.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Tailwind: Debunking the Debunkers</title>
            <link>https://natescode.com/posts/2023/08/tailwind-debunking-the-debunkers/</link>
            <pubDate>Tue, 01 Aug 2023 00:00:00 -0500</pubDate>
            
            <guid>https://natescode.com/posts/2023/08/tailwind-debunking-the-debunkers/</guid>
            <description>I&amp;rsquo;ve seen a TON of hate for Tailwind. While I don&amp;rsquo;t care much about which technologies other developers use, I do care when developers spread lies because they are religiously for or against a particular technology. I&amp;rsquo;m not much of a technology fan-boy; I use what works for the given requirements. Don&amp;rsquo;t get me wrong, I still have plenty of strong opinions but they&amp;rsquo;re more about general techniques, attitudes etc and not about specific libraries or technologies.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve seen a TON of hate for Tailwind. While I don&rsquo;t care much about which technologies other developers use, I do care when developers spread lies because they are religiously for or against a particular technology. I&rsquo;m not much of a technology fan-boy; I use what works for the given requirements. Don&rsquo;t get me wrong, I still have plenty of strong opinions but they&rsquo;re more about general techniques, attitudes etc and not about specific libraries or technologies.</p>
<p>&ldquo;Strong opinions, loosely held&rdquo;</p>
<p>If I&rsquo;m wrong, then great! That means I get to learn something. If I know anything, according to my employer I do, it is because I&rsquo;ve been wrong and dumb for a very long time.</p>
<p>This is a long post. I&rsquo;ve been compiling all the &lsquo;debunking&rsquo; points that bloggers use against Tailwind for awhile. I&rsquo;m also not a Tailwind fan-boy. I like it, it seems to work but I thought Bootstrap and jQuery were mana from heaven at one point too.</p>
<p>I&rsquo;ll give you the TL;DR at the beginning. You&rsquo;re using Tailwind Incorrectly then calling it a bad tool because you&rsquo;re trying to force it to work within your current mental model of how CSS and styles &lsquo;should&rsquo; work. Everyone hated JSX at first too.</p>
<p>Another disclaimer, I don&rsquo;t use Tailwind at work and for my own projects I prefer styled components</p>
<h2 id="the-problem">The Problem</h2>
<p>Before we talk about Tailwind as a potential solution to CSS problems. Let&rsquo;s define the problems. BEM on the surface seems fine IF all of the components are defined ahead of time and there are little to no changes. The problem with BEM is that your CSS cares about your HTML structure which can change. Furthermore, as we all know child selectors get involved and quickly we&rsquo;re fighting with specificity.</p>
<p>The problem arises with 50,000 lines of CSS. For example, what if we have a <code>CTA-list</code> class for a call to action list. Then we want another list that is similar but show credit card benefits. Semantically, <code>cta-list</code> doesn&rsquo;t make sense anymore.</p>
<h2 id="debunking-reason-1-tailwind-is-just-inline-styles">Debunking &ldquo;Reason 1: Tailwind is just inline styles&rdquo;</h2>
<p>This one really irks me. This is a lazy opinion that shows a developer doesn&rsquo;t understand the difference between classes and inline styles. This has nothing to do with Tailwind specifically.</p>
<p>CSS Classes can:</p>
<ol>
<li>Use psuedo classes / psuedo elements</li>
<li>Use attribute selectors</li>
<li>Use media queries</li>
<li>Contain multiple styles</li>
<li>Define level of specificity</li>
<li>Class styles cascade</li>
<li>Caching: external CSS file can be cached longer that the HTML</li>
<li>Have higher preformance they are parsed onced and cached</li>
<li>Create animations</li>
<li>Uility classes can be generated</li>
<li>CSS classes can use child selectors</li>
<li>CSS classes can be reused</li>
</ol>
<p>As you can see. CSS classes are <strong>NOTHING</strong> like inline styles. Even if we make those classes fairly small and call them utility classes.</p>
<h2 id="debunking-reason-2-tailwind-promotes-ugly-ass-html">Debunking &ldquo;Reason 2: Tailwind promotes ugly-ass HTML&rdquo;</h2>
<p>I thought JSX was an abomination too at first, I was wrong as usual. You know what I find MORE ugly? A 3 MB CSS file that I have to search through to find a class I need, which is probably mispelt. I cannot remove ANY CSS because I cannot know if it is used or not. So I inevitably copy and paste a class that is similar but has the wrong semantic name, give it a new name and modify it from there. YES, &ldquo;use SASS mixins etc&rdquo;. Sure, but that actually takes time to optimize and I&rsquo;m not the only idiot touching the CSS.</p>
<p>A good remedy is <strong>Make Smaller Components</strong></p>
<blockquote>
<p>&ldquo;too many utility classes means YOUR COMPONENTS ARE TOO BIG&rdquo; &lsquo;&ndash; NatesCode</p>
</blockquote>
<p>I hated ugly HTML too. Then I realize something&hellip; YOUR COMPONENTS ARE TOO BIG. This is what I call conflating Symptoms and Problems which is a whole different post. The ugly HTML isn&rsquo;t the problem but a symptom of having too large of components. Remember S in SOLID ? Yeah CSS can do too much: style, position and animation.</p>
<p>Besides, <em>WHY DO YOU SEE THE CLASSES</em>? You should be following Atomic CSS to some degree. See the component below. Where are all the &ldquo;ugly&rdquo; Tailwind classes? They&rsquo;re hidden</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Button</span> <span style="color:#a6e22e">Variant</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">ButtonType</span>.<span style="color:#a6e22e">Primary</span>}&gt;
</span></span></code></pre></div><h3 id="style-position--layout-and-animation">Style, Position / Layout and Animation</h3>
<p>CSS can do too much. CSS should be separated into three parts</p>
<ul>
<li>Styles: font, color, weight</li>
<li>Layout: position, flexbox, grid</li>
<li>Animation</li>
</ul>
<p>Generally we are using some kind of html component system: React, Vue, Hugo, Web Components etc. so that helps with repeating styles, plus class styles do cascade.</p>
<p>I personally have used Atomic Design very successfully.</p>
<p>You can put the long styles in a variable in your framework
You can break down repeated styles (elements) into components
You can, in the cases where CSS repeats a lot, make your own components with those classes applied.
NO @apply is not the answer. If you&rsquo;re using @apply everywhere then you&rsquo;re using it wrong.</p>
<h2 id="debunking-reason-3-apply-is-fundamentally-incompatible-and-non-standard-and-largely-unnecessary">Debunking &ldquo;Reason 3: @apply is fundamentally incompatible and non-standard (and largely unnecessary).&rdquo;</h2>
<p>100% agree. STOP USING @apply everywhere. You&rsquo;re using Tailwind incorrectly and then calling it a bad tool. A flathead screwdriver makes a bad chisel but that doesn&rsquo;t make it a bad tool.</p>
<p>Why are you trying to swap out CSS frameworks regularly?! That&rsquo;s like saying BEM is bad because it requires a ton of refactoring if you switch to SMACSS.</p>
<p>FALSE, switching from Tailwind is pretty easy. I even made an NPM package so you can, called Tailwind-Eject. I&rsquo;d suggest using Tailwind-Convert (my other package that converts all your CSS to customized Tailwind with custom props and shows you how much space and rendering time you&rsquo;re saving). It reads all the Tailwind classes on your class or className attributes and creates CSS classes for them based on the file name etc.</p>
<h2 id="reason-4-tailwinds-focus-on-design-systems-and-tokens-could-mostly-be-replaced-by-css-custom-properties-aka-variableswhich-is-a-standard">Reason 4: Tailwind&rsquo;s focus on design systems and tokens could mostly be replaced by CSS Custom Properties (aka variables)—which IS a standard.</h2>
<p>So then use them WITH Tailwind!!! You supposedly use this tool for a year and didn&rsquo;t figure this out yet? I have tons of variables defined.</p>
<p>No, it can&rsquo;t. You define variables in styles. Which live where? In style sheets ! Now you&rsquo;re back to writing long CSS.</p>
<p>You want to name and type this?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">my-poorly-named-thing</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">font-size</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>my<span style="color:#f92672">-</span>font<span style="color:#f92672">-</span>size);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">font-weight</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>my<span style="color:#f92672">-</span>font<span style="color:#f92672">-</span><span style="color:#66d9ef">weight</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>or this?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">h1</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-title font-bold&#34;</span>&gt;&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span></code></pre></div><p>Which if used with <a href="https://bradfrost.com/blog/post/atomic-web-design/">Atom Design</a>, it would read like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">Title</span>&gt;&lt;/<span style="color:#f92672">Title</span>&gt;
</span></span></code></pre></div><p>No CSS in sight!</p>
<p>I know which one I&rsquo;d choose. Tailwind limits what you can do. You can&rsquo;t do anything janky.</p>
<blockquote>
<p>&ldquo;The problem is that all these tokens are defined…in JavaScript. A CSS framework. Using JavaScript for its design tokens. In 2021.&rdquo; Please don&rsquo;t tell him about CSS-in-JS or HTML-in-JS (JSX) !</p>
</blockquote>
<blockquote>
<p>&ldquo;So for example, in Tailwind you can write class=&ldquo;mb-8&rdquo; and you get a margin-bottom: 2rem style applied. But guess what you could do instead? Define :root { &ndash;spacing-8: 2rem } in your stylesheet, and then write margin-bottom: var(&ndash;spacing-8) anywhere you want. As in literally anywhere: a stylesheet, or a JS component, or even a style= attribute directly in HTML!&rdquo;</p>
</blockquote>
<p>True. Then use open props project. But then you&rsquo;re still stuck writing your own classes which will grow or writing <code>margin-bottom: var(--spacing-8)</code> inline everywhere which is even worse.</p>
<h2 id="debunking-reason-5-tailwind-forgets-that-web-components-exist">Debunking &ldquo;Reason 5: Tailwind forgets that web components exist.&rdquo;</h2>
<p>EXACTLY THE POINT! CSS should be HTML Agnostic. <a href="https://www.csszengarden.com/">CSS Zen Garden</a> was a lie.</p>
<p>He has a point but Chrome and Firefox do support linking stylesheets inside the shadow DOM now.</p>
<p>If it doesn&rsquo;t work then done use it. Again, doesn&rsquo;t mean it is a bad tool, just the wrong one for you.</p>
<h2 id="debunking-reason-6-finally-tailwind-encourages-divspan-tag-soup">Debunking &ldquo;Reason 6: Finally, Tailwind encourages div/span-tag soup.&rdquo;</h2>
<p>Okay, this is just a lazy point. If you&rsquo;re a bad dev then you&rsquo;ll use &lsquo;div/span soup&rsquo;. Tailwind is HTML agnostic. Why would more divs be created? You put classes on what needs them and many properties are inheritable.</p>
<p>See many still use BEM and Sass. What BEM gets wrong is that your CSS is structuring your HTML.</p>
<p>Arguments against Tailwind
Utility class === inline styles
Ugly HTML
@apply
no separation of concerns</p>
<p>We separate unrelated things. Your button being green, round and text bold is NOT a separate concern. I.E. JSX.
lack of support for web components: import external stylesheet. Or maybe this is a good reason to use something else.</p>
<p>arrogant to try another framework</p>
<p>renames CSS, cocky to say designers of CSS are dumb and re-design it: No</p>
<p>div / span soup: Sounds like you don&rsquo;t know how to code</p>
<p>hard to migrate: Tailwind-Eject</p>
<p>hard to maintain: ROFL, compared to what? Have you worked on enterprise 30MB CSS ?</p>
<p>It cannot do some of the basic stuff that UI frameworks offer these days, like media queries in JS (useMediaQuery). Basically what Tailwind does is compile a huge list of classes before any JS code is actually run. This means you cannot use any kind of variable value from JS. The only way to do so, is by using CSS variables and change the value of those in runtime using JS. TODO: need to do more research or make an NPM package. This may be VERY legit issue or an exception which is okay</p>
<h2 id="debunking-reason-7-no-child-selectors">Debunking &ldquo;Reason 7: No child selectors&rdquo;</h2>
<p>Again, that is like saying React is bad because you don&rsquo;t directly manipulate the DOM. That is the point! Child selectors are generally bad! Tailwind has them now, has had plugins for them as well. They&rsquo;re bad because that makes yours CSS dependent an your HTML structure, which is a bad idea. Your components already define the structure and semantics.</p>
<p>Alternative to child selectors (in ALL CSS)</p>
<ul>
<li>use inheritance (font, color etc all cascade)</li>
</ul>
<h2 id="quotes">Quotes</h2>
<p>Developer that needed a full component framework that added A11y features automatically but used a CSS Library and was disappointed by the wrong tool choice. Bad tool choice, not bad tool. I personally have built my own UI component framework with Next, React and Tailwind.</p>
<blockquote>
<p>&ldquo;I mean along the lines of html element roles, like role=button for clickable elements for screen readers, proper aria labels for label/input relationships etc. There&rsquo;s a lot, more than I care to maintain myself, so having a UI framework that takes care of that for me is a big help.&rdquo;</p>
</blockquote>
<blockquote>
<p>&ldquo;&ldquo;We also follow a rule now that says: &ldquo;Keep related things together&rdquo; because it makes things easier to find and understand for new devs.&rdquo;</p>
</blockquote>
<p>You mean like utility classes? (I said this but the developer couldn&rsquo;t accept that)</p>
<p>What about Accessibility?</p>
<p>This was a great counter-point. We had a bit of a heated debate about Tailwind. It was clear he was burnt out by a team that didn&rsquo;t use Tailwind correctly and didn&rsquo;t think about accessibility in their HTML components; something that is lacking.</p>
<p>So what do we do about the HTML part of accessibility?</p>
<ul>
<li>RADIX</li>
<li>Headless UI</li>
<li>Mantine (my presonal favorite)</li>
</ul>
<p>Tailwind is a CSS library, NOT a component library.</p>
<p>Tailwind&rsquo;s killer feature, IMHO
I think Tailwind is GREAT if one is working on a large team with developers that might not have great CSS skills. You don&rsquo;t have to worry about someone copying and pasting a class then renaming it and slightly modifying it. Also, English isn&rsquo;t everyone&rsquo;s first language and spelling mistakes can and do happen. Which makes finding a class by name almost impossible (Yes, I&rsquo;ve run into this MANY times. A good reason to enforce spelll checking in PRs).</p>
<p>Yes, SASS mixins exist but I have rarely seen them consistently done well. That is the killer feature for me. Devs can use tailwind-config-viewer and see 100% of all the classes instantly. Everything is already documented.</p>
<h2 id="why-im-not-using-tailwind">Why I&rsquo;m NOT using Tailwind</h2>
<p>Some of the negatives are true. It bloats HTML and it is an abstraction that I personally don&rsquo;t think is necessary. I&rsquo;m experimenting with using styled components + CSS Linters + subset CSS (plugin that restricts the usage of CSS and using CSS props to get that benefit that Tailwind does have).</p>
<p>I prefer linters / parsers automatically checking and preventing mistake than having to write 30 css classes. Tailwind can&rsquo;t do 100% of what normal CSS can do either. There are just some things that must or should be done in pure regular non-utility CSS. I&rsquo;m a bit of a purist so we&rsquo;ll see how that goes! I think this approach, or something similar will be closer to what Theo calls &ldquo;Safety Nets&rdquo; and less of &ldquo;Guard Rails&rdquo;.</p>
<h2 id="disingenuous-or-stupid">Disingenuous or Stupid?</h2>
<p>Let&rsquo;s look at some code from yet another Medium article claiming Tailwind bloats HTML, spoiler alert ALL CSS IS BAD WHEN YOU DON&rsquo;T UNDERSTAND CASCADING.</p>
<p>HE&rsquo;S EITHER LYING and over-exaggerating to make his point or genuinely shouldn&rsquo;t be allowed to write CSS for a living. I was able to clean up this code by 30%!!! Remember Tailwind is just CSS. So blaming the tool here doesn&rsquo;t matter.</p>
<p>PLEASE if you&rsquo;re gonna hate a tool, at least don&rsquo;t make yourself look like an incompetent dev doing it.</p>
<p>You can see the original code at the [https://javascript.plainenglish.io/tailwind-is-an-anti-pattern-ed3f64f565f0](author&rsquo;s post here).</p>
<p>The author&rsquo;s disingenous CSS.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden md:block md:ml-10 md:pr-4 md:space-x-8&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-gray-500 hover:text-gray-900&#34;</span>&gt;Product&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-gray-500 hover:text-gray-900&#34;</span>&gt;Features&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-gray-500 hover:text-gray-900&#34;</span>&gt;Marketplace&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-gray-500 hover:text-gray-900&#34;</span>&gt;Company&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-indigo-600 hover:text-indigo-500&#34;</span>&gt;Log in&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>I would instantly deny this pull-request. Firstly, I know this is just an example but 99% of the time the links would be data-driven which remove all of the repetition anyways. Secondly, we CAN remove the repetition by using the <code>C</code> in <code>CSS</code>. Font size, colors etc all cascade. So we can put them on the parent. That&rsquo;s is the beautiful thing about utility classes in CSS, they ALL have the same specificity! We don&rsquo;t have to worry about some random selector on line 13,370 that does <code>div &gt; a</code> overriding our styles.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden md:block md:ml-10 md:pr-4 md:space-x-8 font-medium text-gray-500 hover:text-hover-gray-900&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>&gt;Product&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>&gt;Features&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>&gt;Marketplace&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>&gt;Company&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text-indigo-600 hover:text-indigo-500&#34;</span>&gt;Log in&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>SO much cleaner already! Now, unless you&rsquo;re doing PHP and JQuery like it is 2007, you&rsquo;re most likely going to break down this into sematic components. Those could be web components, React or Vue components.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">Navigation-Desktop</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span>&gt;Product&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span>&gt;Features&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span>&gt;Marketplace&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span>&gt;Company&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span> <span style="color:#a6e22e">Selected</span>&gt;Log in&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>Where is all the <code>ugly ass HTML</code> you mentioned? Again, the component has the structure and semantics, NOT the styles.</p>
<h2 id="not-a-panacea">Not a panacea</h2>
<p>VERY few people anti-tailwind bloggers actually have valid negative points against Tailwind. They&rsquo;re not compenent enough to development a decent argument for or against it. Tailwind is by far no panacea. Because I claim to be unbias, I&rsquo;m going to give my negatives against Tailwind, based on actual exprience and understand how enterprise CSS projects work.</p>
<ul>
<li>No way to prevent arbitrary <code>[100px]</code> values being used. SERIOUSLY!?</li>
<li>DSL still requires a bit of learning.</li>
<li>Bloated if hard link from a CDN. It doesn&rsquo;t work well without pre-processing and JIT to only generate the styles you need.</li>
<li>Utility classes don&rsquo;t support 100% of the capabilities of CSS (child selectors are just bad).</li>
<li>YET ANOTHER build step</li>
<li>Cannot do EVERYTHING that plain CSS can do</li>
<li>Styled Components are better in every way.</li>
</ul>
<h2 id="the-perfect-css-tool">The Perfect CSS tool</h2>
<ul>
<li>No DSL to learn</li>
<li>No runtime overhead</li>
<li>Little to no build step</li>
<li>co-location with HTML &amp; JS</li>
</ul>
<p>The only way to do this is native CSS. I think a close second is styled components with some linter plugins, which is my new approach I&rsquo;m trying.</p>
<p>So PLEASE if you&rsquo;re going to rebuttal, do it from a point of logic and competence. I&rsquo;m not even using tailwind for this blog.</p>
<p>Cheers!</p>
]]></content>
        </item>
        
        <item>
            <title>Two Crystal Balls Problem</title>
            <link>https://natescode.com/posts/2023/03/two-crystal-balls-problem/</link>
            <pubDate>Wed, 29 Mar 2023 02:12:10 -0500</pubDate>
            
            <guid>https://natescode.com/posts/2023/03/two-crystal-balls-problem/</guid>
            <description>This is a famous software engineering interview question from Google. I thought I&amp;rsquo;d provide my explanation that is borderline pedantic. Let&amp;rsquo;s solve this problem as naively as possible then again with nothing more than highschool maths.
The Problem There are a few different versions of this question. Sometimes it is crystal balls, or eggs or something else.
There is a 100 story building. We have two magic glass orbs. The orbs will only break at or above floor X.</description>
            <content type="html"><![CDATA[<p>This is a famous software engineering interview question from Google. I thought I&rsquo;d provide my explanation that is borderline pedantic. Let&rsquo;s solve
this problem as naively as possible then again with nothing more than highschool maths.</p>
<h2 id="the-problem">The Problem</h2>
<p>There are a few different versions of this question. Sometimes it is crystal balls, or eggs or something else.</p>
<p>There is a 100 story building. We have two magic glass orbs. The orbs will only break at or above floor X. We need to find what floor X is, in as few drops as possible. No matter how many times we drop an orb, it will only break at or above floor X. We are given two orbs. What is the fewest drops to find the floor no matter what the floor is? We are trying to minimize the worst case here.</p>
<h2 id="the-worst-case-scenario">The Worst Case Scenario</h2>
<p>What make this problem unique is that we have limited failed tries, 2, and must optimize for the worst case-scenario more than the average runtime. I think that is an important concept to highlight.</p>
<h2 id="naive">Naive</h2>
<h3 id="simplify-the-problem">Simplify the problem</h3>
<p>If we only had one ball, then we&rsquo;d just have to start at the bottom floor and work our way up. If we had infinite balls, we could just do a binary search and we&rsquo;d only need log(n) balls at most (7 balls for 100 floor) But 2? HMM. So obviously, once the second orb breaks, we&rsquo;ll be falling back to the floor-by-floor algorithm.</p>
<h3 id="first-thoughts">First thoughts</h3>
<p>Most will first think about cutting the floors in half. So let&rsquo;s do that. Give a building with N floor, n=100 here, we start at floor 50 (n/2), if the ball breaks, then we check from 1-49. If the ball doesn&rsquo;t break, then we check 51-100. So we broke the building into 2 sections of size 50. The worst case is 51.</p>
<blockquote>
<p><strong>NOTE</strong> I&rsquo;m being less efficient in the first example on purpose. If we check floor 50 and the orb doesn&rsquo;t break, then we can continue doing a binary search 50 75 88 94 97 99 100 which is 7 drops. The worst case is 50 then.</p>
</blockquote>
<p>We might realize we could break the building up into differently sized sections.</p>
<p>If we break it into 4 sections of 25 then our worst case is 25+4-1 = 28.</p>
<p><code>25,50,75,100,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99</code></p>
<p>WE can see the pattern and make a formula. sections, S, and section size B. So tries, T make is</p>
<p>$$where \ S \ and \ B \ are \ factors \ of \ N$$
$$T=S+B-1$$</p>
<p>So we can manually find a <strong>good</strong> solution</p>
<pre><code>2,50 = 51
4,25 = 28
5,20 = 24
10,10 = 19
</code></pre>
<p>After 10,10 it just gets worse again. You might even realize since S and B are the same, we could think of that as <code>sqrt n</code>. Which is a <em>good</em> answer. Not the <em>ideal</em> answer but a decent one.</p>
<p>Our generalized worst case would be to jump by</p>
<p>$$ \sqrt(n) $$</p>
<p>So for any building size N. We can solve it in</p>
<p>$$ 2 \sqrt(n) - 1$$</p>
<p>tries. For N=100, that is 19 (18 with inference).</p>
<p>If X = 99 then we try 10,20,30,40,50,60,70,80,90,100,91,92,93,94,95,96,97,98.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="the-quadratics">The Quadratics</h2>
<p>The ideal solution comes from understanding that as we check the top of each section, we have already dropped for each previous section.</p>
<p>For example, if we jump by 10 each time then at floor 30 we have already jumped 2 times, 10,20. If the ball breaks we still have to check 10 places, 21-30
which make our total 12, not 10. Ideally that number would be consistent. We need to find an equalibrium. We would jump by 10 then by 9 because then we&rsquo;d have a max of 10 jumps. We can try this but 10 doesn&rsquo;t quite work. We end at 55. So we need a bigger number. 55 is the sum of 1 to 10. We could manually find that 14 + 13 + 12 + 11.. is 104 which is enough! But as computer scientists, we should look for the generalized solution.</p>
<!-- raw HTML omitted -->
<p>So each jump must be one less than the previous. All jumps must add up to 100 (or more). We get the following formula that you&rsquo;ll see in other blog posts.</p>
<p>$$n+n-1+n-2+n-3+n-4&hellip;=100$$</p>
<p>I&rsquo;ve seen this formula on many blog posts that don&rsquo;t explain it clearly for the beginners. This formula is really the same as</p>
<p>$$ \sum_{i=1}^n i $$</p>
<p>Which just means <em>&ldquo;Add all numbers from 1 to N&rdquo;</em>.</p>
<p>With a little thinking we realize that is is going to go down to 1. So really we are adding 1 to N and the sum being 100. We were just defining it in a backwards sense.</p>
<p>So we can figure out the sum off all numbers 1 to n with the following formula that is easy to figure out on your own.</p>
<p>Adding 1 to 10, we can make 10 pairs that add up to 10. There are always $ n \over 2 $ pairs. The middle number doesn&rsquo;t pair up so we add that.</p>
<p>10 + 0 = 10
9 + 1 = 10
8 + 2 = 10
7 + 3 = 10
6 + 4 = 10</p>
<p>$$ n (n + 1) \over 5 $$</p>
<p>Which can be simplified to</p>
<p>$$ .5n^2 + .5n = floors $$</p>
<p>Or in our case of 100 floors</p>
<p>$$ .5n^2 + .5n = 100 $$</p>
<p>Then make it all equal 0 for balance</p>
<p>$$ .5n^2 + .5n - 100 = 0 $$</p>
<p>BOOM! we have a quadratic formula we can solve.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Remember your quadratics? Yeah! That&rsquo;s just a quadratic formula that we can solve!</p>
<p>$$(ax^2 + bx + c = 0)$$</p>
<p>Our formula is</p>
<p>$$a = .5$$
$$b = .5$$
$$c = -100$$</p>
<p>and the quadratic formula.</p>
<p>$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a} $$</p>
<p>So solve this formula (just use an <a href="https://www.mathsisfun.com/quadratic-equation-solver.html">online solver</a>)</p>
<p>$$x = {-.5 \pm \sqrt{.5^2-4(.5)(-100)} \over 2*.5} $$</p>
<p>$$x = {-.5 \pm \sqrt{(.25)-(-200)} \over 1} $$</p>
<p>$$x = {-.5 \pm \sqrt{200.25}} $$</p>
<p>So if we do that, we get <code>13.650971698085</code> for the positive solution. We can ignore the negative solution.</p>
<p>Now, we can only have a whole floor number so we round to the nearest number and that is <code>14</code>.</p>
<p>I used <a href="https://www.desmos.com">desmos</a> to chart the formula out. You can see the <a href="https://www.desmos.com/calculator/yaxygr4jvi">chart here</a>. Or enjoy the screenshot below.</p>
<p><img alt="Parabola touching 13.6 on the x axis" src="/images/parabola.png"></p>
<p>So <code>n=14</code>. Which means that we start at floor n, <code>14</code> then move <code>n-1</code> floors to <code>27</code>. We continue moving one less floor each time.</p>
<p>I.E if we try <code>14,27</code> then the ball breaks at 27,
we have to try 15-26 which is 12 tries plus the two from before = 14! Each time we have one less try for the in-between floors.</p>
<h4 id="1427395060697784909599100"><code>14,27,39,50,60,69,77,84,90,95,99,100</code></h4>
<hr>
<h2 id="the-code">The Code</h2>
<p>We have solved the problem and did the math. Now it is time to translate this into code. I&rsquo;m going to write this in javascript, the language
I typically use for interviews.</p>
<p>We don&rsquo;t need to solve the quadratic equation in code. Remember the reverse formula? <code>n+n-1+n-2...</code>? We can just start at the top and subtract 1, then 2, then 3 etc. Until we get to 0 or less.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">findFloor</span>(<span style="color:#a6e22e">floors</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">steps</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">step</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">floor</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">steps</span>.<span style="color:#a6e22e">unshift</span>(<span style="color:#a6e22e">floor</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">floor</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">floor</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">step</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">steps</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">steps</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You&rsquo;ll notice this gives us a different answer! We have a different sequence of floors.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>[<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">22</span>, <span style="color:#ae81ff">34</span>, <span style="color:#ae81ff">45</span>, <span style="color:#ae81ff">55</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">72</span>, <span style="color:#ae81ff">79</span>, <span style="color:#ae81ff">85</span>, <span style="color:#ae81ff">90</span>, <span style="color:#ae81ff">94</span>, <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">99</span>, <span style="color:#ae81ff">100</span>];
</span></span></code></pre></div><p>Still, the worst case is <code>14</code>. This one is ever so slightly more efficient because if the ball breaks on
floor 9, then we only have 9 tries, everything else is 14.</p>
<h2 id="the-same-answer">The Same Answer</h2>
<p>That was just a fun detour. We <em>can</em> code it to get the same floors. We would have to solve the quadratic formula THEN start at
that floor and jumping by one less each time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">findFloor</span>(<span style="color:#a6e22e">n</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">n</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// solve quadratic
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">floor</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">ceil</span>((<span style="color:#f92672">-</span><span style="color:#a6e22e">b</span> <span style="color:#f92672">+</span> Math.<span style="color:#a6e22e">sqrt</span>((<span style="color:#a6e22e">b</span> <span style="color:#f92672">^</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">c</span>)) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">a</span>));
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// walk the floors
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">steps</span> <span style="color:#f92672">=</span> [<span style="color:#a6e22e">floor</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">step</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">floor</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">floor</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">n</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">floor</span> <span style="color:#f92672">+=</span> <span style="color:#f92672">--</span><span style="color:#a6e22e">step</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">steps</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">floor</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">floor</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">steps</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<hr>
<h2 id="what-about-3-orbs-5-infinite">What about 3 Orbs? 5? Infinite?</h2>
<p>I was discussing this with a friend and she brought this up. I hadn&rsquo;t really though about what the actual answer would be. Here is the algorithm depending on the number of orbs relative to the number of floors.</p>
<p>Algorithm 1: For 1 orb = go floor by floor from 1..floors</p>
<p>Algorithm 2: For 2 orbs = start at this floor $ .5n^2 + .5n = floors $ then jump by one less floor each time until 1 orb remains, see algorithm 1.</p>
<p>Algorithm 3: For 3 to log2(floors) Orbs = hen do a binary search until only 2 orbs remain, see algorithm 2.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I know that was a <em>REALLY</em> long explanation but I think it was much more thorough than any other blog post about it.</p>
]]></content>
        </item>
        
        <item>
            <title>&#39;This&#39; That and Dispatch</title>
            <link>https://natescode.com/posts/2023/03/this-that-and-dispatch/</link>
            <pubDate>Thu, 23 Mar 2023 14:54:18 -0500</pubDate>
            
            <guid>https://natescode.com/posts/2023/03/this-that-and-dispatch/</guid>
            <description>There are numerous blogs and videos about Javascript&amp;rsquo;s this keyword. In my opinion, virtually all of them fall short and fail to even mention dispatch or binding.
As always, I encourage polyglot programming. So I&amp;rsquo;ll be showing examples is Javascript, C#, Go and Rust.
Back to the basics First, let us cover some really basic but critical Javascript.
function greet(name) { console.log(`hello, ${name}`); } function greet() { console.log(`hello, stranger`); } greet(&amp;#34;natescode&amp;#34;); Which function is called?</description>
            <content type="html"><![CDATA[<p>There are numerous blogs and videos about Javascript&rsquo;s <code>this</code> keyword. In my opinion, virtually all of them fall short and
fail to even mention <code>dispatch</code> or <code>binding</code>.</p>
<p>As always, I encourage polyglot programming. So I&rsquo;ll be showing examples is Javascript, C#, Go and Rust.</p>
<h2 id="back-to-the-basics">Back to the basics</h2>
<p>First, let us cover some <em>really</em> basic but critical Javascript.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>(<span style="color:#a6e22e">name</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, stranger`</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">greet</span>(<span style="color:#e6db74">&#34;natescode&#34;</span>);
</span></span></code></pre></div><p><strong>Which function is called?</strong></p>
<p>If you said the first function, that is <em>incorrect</em>.</p>
<p>Javascript <em>ONLY</em> cares about the function name, not the parameters. In the case of duplicate function names, the last one defined wins; just like CSS.</p>
<h2 id="methods-vs-functions">Methods vs Functions</h2>
<p>Now, when we get to methods, somethings change. Let us make our previous example use methods.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">name</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Bob</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, stranger`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">person</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Alice</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">Greet</span>(<span style="color:#e6db74">&#34;natescode&#34;</span>);
</span></span></code></pre></div><p>Now, even though <code>Alice</code> and <code>Bob</code> both have <code>greet</code> functions, there is no longer a name conflict! Hey, I though Javascript functions had to have unique names? They do, but not methods! Because methods are functions that are related to a specific function. They have their own scope / context.</p>
<p>Now let&rsquo;s change the example to use the object&rsquo;s context.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Alysan&#34;</span>,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Bob</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Robert&#34;</span>,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, stranger. I am </span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// they&#39;ll both use the same function as a method
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">Alice</span>.<span style="color:#a6e22e">greet</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">greet</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Bob</span>.<span style="color:#a6e22e">greet</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">greet</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Alice</span>.<span style="color:#a6e22e">greet</span>(<span style="color:#e6db74">&#34;NatesCode&#34;</span>);
</span></span></code></pre></div><p>You&rsquo;ll see I changed the <code>greet</code> methods back to a single function. I did this to highlight the fact that methods are just functions executed within an specific object&rsquo;s context. Technically, ALL javascript functions are methods since everything is on the <code>window</code> object. The plain <code>greet</code> function will <em>not</em> return <code>null</code> or <code>undefined</code> because the <code>name</code> exists as <code>window.name</code>; it is usually an empty string though.</p>
<p>You&rsquo;ll the two lines that associate the <code>Greet</code> function with both the <code>Alice</code> and <code>Bob</code> objects.</p>
<p>When we call their respecitve <code>greet</code> methods, the output changes based on the object the function was called on. Methods, unlike functions, have a special parameter called the <em>receiver</em>. This is <em>really</em> obvious in <code>Go</code> where the receiver parameter comes before the method name, the same order we call it in.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// &#39;this&#39; could be called anything since it is just a parameter.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// normally it would be called `person` by convention
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#a6e22e">Person</span>) <span style="color:#a6e22e">greet</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>){
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;hello, &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="still-unclear-oh-my">Still unclear? Oh MY!</h2>
<p>To clear up how <code>this</code> works. I show you an example in English. Here
is a script for you to read.</p>
<pre tabindex="0"><code>  Hello, my name is [your name], and today . . .
</code></pre><p>Did you say &ldquo;your name&rdquo; or did you say your actual name? &ldquo;you&rdquo; and &ldquo;me&rdquo; and &ldquo;my&rdquo; are relative! They don&rsquo;t refer to the same person all the time. It depends <em>WHO</em> says it!</p>
<p>Let&rsquo;s change the code example to read more like English and say
&ldquo;my name is Alice&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Alysan&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`My name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">my</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Bob</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Robert&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`My name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">my</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Alice</span>.<span style="color:#a6e22e">greet</span>(); <span style="color:#75715e">// My name is Alysan
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">Bob</span>.<span style="color:#a6e22e">greet</span>(); <span style="color:#75715e">// My name is Robert
</span></span></span></code></pre></div><p>So <code>this</code> refers to the object that we are calling the function on, <em>the reciever</em> again. <code>this</code> is really just a special parameter as we saw in <code>Go</code>. We can think of
the following two code snippets as being conceptually equivalent.</p>
<h4 id="using-this">Using <code>this</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`my name is </span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="receiver-object-parameter">receiver object parameter</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>(<span style="color:#a6e22e">receiver</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`my name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">receiver</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I hope that clears up at least the basic understanding of <code>this</code>.</p>
<h2 id="dispatch">Dispatch</h2>
<p>Ok. So hopefully now <code>this</code> is starting to make sense. We are now going to take the minecar into the cave of deeper knowledge! Let&rsquo;s talk about dispatch!</p>
<p>First a code example. Can you tell me which method will be run?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Alysan&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`My name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">my</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Bob</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Robert&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`My name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">my</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// we are picking Alice or Bob at random.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Nothing else important about this code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">friend</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0.5</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">Bob</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">friend</span>.<span style="color:#a6e22e">greet</span>();
</span></span></code></pre></div><p>Hopefully, you answered <code>no, I cannot predict something inherently random!</code>. My point exactly. This is called <code>dynamic dispatch</code> or <code>late binding</code>. Those are just fancy terms for <code>Let's figure out which method to call on which object when we RUN the code, not before</code></p>
<p>In statically typed languages, we know for 100% certainty which type <code>friend</code> will be, before the code runs.</p>
<h2 id="c-dispatch">C# Dispatch</h2>
<p>Let&rsquo;s translate that example into C#</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Alice</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Alysan&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Alice(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Bob</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Robert&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Bob(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// csharp does have VAR but that just infers the type</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// it isn&#39;t dynamic</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> friend = Math.random() &gt; <span style="color:#ae81ff">0.5</span> ? Alice : Bob;
</span></span><span style="display:flex;"><span>friend.greet();
</span></span></code></pre></div><p>This code won&rsquo;t even compile. We&rsquo;ll get an `` error. Because we
don&rsquo;t know which type friend is going to be. The most direct translation would change the last two lines to look like this.</p>
<h3 id="using-dynamic">Using <code>dynamic</code></h3>
<p>** NEVER DO THIS **</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// NEVER, EVER, EVER, for the love of keeping your job</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// and not being replaced by AI, NEVER EVER DO THIS!!!!</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">dynamic</span> friend = Math.random() &gt; <span style="color:#ae81ff">0.5</span> ? Alice : Bob;
</span></span><span style="display:flex;"><span>friend.greet();
</span></span></code></pre></div><p>Now friend&rsquo;s type is not set until we run the code. This will work. Just don&rsquo;t do it! Promise? Okay.</p>
<h3 id="using-interface">Using <code>interface</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// we define an interface that has a greet method</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IGreetable</span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> greet();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Alice</span>: IGreetable {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Alysan&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Alice(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Bob</span>: IGreetable {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Robert&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Bob(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// csharp does have VAR but that just infers the type</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// it isn&#39;t dynamic</span>
</span></span><span style="display:flex;"><span>IGreetable friend = Math.random() &gt; <span style="color:#ae81ff">0.5</span> ? Alice : Bob;
</span></span><span style="display:flex;"><span>friend.greet();
</span></span></code></pre></div><p>Now, friend is of a shared type <code>iGreetable</code>. An interface is a type that defines which methods should exist on an object. Now we don&rsquo;t care if we get an <code>Alice</code> or <code>Bob</code>, we are <em>ONLY</em> looking for any object that fits
the <code>IGreetable</code> interface, in this case that means anything with a <code>greet</code> method that take no parameters and returns nothing.</p>
<blockquote>
<p>NOTE: statically typed languages do differentiate between methods/functions with different number of parameters, parameter types and return types. <code>greet</code> with a return type or parameter of <code>string name</code> would be a different method all together</p>
</blockquote>
<h3 id="using-inheritance">Using Inheritance</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// we define an interface that has a greet method</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Alice</span>: Person {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Alysan&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Alice(){
</span></span><span style="display:flex;"><span>    super();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Bob</span>: Person {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Robert&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Bob(){
</span></span><span style="display:flex;"><span>    super();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// csharp does have VAR but that just infers the type</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// it isn&#39;t dynamic</span>
</span></span><span style="display:flex;"><span>Person friend = Math.random() &gt; <span style="color:#ae81ff">0.5</span> ? Alice : Bob;
</span></span><span style="display:flex;"><span>friend.greet();
</span></span></code></pre></div><p>Inheritance look similar to interfaces. <code>Bob</code> and <code>Alice</code> both inherit from the <code>Person</code> object. You can think of inheritance as a compiler-assisted copy-paste. So Alice doesn&rsquo;t have her own <code>greet</code> method anymore but that is okay because her parent does! Similar to have Javascript&rsquo;s prototypal inheritance works.</p>
<h3 id="using-sum-types">Using Sum Types</h3>
<p>I wasn&rsquo;t going to include this one, but man it is too good to pass up. I&rsquo;m going to write this example in language of the gods, <code>Rust</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// define a Person struct with a greet method
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Person</span> {
</span></span><span style="display:flex;"><span>    name: String,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Person {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">greet</span>(<span style="color:#f92672">&amp;</span>self) {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;My name is </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, self.name);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// define an enum for friend type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">enum</span> <span style="color:#a6e22e">Friend</span> {
</span></span><span style="display:flex;"><span>    Alice,
</span></span><span style="display:flex;"><span>    Bob,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// create Alice and Bob structs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> alice <span style="color:#f92672">=</span> Person { name: String::from(<span style="color:#e6db74">&#34;Alysan&#34;</span>) };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> bob <span style="color:#f92672">=</span> Person { name: String::from(<span style="color:#e6db74">&#34;Robert&#34;</span>) };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// randomly choose between Alice and Bob
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> friend <span style="color:#f92672">=</span> <span style="color:#66d9ef">if</span> rand::random() { Friend::Alice } <span style="color:#66d9ef">else</span> { Friend::Bob };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// call greet method on chosen friend
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">match</span> friend {
</span></span><span style="display:flex;"><span>    Friend::Alice <span style="color:#f92672">=&gt;</span> alice.greet(),
</span></span><span style="display:flex;"><span>    Friend::Bob <span style="color:#f92672">=&gt;</span> bob.greet(),
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>** BTW the above Rust code was generated by Chat GPT. I had it translate the previous C# code into rust but use enums for the friend type. The FUUUUTUUURE!</p>
<p><img alt="Squidward saying future" src="/images/squidward_future.jpg"></p>
<p>So let&rsquo;s explain the Rust code for those unfamiliar. We define a <code>struct</code> which is like a <code>class</code> in many ways. It only has data though, no methods.
We then define an <code>impl</code> block which just defines the methods for that <code>struct</code> separately. Unlike Javascript, Rust and other languages allow us to define our own
actual types. Even if we define a <code>class Person</code> in Javascript, the type will always be <code>object</code> and we&rsquo;d have to use the <code>Object.prototype.isPrototypeOf()</code> method to see if something is from a <code>Person</code> object.</p>
<p>The <code>enum</code> in a type that combines types. So <code>friend</code> can either be of type <code>Alice</code> or type <code>Bob</code>.
We create new object literals of type <code>Person</code> for both Alice and Bob. The enum is our ticket for the train to <code>polymophism</code>.</p>
<p>You&rsquo;ll see that Rust defines an enum type which is just a type that combines two more types, type addition aka Algebraic Data Types.</p>
<p>Friend is of the shared type. Then at runtime, we check which variant of Friend we have and call the approprait method. This isn&rsquo;t dynmic dispatch because we KNOW the type of Friend before the code runs. There is some <em>dynamic</em> checking however which comes with a small performance overhead. The enum is like a C union but with a bit that tells us which variant we currently have.</p>
<p>Effectively, enums make types into values. Like a <code>string name</code> in C# must always be a string but can change to different values.</p>
<h2 id="ms-poly-morphism">Ms. Poly Morphism</h2>
<p><code>Polymorphism</code> is a tough term to define. I&rsquo;m going to define it as the following.</p>
<blockquote>
<p>Polymorphism is the process of treating code (objects, data, types) based on their shared similarities</p>
</blockquote>
<p>In all the previous examples, we were simply trying to <code>abstract</code> away the differences and focus on the similarites between <code>bob</code> and <code>alice</code> so
that we could treat them equally; even code can be inclusive!</p>
<p>Abstraction is another term we need to define since <em>polymorphism</em> is a from of <em>abstraction</em>. Most, if not all, definiton talk about <em>hiding</em> details.
I think, at least in software, it isn&rsquo;t about hiding unneeded details but <em>ignoring</em> them. Furthermore, <em>abstraction</em>, is really about trying to describe the
essense of the thing that doesn&rsquo;t only apply to one thing. For example, my nephew told my daughter Luna something about his <code>iPad</code> and she called it a <code>tablet</code>. He
corrected her that it is an <code>iPad</code>. They were both correct. He was being more concrete or exact while Luna was using a more abstract, less accurate, term.</p>
<p>So for instance, if you know how to drive a vehicle then it doesn&rsquo;t matter if the vehicle&rsquo;s make is a <strong>Ford</strong> , <strong>Chevy</strong>, or <strong>Dodge</strong> because all you care is that
it has two pedals (three for manual), a wheel and shifter. Everything else doesn&rsquo;t matter and is not a <strong>concern</strong>.</p>
<h2 id="and-beyond">And Beyond!</h2>
<p>We could go further and start talking about VTABLES and more, but I think that is best saved for another blog post and video. I really hope this helps. Constructive feedback is encouraged and welcome.</p>
<p>Until next time</p>
<p><code>return 0;</code></p>
]]></content>
        </item>
        
    </channel>
</rss>
