<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello Friend NG</title>
        <link>//localhost:1313/posts/</link>
        <description>Recent content in Posts on Hello Friend NG</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 29 Nov 2024 12:36:46 -0600</lastBuildDate>
        <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Aaa</title>
            <link>//localhost:1313/posts/aaa/</link>
            <pubDate>Fri, 29 Nov 2024 12:36:46 -0600</pubDate>
            
            <guid>//localhost:1313/posts/aaa/</guid>
            <description>Testing !</description>
            <content type="html"><![CDATA[<p>Testing !</p>
]]></content>
        </item>
        
        <item>
            <title>Productivity Life Hacks for Sofware Engineers</title>
            <link>//localhost:1313/posts/productivity-hacks/</link>
            <pubDate>Fri, 29 Nov 2024 11:39:31 -0600</pubDate>
            
            <guid>//localhost:1313/posts/productivity-hacks/</guid>
            <description>Productivity Life Hacks for Sofware Engineers.
My co-worker, Abdullahi, encouraged me to write this post. Since I&amp;rsquo;m on Thanskgiving vacation, I thought why not? Plus, writting this post proves him correct; I&amp;rsquo;m very productive.
I generally don&amp;rsquo;t think of myself as very productive. I was diagnosed with ADHD, like my father, and I&amp;rsquo;ve always tried to take on too many projects, jobs and challenges at once.
I work 2 jobs, sometimes 3, I am a father of twin girls that are in school plus I make time to work on NatesCode blog posts, videos, exercise and be a son, boyfriend and play DnD.</description>
            <content type="html"><![CDATA[<p>Productivity Life Hacks for Sofware Engineers.</p>
<p>My co-worker, Abdullahi, encouraged me to write this post. Since I&rsquo;m on Thanskgiving vacation, I thought why not? Plus, writting this post proves him correct; I&rsquo;m <em>very</em> productive.</p>
<p>I generally don&rsquo;t think of myself as very productive. I was diagnosed with ADHD, like my father, and I&rsquo;ve always tried to take on too many projects, jobs and challenges at once.</p>
<p>I work 2 jobs, sometimes 3, I am a father of twin girls that are in school plus I make time to work on NatesCode blog posts, videos, exercise and be a son, boyfriend and play DnD. How do I find time?</p>
<p>A part of the answer is that not what I <strong>DO</strong> have time for but which activities I don&rsquo;t do that most others do. I don&rsquo;t watch T.V., I&rsquo;ve never owned cable and Cobra Kai is the only TV I&rsquo;ve finished in the last decade. I don&rsquo;t
go out with friends as much as others might.</p>
<p>Here is my schedule for example:</p>
<h2 id="natescodes-schedule">NatesCode's Schedule</h2>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Time (24h)</th>
<th>Activity</th>
</tr>
</thead>
<tbody>
<tr>
<td>30m</td>
<td>06:00</td>
<td>Wake, Quick exercise, self prep</td>
</tr>
<tr>
<td>15m</td>
<td>06:30</td>
<td>Prep kids for school</td>
</tr>
<tr>
<td>45m</td>
<td>06:45</td>
<td>Drive kids to school</td>
</tr>
<tr>
<td>6h</td>
<td>07:30</td>
<td>Start work from home</td>
</tr>
<tr>
<td>1h</td>
<td>13:30</td>
<td>Drive pickup kids from school</td>
</tr>
<tr>
<td>2h</td>
<td>14:30</td>
<td>Back to work</td>
</tr>
<tr>
<td>30m</td>
<td>16:30</td>
<td>Finish work. Start family time</td>
</tr>
<tr>
<td>30m</td>
<td>17:00</td>
<td>Dinner</td>
</tr>
</tbody>
</table>
<h2 id="monday-wednesday-thursday">Monday, Wednesday, Thursday</h2>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Time (24h)</th>
<th>Activity</th>
</tr>
</thead>
<tbody>
<tr>
<td>2h 15m</td>
<td>17:45</td>
<td>Teach coding bootcamp online</td>
</tr>
<tr>
<td>15m</td>
<td>20:00</td>
<td>Read kids story and tuck them into bed</td>
</tr>
<tr>
<td>1h 30m</td>
<td>21:30</td>
<td>finish teaching</td>
</tr>
<tr>
<td>30m</td>
<td>22:00</td>
<td>Prep for bed</td>
</tr>
<tr>
<td>7h 30m</td>
<td>22:30</td>
<td>Sleep</td>
</tr>
</tbody>
</table>
<h2 id="tuesday-friday">Tuesday, Friday</h2>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Time (24h)</th>
<th>Activity</th>
</tr>
</thead>
<tbody>
<tr>
<td>15m</td>
<td>20:00</td>
<td>Tuck kids in bed</td>
</tr>
<tr>
<td>2h 15m</td>
<td>20:15</td>
<td>NatesCode projects</td>
</tr>
<tr>
<td>7h 30m</td>
<td>22:30</td>
<td>Sleep</td>
</tr>
</tbody>
</table>
<h2 id="weekends">Weekends</h2>
<p>I have my kids every other week so I&rsquo;m free every other weekend. I play DnD 1-2 weekends per month, kids play with the other kids of DnD parents.
I spend time with family, girlfriend and work on Natescode stuff in the evenings on free weekends and week days.</p>
<h2 id="faqs">FAQS</h2>
<h3 id="only-15-minutes-to-prep-kids-for-school">Only 15 minutes to prep kids for school?</h3>
<p>Yes, I lay out their outfits the night before. They have their own alarm clocks to wake up. They know how to
brush their teeth and get dressed themselves. I also already have their backpacks ready by the door.</p>
<h3 id="7-12-hours-of-sleep">7 1/2 hours of sleep?</h3>
<p>Yes, that is enough for me. I <strong>RARELY</strong> get less than 7.5 - 8 hours of sleep. Sleep is critical to being able to be productive.</p>
<h3 id="what-else">What else?</h3>
<p>Lists, Make a list for the day, week and month. I have lists with priorities at work. Prioritizing is SO importanty. You can do <strong>ANYTHING</strong> with your time but <em>not</em> <strong>EVERYTHING</strong>.</p>
<h3 id="how-can-i-be-productive-now-">How can I be productive NOW ?</h3>
<p>You can&rsquo;t, think long term. You have to make small, sustainable changes. I gave up alcohol this year (2024), that was a sustainable change. My next change will be making time for working out. I&rsquo;ll start with 15 minutes in the morning: jump rope, squats, leg lifts, push ups.</p>
<h3 id="where-to-find-time">Where to find time?</h3>
<p>WEEKENDS. I do NOT work, or make any big commitments on weekends. My weekends are sacred.</p>
]]></content>
        </item>
        
        <item>
            <title>Pair Programming</title>
            <link>//localhost:1313/posts/pair-programming/</link>
            <pubDate>Sat, 19 Oct 2024 21:22:59 -0500</pubDate>
            
            <guid>//localhost:1313/posts/pair-programming/</guid>
            <description>Pair Programming is a part of of XP programming which seemed to be pushed mostly in the early 2000&amp;rsquo;s. I have heard that it can work, of course it sounds like a huge waste of time most of the time.
Pair Programming Defined I think we need to define it. Some XP evangelists say that one person coding and another watching is NOT pair programming. Ok, then what it?
There are tools for IDEs / editors for developers to code on the same code at the same time.</description>
            <content type="html"><![CDATA[<p>Pair Programming is a part of of XP programming which seemed to be pushed mostly in the early 2000&rsquo;s. I have
heard that it can work, of course it sounds like a huge waste of time most of the time.</p>
<h2 id="pair-programming-defined">Pair Programming Defined</h2>
<p>I think we need to define it. Some XP evangelists say that one person coding and another watching is <em>NOT</em> pair programming. Ok, then what it?</p>
<p>There are tools for IDEs / editors for developers to code on the same code at the same time. I don&rsquo;t really see the benefit of this if they&rsquo;re working on different parts of the code,
what is the point of being on a call? Really no different than having separate branches and discussing it later.</p>
<p>The few times that I have pair programmed, they were VERY valuable. There was a huge refactor that I had to do and it was a large task for one developer BUT it wasn&rsquo;t something that could easily be divided into branches since the code wouldn&rsquo;t even compile until it was done. This is where I shared my editor with my co-worker. Him and I began coding on the same branch / PC at the same time. There were some weird hiccups with how he saw the remaining compilation errors but over all it went much faster than branching.</p>
<h2 id="no-prs">No PRs</h2>
<p>This is the argument but I rarely spend more than 15 minutes looking at a PR. So saying that two developers spending 8 hours on a task to save 1 developer 15 minutes isn&rsquo;t a really good sales point.</p>
<h2 id="9-women-1-month">9 Women, 1 Month</h2>
<p>&ldquo;If it takes a woman 9 months to have a baby, then 9 women can make one baby in 1 month!&rdquo; is a common way to explain to management that more developers does NOT magically
equal faster delivery.</p>
]]></content>
        </item>
        
        <item>
            <title>Wordle Interview Challenge</title>
            <link>//localhost:1313/posts/wordle-interview-challenge/</link>
            <pubDate>Fri, 04 Oct 2024 21:54:34 -0500</pubDate>
            
            <guid>//localhost:1313/posts/wordle-interview-challenge/</guid>
            <description>I like Wordle, currently I have a 117 day streak on hard mode.
Here is what I think is a really good interview question concerning Wordle.</description>
            <content type="html"><![CDATA[<p>I like Wordle, currently I have a 117 day streak on hard mode.</p>
<p>Here is what I think is a really good interview question concerning Wordle.</p>
]]></content>
        </item>
        
        <item>
            <title>More TDD Less PRs</title>
            <link>//localhost:1313/posts/more-tests-less-pull-requests/</link>
            <pubDate>Sat, 13 Jul 2024 07:37:52 -0500</pubDate>
            
            <guid>//localhost:1313/posts/more-tests-less-pull-requests/</guid>
            <description>I wanted a fancy title that wasn&amp;rsquo;t clickbaity. I&amp;rsquo;ve been experimenting with a coding approach at work that I want to share. At work, like any good company we write tests for our code. Not always first, but at least we generally have quality tests. The IT Director has pushed hard for code coverage which I strongly disagree with. One engineer spend 2 full days writing tests in order to commit 17 lines of code because the code coverage percentage fell, oh no we ONLY had 95% code coverage.</description>
            <content type="html"><![CDATA[<p>I wanted a fancy title that wasn&rsquo;t clickbaity. I&rsquo;ve been experimenting with a coding approach at work that I want to share. At work, like any good company we write
tests for our code. Not always first, but at least we generally have quality tests. The IT Director has pushed hard for code coverage which I strongly disagree with. One engineer spend 2 full days writing tests in order to commit 17 lines of code because the code coverage percentage fell, oh no we ONLY had 95% code coverage. Anyways, here is my approach to use TDD to make PRs more efficient or almost redundant.</p>
<p>I first tested this with a senior developer on my team. I then tested this with my software students as well. I&rsquo;d love to try this with an actual junior developer.</p>
<h2 id="the-natescode-tdd-process">The NatesCode TDD process</h2>
<ol>
<li>Senior / Lead developer writes the tests first. Then pushes those tests to a feature branch</li>
<li>The more junior Developer then checks out that feature branch and makes those tests pass</li>
</ol>
<p>I really like this approach for a few reasons</p>
<ol>
<li>The Lead developer touches and understands every single feature the team develops</li>
<li>Junior engineers have immediate feedback on their progress. This helps with confidence and reduces the need to ask questions. This also
makes progress reporting in JIRA or an Scrum Daily Standups easier, &ldquo;I have 3 of 10 tests passing so requirements A, B, C are met.&rdquo;</li>
<li>Implicit communication. The lead developer is communicating through the tests HOW the feature should work. Especially for junior developers, they might not know <em>how</em> to design the <em>API</em> for a feature.</li>
<li>Tests are written as part of the process. Some developers hate writing tests, myself included. At least then there is a dedicated dev to write tests. As a dev lead, it is my responsibility that we have well tested and well architected and well documented code anyways.</li>
<li>Tests can be written ahead of development. This can give the dev lead some flexibility since I spend about 50% of my time doing dev lead tasks that get in the way of coding. Many times, this has meant I couldn&rsquo;t finish a user story. Testing is usually a much smaller part of a User Story than implementing the actual user story. So if a User Story is 8 points, Only 1-2 points of that is writing the tests. This means I can get in done more quickly and move onto Dev Lead tasks instead of my stories either rolling over to a new sprint or being passed to one of my developers.</li>
</ol>
<p>I personally define seniority like this:</p>
<ol>
<li>Juniors create functions</li>
<li>Mids create classes / modules / namespaces</li>
<li>Seniors create projects</li>
<li>Principle / Staff / Architects creates Products</li>
<li>Manager creates Teams</li>
</ol>
<h3 id="negatives">Negatives?</h3>
<p>No, there are no negatives. It is a panacea&hellip; Just kidding! I can see many issues with this approach.</p>
<ol>
<li>not all dev work is testable. But maybe the Dev Lead should do that anyways.</li>
<li>All developers should know how to write tests</li>
<li>Pull Requests are still required</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Optimize Code by Doing Less</title>
            <link>//localhost:1313/posts/null-is-innocent/</link>
            <pubDate>Sat, 13 Jul 2024 01:55:29 -0500</pubDate>
            
            <guid>//localhost:1313/posts/null-is-innocent/</guid>
            <description>Null is innocent, blame the type system! So for a long time I was confused about null. I kept hearing null is bad but then seeing the answer being Optional&amp;lt;T&amp;gt; and Some x or None. I was like okay so null is bad but None is okay? Couldn&amp;rsquo;t we just call None null ?
The answer is that null isn&amp;rsquo;t the problem, the type system is! Here is an example in C#.</description>
            <content type="html"><![CDATA[<h1 id="null-is-innocent-blame-the-type-system">Null is innocent, blame the type system!</h1>
<p>So for a long time I was confused about <code>null</code>. I kept hearing <code>null is bad</code> but then seeing the answer being <code>Optional&lt;T&gt;</code> and <code>Some x</code> or <code>None</code>. I was like okay so <code>null</code> is bad but <code>None</code> is okay? Couldn&rsquo;t we just call <code>None</code> <code>null</code> ?</p>
<p>The answer is that <code>null</code> isn&rsquo;t the problem, the type system is! Here is an example in C#.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> foo = <span style="color:#ae81ff">33</span>;
</span></span><span style="display:flex;"><span>    foo = <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(foo.ToString()); <span style="color:#75715e">// BOOM !</span>
</span></span></code></pre></div><p>If we were writing this in C# some years ago, <code>int</code> could actually be null! <code>int</code> is a type or a group of valid numerical values. Nowhere in that type does <code>null</code> appear. It is implicitly added! That is the problem all along. Finally C# has fixed this. These days that code wouldn&rsquo;t compile because int is not nullable. If we made it nullable then <code>.ToString()</code> would complain because it only works with non-nullable types. So we&rsquo;d have to check for null first.</p>
<p>No one seemed to explain this well online, at least not that I could find nearly a decade ago.</p>
]]></content>
        </item>
        
        <item>
            <title>Optimize Code by Doing Less</title>
            <link>//localhost:1313/posts/optimize-code-by-doing-less/</link>
            <pubDate>Sat, 13 Jul 2024 01:29:33 -0500</pubDate>
            
            <guid>//localhost:1313/posts/optimize-code-by-doing-less/</guid>
            <description>Anytime code needs to be optimized for performance, be that performance in time or memory usage, we can simply say &amp;ldquo;well just do less&amp;rdquo;. I always think &amp;ldquo;do less&amp;rdquo; when I&amp;rsquo;m optimizing code. Here are my thoughts of what exactly &amp;ldquo;do less&amp;rdquo; means by answering &amp;ldquo;Do less of what?&amp;rdquo;.
&amp;ldquo;Do less of what?&amp;rdquo; &amp;ndash; ME at 01:00 AM
Do Less: Less Algorithmic Complexity The most intuitive change is to create an algorithm that performance fewer steps.</description>
            <content type="html"><![CDATA[<p>Anytime code needs to be optimized for performance, be that performance in time or memory usage, we
can simply say &ldquo;well just do less&rdquo;. I always think &ldquo;do less&rdquo; when I&rsquo;m optimizing code. Here are my
thoughts of what exactly &ldquo;do less&rdquo; means by answering &ldquo;Do less of what?&rdquo;.</p>
<blockquote>
<p>&ldquo;Do less of what?&rdquo; &ndash; ME at 01:00 AM</p>
</blockquote>
<h2 id="do-less-less-algorithmic-complexity">Do Less: Less Algorithmic Complexity</h2>
<p>The most intuitive change is to create an algorithm that performance fewer steps.</p>
<p>Take writing a function <code>fib</code> to calculate the nth fibonnaci number. The iterative fibonacci function has O(n) time complexity while the naive recursive one has O(2^n).</p>
<p>So we can improve our recursive <code>fib</code> function by changing to an iterative algorithm that quite literally does less (fewer steps).</p>
<h2 id="do-less-less-fetching--cache-missing">Do less: Less Fetching / Cache missing</h2>
<p>Cache missies refer to the CPU / GPU cache. This has a cost. When our program needs a value, making sure we are reusing important values often means they can be cached and they can be access extremely quickly (singe digit clock cycles).</p>
<h2 id="do-less-less-computation-clock-cycles">Do Less: Less Computation (Clock Cycles)</h2>
<p>We can make recursive fibonacci just as fast (algorithmically) by using memoization (a cache). So we aren&rsquo;t algorithmically doing fewer steps at all, we&rsquo;re just caching the results of those steps.</p>
<p>We could do more algorithmic steps BUT if it is fast for the computer, it may actually be faster. For example, working with powers of 2 can be really fast because the computer can just bit shift. Even though in an abstract sense working with powers of N are all the same.</p>
<p>This is where we think about how the processor actually works. Maybe there is a CPU specific instruction that is faster (this will tie into &rsquo;less generalization&rsquo; later as well). SIMD instructions come to mind where multiple operations can be done quickly.</p>
<h2 id="do-less-less-precisison">Do Less: Less Precisison</h2>
<p>For many applications, like graphics, physics etc. We do not need exact nor extremely precise results. We just need a good approximation. This approach has been used by using lookup tables for common expensive math functions or using unsafe math (a * b != b * a).</p>
<h2 id="do-less-less-eagerness">Do Less: Less Eagerness</h2>
<p>Basically, &ldquo;Lazy Loading&rdquo;. We can do less by NOT doing anything until unless the code absolutely hos to. If a UI shows a bunch of tabs that will show different tables of data, we can wait to load that data until those tabs are used.</p>
<h2 id="do-less-less-generalization">Do Less: Less Generalization</h2>
<p>This one may be a stretch of the definition of &ldquo;less&rdquo; but bear with me. Often, I see engineers obtain significant performance improvements of really optimized code because the code is a library that is optimized for a generalized problem, <em>not their specific problem&rsquo;s parameters</em>.</p>
<h2 id="do-less-less-memorization">Do Less: Less Memorization</h2>
<p>If we are optimizing for memory consumption then we want to keep track of fewer things. Maybe we can just work with index values instead of the full objects themselves (Sebastion Lague did just this with his ray tracing code).</p>
<h2 id="do-less-less-dependencies">Do Less: Less Dependencies</h2>
<p>This requires some nuance. Dependencies, like build vs buy, can be great. Reusing existing optimized, documented and supported code makes a ton of sense. Unfortunately, dependecies break compatibility / semver, they become deprecated and too often in open-source software, because stale / undeveloped / abandoned.</p>
<h2 id="do-less-less-dry--architecture--optimization">Do Less: Less DRY / Architecture / Optimization</h2>
<p>Often, we can try too hard to reuse code or architect things well when requirements change so often that we don&rsquo;t know what we are optimizing for. Making code DRY is difficult because that requires abstractions that may not actually fit in 6 months.</p>
<h2 id="do-less-less-custom-buy-vs-build">Do Less: Less Custom (Buy vs Build)</h2>
<p>Often, doing less in software comes down to business decision. At my current employer, several years ago management decided to purchase the software all the other companise simply rent. That is an old horrible coded version of the software that we are slowly modernizing. Meanwhile it is a non-issue / concern for our competitors because they&rsquo;re still relying on that vendor which has made numerous improvement to the product. Everyone else is renting the iPhone 15 Pro Max while we&rsquo;ve purchased the right to build off of the IPhone 6.</p>
<h2 id="do-less-less-testing--verification--typing--fixing">Do Less: Less Testing / Verification / Typing / Fixing</h2>
<p>Make the compiler, tooling etc do it for you. Aka automation! I.E <code>Crablang</code> and the like use a borrower checker to guarentee memory safety. The program spends less time worrying about memory safety or time fixing critical bugs caused by memory safety.</p>
<h2 id="do-less-less-optimized">Do Less: Less Optimized</h2>
<h3 id="developers-and-business">Developers and Business</h3>
<p>What? This seems counter intuitive. Well, sometimes code is optimized for the business and not for the machine. I could get 200% better performance, or more, out of one of our batch processes but guess what? It would provide exactly zero business value. So the code is LESS optimal for the computer but more optimal for the business because it isn&rsquo;t being changed and I the developer can then spend my time optimizing the things that DO matter.</p>
<h3 id="optimizing-compilers">Optimizing Compilers</h3>
<p>I could also take this in a completely different direction and talk about de-optimizing code in order to enable other better and deeper optimizations but I have exactly 0 understanding or experience with that. All I know is that does, probably, occur in compiler optimization steps.</p>
]]></content>
        </item>
        
        <item>
            <title>Dry Brittle Code</title>
            <link>//localhost:1313/posts/dry-brittle-code/</link>
            <pubDate>Fri, 28 Jun 2024 10:24:34 -0600</pubDate>
            
            <guid>//localhost:1313/posts/dry-brittle-code/</guid>
            <description>Software Engineer students will hear &amp;ldquo;DRY&amp;rdquo; or Don&amp;rsquo;t Repeat Yourself numerous times as they are learning to design, build and test software. Even professionals will argue over removing duplicate code. Unfortunately, making code DRY isn&amp;rsquo;t as cut-and-dry (pun intended).
Here is a really simple example of DRY and brittle code. Say we have some CSS like below.
```css .service-card { font-family: monospace; background-color: #18B218; width: 320px; height: 200px; } .product-card{ font-family: monospace; background-color: #18B218; width: 320px; height: 200px; } ``` Just because there are duplicate values does not mean there are duplicate semantics.</description>
            <content type="html"><![CDATA[<p>Software Engineer students will hear &ldquo;DRY&rdquo; or Don&rsquo;t Repeat Yourself numerous times as they are learning to design, build and test software. Even professionals will argue over
removing duplicate code. Unfortunately, making code DRY isn&rsquo;t as cut-and-dry (pun intended).</p>
<p>Here is a <em>really</em> simple example of DRY and brittle code. Say we have some CSS like below.</p>
<pre><code>```css
    .service-card {
        font-family: monospace;
        background-color: #18B218;
        width: 320px;
        height: 200px;
    }
    .product-card{
        font-family: monospace;
        background-color: #18B218;
        width: 320px;
        height: 200px;
    }

```
</code></pre>
<p>Just because there are duplicate values does not mean there are duplicate <em>semantics</em>. My hat and shirt could both be red but that doesn&rsquo;t mean I should make a <code>--clothes-color: red;</code> custom prop. Because then both the hat and shirt are coupled together! Changing that variablbe would change both! OOPS! Code reuse creates dependencies! It also requires testing. Tests aren&rsquo;t all that valuable if you code is WET because changing code in one place won&rsquo;t break code in another.</p>
<h2 id="from-sea-to-land">From Sea to Land</h2>
<p>Just like evolution of creatures starting in the ocean and then moving to land, so should your code go from WET to DRY.</p>
<blockquote>
<p>&ldquo;Duplication is cheaper than the wrong abstraction&rdquo;</p>
</blockquote>
<p>This is so true. Checkout <a href="https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction">the blog post about that</a></p>
<h2 id="dry-and-brittle">DRY and Brittle</h2>
<p>Unskilled developers will make their code dry by also making the code tighly coupled. This means that changing code for module A will break module B! Always lean on the architects.</p>
<h2 id="work-example">Work Example</h2>
<p>At my current employer, we are in the process of modernizing our architecture. We are moving from a single monolithic application to many small applications. I say applications and not &ldquo;micro services&rdquo; because that buzzword is about as well defined as &lsquo;agile&rsquo; these days. We basically have what appears to be one large website but each part is actually a completely different full-stack application: frontend, API and database.</p>
<p>This approach DOES mean there will be code / logic duplication, in some cases a LOT of duplication since many applications will need to read and write much of the same data. This initially sounds like a bad approach but I&rsquo;m coming around to liking it for a few reasons.</p>
<ol>
<li>The company is immature with this new architecture and cross team communication.</li>
<li>Isolates any bugs. If I break the AR application, that won&rsquo;t affect the other applications as well.</li>
<li>This a completely new architecture and that makes it an art (heuritics apply). We won&rsquo;t know the correct abstractions or patterns that emerge until we use it.</li>
<li></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>What to Know Before Coding Bootcamp</title>
            <link>//localhost:1313/posts/what-to-know-before-coding-bootcamp/</link>
            <pubDate>Fri, 21 Jun 2024 15:11:13 -0500</pubDate>
            
            <guid>//localhost:1313/posts/what-to-know-before-coding-bootcamp/</guid>
            <description>I am a lead software engineer by day and a coding bootcamp instructor by night. Here are some prerequisites skills to know before attending a coding bootcamp.
Basic Computer Skills I see many students that don&amp;rsquo;t know what a ZIP file is or how to unzip it.
Basic computer shortcuts like copy (CTRL + C) and paste (CTRL + V).
Understanding how you files are structured i.e. you user folder aka home is C:/users/your_name on Windows.</description>
            <content type="html"><![CDATA[<p>I am a lead software engineer by day and a coding bootcamp instructor by night. Here are some prerequisites skills to know
before attending a coding bootcamp.</p>
<h2 id="basic-computer-skills">Basic Computer Skills</h2>
<p>I see many students that don&rsquo;t know what a ZIP file is or how to unzip it.</p>
<p>Basic computer shortcuts like copy (CTRL + C) and paste (CTRL + V).</p>
<p>Understanding how you files are structured i.e. you user folder aka home is <code>C:/users/your_name</code> on Windows.</p>
<h2 id="vs-code-doesnt-import-files">VS Code doesn&rsquo;t import files</h2>
<p>Many students ask how to get file INTO VS Code. VS Code just views the files already there, no different than file explorer. This is also the same as the terminal which just uses text instead of pretty graphics.</p>
<h2 id="touch-typing">Touch Typing</h2>
<p>You don&rsquo;t need to type 100 wpm but you should be able to touch type, type with all 10 fingers using the homerow keys without looking. You should be able to type at least 30 WPM with 98% accuracy as a bare minimum but 60 WPM is a good goal. Being a really slow and inaccurate typist will greatly slow you down. Software Engineers write code but we mostly write slack messages, Google queries, notes, documentation and of course code as well. Going from 30 WPM to 60 WPM could easily save an hour of work per day.</p>
]]></content>
        </item>
        
        <item>
            <title>Separation of Concerns Not Code</title>
            <link>//localhost:1313/posts/separation-of-concerns-not-code/</link>
            <pubDate>Thu, 30 May 2024 10:46:44 -0500</pubDate>
            
            <guid>//localhost:1313/posts/separation-of-concerns-not-code/</guid>
            <description>I was going to name this post &amp;ldquo;Concerns vs Responsibilities&amp;rdquo; which I&amp;rsquo;ll be covering here anyways.
S.O.L.I.D starts with S for &amp;ldquo;Single-Responibliity Principle&amp;rdquo;, making sure code: function, object etc. do one thing well. We also have the concept of &amp;ldquo;Separation of Concerns&amp;rdquo;. I think Responsilibities and Concerns get conflated and the definitions get confused. The follow is completely my opinion based on my experience and not anything canon or &amp;ldquo;official&amp;rdquo;.</description>
            <content type="html"><![CDATA[<p>I was going to name this post &ldquo;Concerns vs Responsibilities&rdquo; which I&rsquo;ll be covering here anyways.</p>
<p>S.O.L.I.D starts with S for &ldquo;Single-Responibliity Principle&rdquo;, making sure code: function, object etc. do one thing well. We also have the concept of &ldquo;Separation of Concerns&rdquo;. I think <em>Responsilibities</em> and <em>Concerns</em> get conflated and the definitions get confused. The follow is completely my opinion based on my experience and not anything canon or &ldquo;official&rdquo;.</p>
<h2 id="mvc">MVC</h2>
<p>Let&rsquo;s take the MVC pattern for example. We have <em>Models</em> , <em>Views</em> and <em>Controllers</em>. I won&rsquo;t go into detail, the reader can look up MVC online. We break up code into those three <em>RESPONSIBILITIES</em>. In my opinion, a responsibility is on the INDIVIDUAL and it is UNIQUE. The Model does it&rsquo;s job of holding the data and validation while the View renders that data, they don&rsquo;t do the other&rsquo;s job. Now most MVC apps have USERS so let&rsquo;s say we have a <code>UserController</code>, <code>UserModel</code> and <code>UserView</code>.</p>
<p>You&rsquo;ll notice something. The word <code>User</code> is reused. <code>User</code> is our <em>CONCERN</em>, it is our problem we are trying to solve. The model, view and controller as specific responsibilites of the code to address that concern. Just like how at a Inn-n-out there is a cashier that takes the order and the money, someone else makes the fries, and a third person grills the burgers. They each have their own <code>responsibility</code> but they are all addressing the same <code>concern</code>; the customer&rsquo;s order.</p>
<h2 id="jsx-components-etc">JSX, Components etc.</h2>
<p>The previous definitions help when developers inevitable tell me that technologies like JSX are evil because they MIX logic and markup; they&rsquo;re evel but not for tha reason. HTML, CSS and JS are designed to solve different problems and shouldn&rsquo;t be mixed because. . . SEPARATION OF CONCERNS. But the COMPONENT IS our concern! Just like Models, Views and Controllers. Separation of Concerns, NOT CODE.</p>
<p>Why could I have my HTML, CSS and JavaScript separated? That is like having your bun, cheese, burger and lettuce all on separate plates!</p>
<blockquote>
<p>&ldquo;Separation of Concerns, not code.&rdquo; - Nathan Hedglin</p>
</blockquote>
<h2 id="conclusion">Conclusion</h2>
<p>So we deconflated the terms &ldquo;concern&rdquo; and &ldquo;responsibility&rdquo; in software and learned that mixing different DSLs is NOT inherently bad. Mixing too much logic with markup for example, may be a sign that the code IS starting to mix Concerns, not just responsibilities.</p>
]]></content>
        </item>
        
        <item>
            <title>Practical Principles of Programming Paradigms</title>
            <link>//localhost:1313/posts/programming-paradigms/</link>
            <pubDate>Mon, 13 May 2024 23:45:53 -0500</pubDate>
            
            <guid>//localhost:1313/posts/programming-paradigms/</guid>
            <description>Ultimately, all software paradigms are made of serveral different applications of code augmentation strategies.
I wasn&amp;rsquo;t sure what to call this post. I was thinking about how to categorize the different ways software developers add new code to existing code, augmentation. These tie in closely with software paradigms but they are not paradigms in and of themselves.
I will go over three methods of code augmentation.
Encapsulation (Composition) High Order Functions (or components) Decorators (Decorator pattern and language features aka attributes) Dependency Injection Middleware / hooks / frameworks Encapsulation is all about wrapping existing code with new code.</description>
            <content type="html"><![CDATA[<p>Ultimately, all software paradigms are made of serveral different applications of <code>code augmentation strategies</code>.</p>
<p>I wasn&rsquo;t sure what to call this post. I was thinking about how to categorize the different ways software developers add new code to existing code, augmentation. These tie in closely
with software paradigms but they are not paradigms in and of themselves.</p>
<p>I will go over three methods of code augmentation.</p>
<h2 id="encapsulation-composition">Encapsulation (Composition)</h2>
<ul>
<li>High Order Functions (or components)</li>
<li>Decorators (Decorator pattern and language features aka attributes)</li>
<li>Dependency Injection</li>
<li>Middleware / hooks / frameworks</li>
</ul>
<p>Encapsulation is all about <em>wrapping</em> existing code with new code. This is the prefered approach of functional languages.</p>
<h2 id="extensions-oop">Extensions (OOP)</h2>
<ul>
<li>Inheritance: classical and prototypal</li>
<li>Mixins</li>
</ul>
<!-- raw HTML omitted -->
<p>These techniques fit well within an OOP mindset. We start with some base functionality then extend it to work for our specific use case.</p>
<h3 id="inheritance-oop">Inheritance (OOP)</h3>
<p>Inheritance takes existing code and extends it. Classical inheritance extends the class or template used to instantiate and object and set it&rsquo;s
initial state. While prototypal inheritance literally points to an existing object to base itself off of.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="transformation">Transformation</h2>
<p>Basically find-and-replacing code, or data-structures that represent code.</p>
<ul>
<li>Macro Expansion</li>
<li>Preprocessor Directives</li>
<li>PTS (Program Transformation System)</li>
<li>Templating</li>
<li>Code Generation (Zig comptime)</li>
<li>DSL</li>
<li>Regex (Parser Generator)</li>
<li>AST manipulation</li>
</ul>
<h3 id="macros">Macros</h3>
<p>I would be remise if I didn&rsquo;t mention <code>LISP</code> here. LISP macros are very powerful and can expand to create virtually any modern language feature. This quickly becomes
a DSL.</p>
<h3 id="preprocessor-directives">Preprocessor Directives</h3>
<p>C++ templates come to mind. These are more of a compile-type static technique.</p>
<h3 id="program-transformation-system">Program Transformation System</h3>
<p>Another one which literally fancy refactoring with essentially regex or AST manipulation called a <a href="https://en.wikipedia.org/wiki/Program_transformation">Program Transformation System</a>.</p>
<p>There are PTS tools that can automatically refactor code and create pull-requests in the appropriate repos.</p>
]]></content>
        </item>
        
        <item>
            <title>Dev Lead Day in the Life</title>
            <link>//localhost:1313/posts/dev-lead-day-in-the-life/</link>
            <pubDate>Sat, 04 May 2024 18:08:26 -0700</pubDate>
            
            <guid>//localhost:1313/posts/dev-lead-day-in-the-life/</guid>
            <description>Software</description>
            <content type="html"><![CDATA[<p>Software</p>
]]></content>
        </item>
        
        <item>
            <title>Economics of Software</title>
            <link>//localhost:1313/posts/economics-of-software/</link>
            <pubDate>Sat, 04 May 2024 14:28:34 -0700</pubDate>
            
            <guid>//localhost:1313/posts/economics-of-software/</guid>
            <description>Software development only exists because software can provide value to businesses and customers. I think many software developers, especially juniors and aspirining developers forget this. Yes, DSA have value and architecture has value. But at the end of the day if you aren&amp;rsquo;t shipping code that provideds business value, your fancy purely functional, well architectued code doesn&amp;rsquo;t matter.
YouTubers make it sound like all software engineers do is Leetcode in their interviews and solving complex problems by thinking all day.</description>
            <content type="html"><![CDATA[<p>Software development only exists because software <em>can</em> provide value to businesses and customers. I think many software developers, especially juniors and aspirining developers forget this. Yes, DSA have value and architecture has value. But at the end of the day if you aren&rsquo;t shipping code that provideds business value, your fancy purely functional, well architectued code doesn&rsquo;t matter.</p>
<p>YouTubers make it sound like all software engineers do is Leetcode in their interviews and solving complex problems by thinking all day. I&rsquo;ve NEVER done a Leetcode interview for any job I&rsquo;ve had.</p>
<h2 id="consulting--contracting">Consulting / Contracting</h2>
<p>I&rsquo;ve done a fair amount of contracting. The value here is that a company is able to only pay for the software development that they need, when they need it.</p>
<h2 id="internal-software">Internal software</h2>
<h2 id="risk-mitigation--compliance">Risk Mitigation / Compliance</h2>
<p>Not all software produces revenue. Some of it is required to prevent loss of money, loss of customers or to comply with government regulations.</p>
<h3 id="security">Security</h3>
<h3 id="privacy">Privacy</h3>
<h3 id="compliance">Compliance</h3>
<p>Companies have to comply with government regulations. Regulations apply to where they do business. Here is an imcomplete list of common laws companies have to comply with.</p>
<ul>
<li>ADA</li>
<li>Privacy: GDPR, CCPA &hellip;</li>
<li>HIPAA</li>
</ul>
<p>I work for an agricultural insurance company. We are required to send data to RMA (an agency under the USDA). ADA compliance to make websites and mobile applications accessible to the blind and others is also common. I remember a client I had was being sued for not having an ADA compliant website so we had to make changes for them.</p>
<h3 id="client-retention">Client Retention</h3>
<p>Some features prevent users from leaving a platform. Performance is often such a feature. If the product is unusable then no one will wait 5 minutes for a screen to load. Performance can limit a companies market cap as well.</p>
<h2 id="startups">Startups</h2>
<p>Software startups are interesting. Their value is mostly about their customer base. Even small applications like Worlde, which end up being sold for large amounts of money are mostly valuable due to their name and user base. I mean I could implement Wordle clone in a weekend but it was the first and recognized name.</p>
<p>Startups focus on speed to market to attract investors.</p>
]]></content>
        </item>
        
        <item>
            <title>Pillars of Software Engineering</title>
            <link>//localhost:1313/posts/pillars-of-software-engineering/</link>
            <pubDate>Sun, 28 Apr 2024 10:59:55 -0500</pubDate>
            
            <guid>//localhost:1313/posts/pillars-of-software-engineering/</guid>
            <description>Interfaces, Protocols, Specifications and Standards There are four pillars of SWE abstractions: Interfaces, Protocols, Specifications and Standards. These four pillars encompass all of software. Everything becomes clearer, once these terms and concepts are deeply understood.
Interfaces &amp;ldquo;The point of communication between two systems&amp;rdquo;
A traffic light is an interface. It is the point of communication between the driver and the intersection
The traffic light has a very simple interface. Let&amp;rsquo;s define it in code.</description>
            <content type="html"><![CDATA[<h2 id="interfaces-protocols-specifications-and-standards">Interfaces, Protocols, Specifications and Standards</h2>
<p>There are four pillars of SWE abstractions: Interfaces, Protocols, Specifications and Standards. These four pillars encompass all of software. Everything becomes clearer, once these terms and concepts are deeply understood.</p>
<h2 id="interfaces">Interfaces</h2>
<blockquote>
<p>&ldquo;The point of communication between two systems&rdquo;</p>
</blockquote>
<p><strong>A traffic light is an interface. It is the point of communication between the driver and the intersection</strong></p>
<p>The traffic light has a very simple interface. Let&rsquo;s define it in code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#66d9ef">enum</span> <span style="color:#a6e22e">TrafficLightColor</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">GREEN</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">YELLOW</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">RED</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MainAndFourthTrafficLight</span> <span style="color:#66d9ef">implements</span> <span style="color:#a6e22e">trafficLight</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">constructor</span>(){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">currentStreetColor</span>:<span style="color:#66d9ef">TrafficLightColor</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">TrafficLightColor</span>.<span style="color:#a6e22e">RED</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">crossStreetColor</span>:<span style="color:#66d9ef">TrafficLightColor</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">TrafficLightColor</span>.<span style="color:#a6e22e">RED</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">currentStreet</span>()<span style="color:#f92672">:</span><span style="color:#a6e22e">TrafficLightColor</span> {
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">crossStreet</span>()<span style="color:#f92672">:</span><span style="color:#a6e22e">TrafficLightColor</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">trafficLight</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">currentLight</span>()<span style="color:#f92672">:</span><span style="color:#a6e22e">TrafficLightColor</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>That&rsquo;s it. The two &ldquo;Systems&rdquo; could be a human and a door. The interface could be the doorknob. Most doorknobs have the same interface as they rotate to open the door. Have you ever looked inside a doorknob? Do you know how it works? It could be little gnomes, magic, gears etc. It really doesn&rsquo;t matter when you use it. Same with a vehicle. As long as it has a steering wheel, pedals and a shifter, I could drive it.</p>
<p>There was a landmark case between Oracle and Google over Google using both the Java <code>interface</code> keyword &ldquo;code&rdquo; that defined the interface(s) of Android. Thankfully, Google won. Otherwise, a company could own an interface instead of a concrete implementation. Imagine a company owning the wheel, not a specific style wheel for a specific use but the general idea of a circular apparatus for steering a vehicle.</p>
<h2 id="protocols">Protocols</h2>
<blockquote>
<p>&ldquo;A set of rules for communication over an interface&rdquo;</p>
</blockquote>
<blockquote>
<p>&ldquo;established rules that specify how to format, send and receive data&rdquo;</p>
</blockquote>
<p><strong>A traffic light&rsquo;s protocol is the rules around the colors. RED indicates drivers must STOP, GREEN indicates drivers must GO and YELLOW indicates that drivers must either CONTINUE or STOP.</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#66d9ef">switch</span>(<span style="color:#a6e22e">light</span>.<span style="color:#a6e22e">color</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">TrafficLightColor.Green</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">car.go</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">TrafficLightColor.Red</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">car.stop</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">TrafficLightColor.Yellow</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">car</span>.<span style="color:#a6e22e">isIntersection</span>){
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">car</span>.<span style="color:#a6e22e">go</span>();
</span></span><span style="display:flex;"><span>        }<span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">car</span>.<span style="color:#a6e22e">stop</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="specification">Specification</h2>
<blockquote>
<p>&ldquo;A specification is a statement detailing a requirement that should or must be satisfied (depending on the contractual or regulatory context) for some specific product or process (including protocols), or set of such products or processes&rdquo;</p>
</blockquote>
<p><em>Traffic Light Specification details colors, the order of colors, light intensity etc.</em></p>
<h2 id="standard">Standard</h2>
<blockquote>
<p>&ldquo;A standard is a specification established by some institution that some class of objects or processes could or should satisfy. All standards are specifications.&rdquo;</p>
</blockquote>
<p><em>Traffic Light is an ISO standard <a href="https://www.iso.org/obp/ui/en/#iso:std:iso:16508:ed-1:v2:en">ISO 16508:1999(en)
Road traffic lights</a></em></p>
<h2 id="examples-in-code">Examples in Code</h2>
<p>Interfaces are everywhere. When an interface is created for software that is called an API, application programmable interface.</p>
<p>The below code uses an interface. <code>binOp</code> takes an <code>op</code> function that has two parameters.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">binOp</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">op</span>) =&gt; (<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) =&gt; <span style="color:#a6e22e">op</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">avg</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">binOp</span>((<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>)=&gt;(<span style="color:#a6e22e">a</span><span style="color:#f92672">+</span><span style="color:#a6e22e">b</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">avg</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">20</span>); <span style="color:#75715e">// 15
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">hypo</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">binOp</span>((<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>)=&gt; Math.<span style="color:#a6e22e">sqrt</span>(<span style="color:#a6e22e">a</span><span style="color:#f92672">*</span><span style="color:#a6e22e">a</span><span style="color:#f92672">+</span><span style="color:#a6e22e">b</span><span style="color:#f92672">*</span><span style="color:#a6e22e">b</span>));
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">hypo</span>(<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>); <span style="color:#75715e">// 5
</span></span></span></code></pre></div><h2 id="the-world-is-your-oyster">The world is your oyster</h2>
<p>Once these four pillars are understood then understanding HTTP, TCP, WEBSOCKETS etc become a breeze. My students learn <code>MongoDB</code>. I explained that even though use are using <code>JavaScript</code> to connect to <code>MongoDB</code>, that we could use any language if we wanted to. MongoDB has it&rsquo;s own communication protocol. If we follow that protocol, then we can communicate with MongoDB. I&rsquo;ll have to show this because it is a fairly simple protocol and I&rsquo;m working on my own programming language <code>Silicon</code>. So I could build my own standard library for connecting to <code>MongoDB</code>.</p>
]]></content>
        </item>
        
        <item>
            <title>Software Symptoms vs Problems</title>
            <link>//localhost:1313/posts/software-symptoms-vs-problems/</link>
            <pubDate>Thu, 18 Apr 2024 00:22:13 -0500</pubDate>
            
            <guid>//localhost:1313/posts/software-symptoms-vs-problems/</guid>
            <description>Symptoms vs Problems is something I&amp;rsquo;ve run into a lot lately. For example, our production support team has received multiple tickets about a specific screen, let&amp;rsquo;s call it QuickEdit, that allows the users to quickly edit some data. On save, the request will often timeout.
According to the business, they ask if we can just quickly fix this page. Maybe not allow multi-editing. The issue isn&amp;rsquo;t on the UI, that&amp;rsquo;s just where we see the symptom.</description>
            <content type="html"><![CDATA[<p>Symptoms vs Problems is something I&rsquo;ve run into a lot lately. For example, our production support team has received multiple tickets about a specific screen, let&rsquo;s call it <em>QuickEdit</em>, that allows the users to quickly edit some data. On save, the request will often timeout.</p>
<p>According to the business, they ask if we can just <em>quickly</em> fix this page. Maybe not allow multi-editing. The issue isn&rsquo;t on the UI, that&rsquo;s just where we see the <em>symptom</em>. The <em>problem</em> existing on the backend where 10&rsquo;s of kloc of complex business logic and models are being loaded for <em>ANY</em> and <em>ALL</em> data changes.</p>
<p>The only correct solution is a full rewrite of that screen.</p>
]]></content>
        </item>
        
        <item>
            <title>Soft Skills for Software Engineers</title>
            <link>//localhost:1313/posts/soft-skills-for-software-engineers/</link>
            <pubDate>Wed, 10 Apr 2024 20:34:43 -0500</pubDate>
            
            <guid>//localhost:1313/posts/soft-skills-for-software-engineers/</guid>
            <description>Computer Science students, bootcampers etc. Often think a career in software is solely defined by their hard technical skills. In fact, they may think that in order to get promoted they have to demonstrate only technical skills.
I&amp;rsquo;m going to cover five soft-skill concepts developers need to understand.
Understanding Agile People Skills </description>
            <content type="html"><![CDATA[<p>Computer Science students, bootcampers etc. Often think a career in software is solely defined by their hard technical skills. In fact, they may think that in order to get promoted they have to demonstrate only technical skills.</p>
<p>I&rsquo;m going to cover five soft-skill concepts developers need to understand.</p>
<h2 id="heading"></h2>
<h2 id="understanding-agile">Understanding Agile</h2>
<h2 id="people-skills">People Skills</h2>
]]></content>
        </item>
        
        <item>
            <title>Software Interviews Explained</title>
            <link>//localhost:1313/posts/software-interviews-101/</link>
            <pubDate>Tue, 02 Apr 2024 16:39:58 -0500</pubDate>
            
            <guid>//localhost:1313/posts/software-interviews-101/</guid>
            <description>Practical Software Interviews A medium article about Google interviews sparked an interesting debate about technical interview methods and questions. I realized that the vast majority of developers have never been the interviewer. Many developers may misunderstand the goals of a technical interview and the vantage point of the technical interviewer. Furthermore, influencers make Leetcode style interviews seem like they&amp;rsquo;re common outside of FAANG; they&amp;rsquo;re not. Here I&amp;rsquo;ll go over how typical software engineer interviews are run as well as debunking some common myths about software interviews.</description>
            <content type="html"><![CDATA[<h2 id="practical-software-interviews">Practical Software Interviews</h2>
<p>A medium article about Google interviews sparked an interesting debate about technical interview methods and questions. I realized that the vast majority of developers have never been the interviewer. Many developers may misunderstand the goals of a technical interview and the vantage point of the technical interviewer. Furthermore, influencers make Leetcode style interviews seem like they&rsquo;re common outside of FAANG; they&rsquo;re not. Here I&rsquo;ll go over how typical software engineer interviews are run as well as debunking some common myths about software interviews.</p>
<h2 id="rule-of-thumb">Rule of Thumb</h2>
<p>No, most SWEs aren&rsquo;t making $500,000 after 10 years of experience, or 20. The average developer has 5 years of experience and makes around $110,000. A USA software engineer will make about $50,000 to $70,000 per year PLUS $10,000 per year of experience. This means it takes the typical developer 3-5 years to reach a salary of $100,000 USD. Again, this is outside of startups, FAANG or big cities where $120,000 qualifies a family of 4 for government benefits.</p>
<h2 id="the-question-doesnt-matter">The Question Doesn&rsquo;t Matter</h2>
<p>I think most say this out of frustration. &ldquo;I&rsquo;ll NEVER need to reverse a linked list on the job!&rdquo;.</p>
<p>While that may be true, the question isn&rsquo;t the point. The goal of an interview is to assess the skills of the candidate. Outside of FAANG, senior software engineers are rarely asked to code in technical interviews. If a senior is asked to code, it is usually an easy task just to do a &ldquo;gut check&rdquo; to make sure they&rsquo;re not a fraud.</p>
<p>While reversing a linked list may not be a common task as a developer; I&rsquo;ve never done it. It DOES test if the developer understands basic data-structures and how to traverse them. In my humble opinion, there are much better questions to ask. Again, the question doesn&rsquo;t matter too much. Furthermore, this would only be one of MANY questions asked in a 1 hour technical interview.</p>
<p>I do NOT have a bank of questions. Neither do most of the other lead developers. Why? Because we do software engineering daily. Why would we have to prep to talk about what we are masters of? Furthermore, my questions depend on YOUR RESUME. If you list Java, then I&rsquo;ll ask about Java. If you list REST then we&rsquo;ll talk about HTTP and REST. This isn&rsquo;t rocket science. The interview isn&rsquo;t about asking &ldquo;how many balloons could you fit in Wrigley Field?&rdquo;. I want to test the candidate on the subjects that they are best at. That shows me they can learn.</p>
<p>*side note. I realized after coding for 17 years that I had never reversed a linked list so I finally did. . . yeah that was boring.</p>
<p>Why doesn&rsquo;t the question matter that much? Let&rsquo;s use an analogy.</p>
<p>I don&rsquo;t care about the question that much.</p>
<p>Imagine a chef is being interviewed for a position at a Michelin star restaurant. The interviewer asks the chef to make a simple dish.</p>
<p>The chef says &ldquo;This is stupid! I&rsquo;ll never make such a simple dish helper at such a fancy restaurant. This is beneath me! This doesn&rsquo;t test practical kitchen skills.&rdquo;</p>
<p>This tells the interviewer they have a poor attitude and a large ego. The interviewer calmly replies &ldquo;Correct. BUT you will have to follow a recipe, measure ingredients, use a stove, taste the food making adjustments as needed while maintaining a clean workspace. WHAT you make doesn&rsquo;t really matter, HOW you make it does&rdquo;.</p>
<p>This brings me to a quote from the latest and final John Wick movie, &ldquo;How you do anything is how you do everything.&rdquo;. That is the point. How a candidate approaches a new problem, even an impractical one, is the same way they&rsquo;ll approach most other problems.</p>
<p>This brings me to another comment that said something like &ldquo;I should be able to use any and all tools available to me in the interview&rdquo;. The interviewer isn&rsquo;t evaluating CHAT GPT or one&rsquo;s skills at copy pasting from Stack-overflow. The interviewer wants to know if the candidate has the fundamental skills to solve problems. This is why whiteboards, Google docs etc are used without IDEs, AI, Google etc.</p>
<p>Again, the goal of the interview for the chef isn&rsquo;t about getting a free meal anymore then a software interview is about getting free software developed.</p>
<h2 id="the-answer-doesnt-matter">The Answer Doesn&rsquo;t Matter</h2>
<p>I blame schools. Students think the answer is more important than the method used to reach the answer. This is especially true when I&rsquo;m conducting interviews of Interns or Junior developers. Again, seniors I don&rsquo;t really ask to code. An Intern or SWE I isn&rsquo;t going to have much practical or depth of knowledge on any one subject.</p>
<p>So if a human still needs to understand how to read, write and evaluate code to use CHAT GPT, then why wouldn&rsquo;t I test that skill in an interview? Should I ask complex problems to</p>
<h2 id="the-code-doesnt-matter">The Code Doesn&rsquo;t Matter</h2>
<p>When I&rsquo;ve been the interviewer and the candidate, the code doesn&rsquo;t matter that much. Many interviews have the interviewer share their screen and the candidate tells them where and what to code. This of course is less efficient than real life. One&rsquo;s fingers can move faster, use IDE shortcuts, search, use AI etc. Nerves are involved as well. I like this approach because the candidate must explain what to do instead of just doing it.</p>
<p>If the interview is on the whiteboard then the code doesn&rsquo;t need to compile or be perfect. For all intents and purposes pseudo-code to show the correct steps.</p>
<p>I think candidates are too focused on the code and solving the problem. I blame school for putting too much focus on grades and test scores; results. Software interviews are more like my high school math homework. On the very first day of class my math teacher gave us the answer key to all the homework problems. He cared more about us knowing how to use the correct method to obtain the correct answer, using the answer key to verify we had, instead of just giving the answers without comprehension. This is much like software where we start with the answers, unit tests, and then work backwards to verify our code produces the correct answers.</p>
<p>The article talked about how most candidates fail Google&rsquo;s technical interview because they don&rsquo;t show their work. I&rsquo;ve interview candidate that had all the right answers memorized but once I asked open-ended critical thinking questions, they failed. They couldn&rsquo;t ask clarifying questions. They couldn&rsquo;t explain how to break the problem down into steps.</p>
<p>Even if a candidate can&rsquo;t 100% complete a test, that doesn&rsquo;t mean they failed. The test is just to see the candidate&rsquo;s ability to solve problems, communicate possible solutions, explain possible side-effects etc. Very little of it is about code, especially at the senior level. It has been several years since I&rsquo;ve been ask to actually write code during an interview. Usually it is higher level systems design questions, discussing the HTTP spec etc.</p>
<p>I sporadically write code at work. Some months I write a lot of code, others I spend doing dev lead tasks such as architecture, DevOps, helping my developers, working with BAs to create user stories and helping QA understand how to test upcoming features.</p>
<h2 id="your-approach-does-matter">Your Approach Does Matter</h2>
<blockquote>
<p>&ldquo;So you can figure out anything during the stress of the interview even if you haven&rsquo;t done it before?&rdquo; &ndash; Robert</p>
</blockquote>
<p>Yes, that is the job of software engineers. We solve problems that we haven&rsquo;t seem before. Otherwise, why would companies pay well into the 6 figures for me to copy paste solutions from CHAT GPT or Stack overflow? Anyone can write code, even AI, but few can write the correct code in the correct place that is efficient and performant.</p>
<p>Again to my Chef analogy. If the interviewer asks the chef to make Beef Wellington, something they have never done before. They should be able to do it. They may not be an expert at Beef Wellington but they should understand how to make a puff pastry, prep the ingredients, good meat etc. If they can&rsquo;t then the interview would be concerned the Chef has used rote memorization to only mimic deeper comprehension.</p>
<p>(I made Beef Wellington for the first time last Christmas. Hence the analogy. I use a hybrid of two recipes. Oh so good. I&rsquo;m not so good at keeping a clean workspace though.)</p>
]]></content>
        </item>
        
        <item>
            <title>Premature Optimization</title>
            <link>//localhost:1313/posts/premature-optimization/</link>
            <pubDate>Sun, 24 Mar 2024 14:00:30 -0500</pubDate>
            
            <guid>//localhost:1313/posts/premature-optimization/</guid>
            <description>What is &amp;ldquo;premature optimization&amp;rdquo;? We often hear developers argue against it quoting Donald Knuth&amp;rsquo;s from The Art of Computer Programming:
“The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.”
So what is premature optimization? Optimization is NOT bad. So when is the correct time or context to optimize code?</description>
            <content type="html"><![CDATA[<p>What is &ldquo;premature optimization&rdquo;? We often hear developers argue against it quoting Donald Knuth&rsquo;s from <em>The Art of Computer Programming</em>:</p>
<blockquote>
<p>“The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.”</p>
</blockquote>
<p>So what is <em>premature optimization</em>? Optimization is <strong>NOT</strong> bad. So <em>when</em> is the correct time or context to optimize code?</p>
<p>This is just me thinking out loud. I&rsquo;m by no means an expert. I&rsquo;ve been writing code professionally for 11 years now but that doesn&rsquo;t say much. I present X points of when we <em>should</em> think of optimization.</p>
<ol>
<li>Optimize based on experience (when it is cheap)</li>
<li>Optimize based on metrics</li>
<li>Optimize based on use-case</li>
<li>Optimize based on economics</li>
<li>Optimize based on effort (now vs later)</li>
<li>Optimize based on longevity</li>
</ol>
<h2 id="optimize-based-on-experience">Optimize based on experience</h2>
<p>Experience developers generally write more optimized code on the first try than less exprienced developers. If the optimization is free, meaning it takes about the same about of time to implement as the less optimized code, then we should do it. For example, I&rsquo;m going to write a <code>GROUP BY</code> instead of a subquery in SQL right away. I&rsquo;m not going to say that&rsquo;s premature optimization. That is just an excuse to be a bad software developer.</p>
<p>If choosing between two mostly equivalent libraries and one is significantly faster then we should chose the faster one.</p>
<h2 id="optimize-based-on-metrics">Optimize based on metrics</h2>
<p>Optimization isn&rsquo;t premature if we have metrics to back it up. I do mean production metrics, not cherry-picked charts on the company&rsquo;s sales page.</p>
<h2 id="optimize-based-on-use-case">Optimize based on use-case</h2>
<p>If I&rsquo;m going to write a new REST API that I know will have few users, then worrying about optimization makes no sense. This is why start-ups often use MERN stack. It isn&rsquo;t a very good stack but it is fast to market.</p>
<p>IF say Google wants to create a new REST API that very well may have say 10,000,000 API calls per day, then we should err on the side of safety and optimize for success.</p>
<p>I remember having to parse CSV file to create new users into a system. It was decided that this should only handle small updates. If a company wanted to add ALL their employees at once, then we&rsquo;d use a different method. I didn&rsquo;t bother wasting the time implementing streaming to add large CSV files to our system.</p>
<h2 id="optimize-based-on-the-hot-path">Optimize based on the hot path</h2>
<p>Many times I&rsquo;ve written code for sites that serve 80%+ of their traffic from a CDN like Cloudflare. Having a little faster code in many cases makes no difference to the user. If the hot path is already well optimized and there are no metrics to prove otherwise, why are we wasting developer hours optimizing it? I remember a non-technical manager demand we use a different ORM because the current one was &ldquo;slow&rdquo; based on blog metrics. Ultimately, it didn&rsquo;t work and we reverted back to the original ORM. The ORM was never a bottleneck.</p>
<h2 id="optimize-based-on-economics">Optimize based on economics</h2>
<p>I&rsquo;ve heard too many times developers say that scaling code is easy and developer hours are more expensive than server costs. Those developers have never paid a server bill. I&rsquo;ve seen 5 and 6 figure cloud bills. Optimizing those by even 1% could be the salary for one or more developers.</p>
<p>Users leave a site if it doesn&rsquo;t load quickly.</p>
<h2 id="optimize-based-on-effort">Optimize based on effort</h2>
<p>Again, if an optimization is easy to do and doesn&rsquo;t significantly add to development time, code complexity or maintenance or QA (please don&rsquo;t forget QA), then do it!</p>
<p>Optimization is like cleaning a bedroom; it is easier to do it now than later. If we wait to optimize later then the contextual knowledge is lost, and the code complexity goes up. This may make the code more economical to rewrite than to optimize which is often a huge effort.</p>
<h2 id="optimize-based-on-longevity">Optimize based on longevity</h2>
<p>I used to write enterprise CMS code. We didn&rsquo;t write tests because the code either worked or it didn&rsquo;t when tested. It was through away code that was going to be completely rewritten, probably in a different CMS in 3-5 years anyways. If you know the code is for a startup or not going to have a long life then don&rsquo;t worry about optimizing it. That said, code is always used longer that it should be, COBOL anyone?</p>
]]></content>
        </item>
        
        <item>
            <title>Exposing Coding Bootcamp From an Instructor</title>
            <link>//localhost:1313/posts/exposing-coding-bootcamp-from-an-instructor/</link>
            <pubDate>Wed, 06 Dec 2023 16:00:42 -0600</pubDate>
            
            <guid>//localhost:1313/posts/exposing-coding-bootcamp-from-an-instructor/</guid>
            <description>Are coding bootcamps a scam? Are they worth is in 2024?
I have been a bootcamp instructor for a local coding bootcamp that runs through my local university since 2021. I&amp;rsquo;m currently teaching my 6th bootcamp cohort.
First, let&amp;rsquo;s define which sub-topics
Advertising Price Refunds Curriculum Staff Instructors TAs Tutors Graders Career Services Conclusion </description>
            <content type="html"><![CDATA[<p>Are coding bootcamps a scam? Are they worth is in 2024?</p>
<p>I have been a bootcamp instructor for a local coding bootcamp that runs through my local university since 2021. I&rsquo;m currently teaching my 6th bootcamp cohort.</p>
<p>First, let&rsquo;s define which sub-topics</p>
<h2 id="advertising">Advertising</h2>
<h2 id="price">Price</h2>
<h2 id="refunds">Refunds</h2>
<h2 id="curriculum">Curriculum</h2>
<h2 id="staff">Staff</h2>
<h3 id="instructors">Instructors</h3>
<h3 id="tas">TAs</h3>
<h3 id="tutors">Tutors</h3>
<h3 id="graders">Graders</h3>
<h2 id="career-services">Career Services</h2>
<h2 id="conclusion">Conclusion</h2>
]]></content>
        </item>
        
        <item>
            <title>Dangers of Functional Programming</title>
            <link>//localhost:1313/posts/dangers-of-functional-programming/</link>
            <pubDate>Wed, 06 Dec 2023 15:33:15 -0600</pubDate>
            
            <guid>//localhost:1313/posts/dangers-of-functional-programming/</guid>
            <description>Functional Programming has grown in popularity the last few years. Unfortunately, that also means it has become a bit of a buzzword. Some may call themselves &amp;ldquo;FP nerds&amp;rdquo; while only superficially emulating functional programming.
Sometimes mimicking functional techniques, especially in a non-functional language, I&amp;rsquo;m looking at you ES2024, is bit inefficient or dangerous. Let&amp;rsquo;s cover some dangers of blindly using FP techniques without understand how they work instead of blindly following some self-proclaimed FP guru (typical FAANG to influencer) told you FP is a panacea.</description>
            <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Function_(computer_programming)">Functional Programming</a> has grown in popularity the last few years. Unfortunately, that also means it has become a bit of a buzzword. Some may call themselves &ldquo;FP nerds&rdquo; while only superficially emulating functional programming.</p>
<p>Sometimes mimicking functional techniques, especially in a non-functional language, <em>I&rsquo;m looking at you ES2024</em>, is bit inefficient or dangerous. Let&rsquo;s cover some dangers of blindly using FP techniques without understand <em>how</em> they work instead of blindly following some self-proclaimed FP guru (typical FAANG to influencer) told you FP is a panacea.</p>
<p><strong>DISCLAIMER</strong></p>
<p>These are my opinions. I like FP, but it is just a tool. I&rsquo;m not a fanboy of any particular technique; I use want works given my requirements and constraints (yes, skill issues are constraints).</p>
<h2 id="1-dangers-of-lies">1) Dangers of Lies</h2>
<p>The first lie is from FP &lsquo;gurus&rsquo; you&rsquo;ll first here is &ldquo;it makes code easier to test&rdquo;. While that may be true, FP comes from Lambda Calculus and in mathematics, there are no Unit Tests, only proofs. So strictly speaking if we were doing TRUE FP (no real Scottsman), there would be only proofs in the compiler. Thare are logical languages that do this but you and I are unlikely to ever get paid to use them commercially.</p>
<h2 id="2-danger-of-recursion">2) Danger of Recursion</h2>
<p>True FP nerds will even avoid <code>for</code> and <code>while</code> and opt for recursion. Recursive algorithms / code can be beautiful but also dangerous.</p>
<p>Many major programming languages: <code>Python</code>, <code>C#</code>, <code>Java</code>, <code>PHP</code>, <code>ECMAscript</code>, <code>Ruby</code> either completely lack or don&rsquo;t guarantee runtime or compiler support for <a href="https://en.wikipedia.org/wiki/Tail_call">TCO</a>.</p>
<p>Let&rsquo;s look at the following C# code that recursively implements the fibonacci sequence.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> fib(<span style="color:#66d9ef">int</span> n){
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span>(n &lt;= <span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">return</span> n;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> fib( n - <span style="color:#ae81ff">1</span> ) + fib( n - <span style="color:#ae81ff">2</span> );
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Unfortunately, while C# runtime, CLR, supports TCO, the C# compiler does not. This means that we may be getting stackoverflow then immediately going to the site of the same name to solve our error.</p>
<p>We <em>can</em> use a technique called <a href="https://volgarev.me/2013/09/27/tail-recursion-and-trampolining-in-csharp.html">bouncing</a>, also explained <a href="http://blog.functionalfun.net/2008/04/bouncing-on-your-tail.html">here</a> to prevent this.</p>
<h3 id="stack-overflow">Stack Overflow</h3>
<p>No, not the Q&amp;A website. Many language runtimes, including V8 for Javascript, don&rsquo;t have <a href="https://exploringjs.com/es6/ch_tail-calls.html">TCO</a> meaning recursive function calls will get added to the stack before they&rsquo;re called, overflowing the stack. I say <em>language runtime</em> instead of language because the ECMAscript specification does infact support TCO. Specifications don&rsquo;t help when they&rsquo;re not properly or completely implemented.</p>
<h3 id="big-o">Big O</h3>
<p>Take the classic Fibonacci algorithm. The Iterative solution runs in O(n). The recursive solution runs in O(2^n). Sure it <em>can</em> be O(n) WITH <a href="/">memoization</a>, that still means we use O(n) extra memory to do the same thing. We <em>could</em> write the recursive version to be more similar to the iterative version but for no gain and loss of code readability.</p>
<h3 id="runtime-immutability-referencial-transparency">Runtime, Immutability, Referencial Transparency</h3>
<p>TRUE FP means during runtime ALL code is referencially transparent. What does that mean? A basic definition is given in code below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#75715e">// a language is RF if the following is ALWAYS true for all expressions
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">random</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">b</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">==</span> Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">+</span> Math.<span style="color:#a6e22e">random</span>();
</span></span></code></pre></div><p>Many FP features actually require a runtime. This means system languages like <code>Rust</code> and <code>Zig</code> can never be fully FP like Haskell. Features that require a runtime: <code>immutable data-structures</code>, and often use <code>monads</code> as a solution to handle impure operations. FP languages like Haskell require a runtime to evaluate commands to handle IO at runtime.</p>
<h2 id="dangers-of-mapreducefilter">Dangers of <code>map</code>,<code>reduce</code>,<code>filter</code></h2>
<p>These methods are great!</p>
<h3 id="no-early-returns">No Early Returns</h3>
<p>Unfortunately, most languages aren&rsquo;t <code>Ruby</code> so therefore lack <a href="/">non-local return</a> so you can&rsquo;t return early when using <a href="/">internal iterators</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-es" data-lang="es"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> a <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>a.map((v,i)<span style="color:#f92672">=&gt;</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">//</span> this returns for lambda function NOT for map. Map will continue
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">if</span>(v <span style="color:#f92672">===</span> <span style="color:#ae81ff">2</span>) return; 
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><h3 id="nom-nom-ram">NOM NOM RAM</h3>
<p>More memory usage is also a problem.</p>
<h2 id="dangers-of-data-structures">Dangers of Data-Structures</h2>
<p>In languages where everything is an object, it is easy to allocate too many object and clone them. If a developer blindly follows
FP they may avoid mutation and in doing so allocate a ton more memory for the GC to clean up later. FP language compilers and runtimes are optimized for this, your ECMAscript that doesn&rsquo;t
even have a standard library in 2024, doesn&rsquo;t.</p>
<p>Unfortunately, many languages: <code>C#</code>, <code>Java</code>, <code>Javascript</code>, <code>ruby</code>, <code>php</code>&hellip; don&rsquo;t natively have immutable data-structures. This means you are spending A LOT of CPU and Memory to copy objects constantly just to avoid mutation. Plus, syntatically it is VERY verbose to do so.</p>
<p>Proper FP languages: <code>F#, Scala, OCaml, Haskell, Elm</code> use <a href="/">Immutable Data Structures</a> to prevent freeing too many objects and making the <a href="/">garbage collector</a> go BRRRR.</p>
<h3 id="more-fp--more-objects">More FP = More Objects?</h3>
<p>Javascript&rsquo;s <code>Array.prototype.reduce</code> method will actually allocate more objects! I know I thought we were being functional.</p>
<p><code>...</code> syntax, in some cases, can also be very inefficient.</p>
<h2 id="dangers-of-functions">Dangers of Functions</h2>
<p>Functions are great. Why would there be anything dangerous about functions?</p>
<h2 id="more-objects">More Objects</h2>
<p>Creates more objects.</p>
<h3 id="currying--partial-application">Currying / Partial Application</h3>
<p><a href="https://stackoverflow.com/questions/53852138/functional-programming-when-to-curry">Stackoverflow answer explains it well</a></p>
<blockquote>
<p>Currying is the transformation of applying a sequence of argument to a function to applying a sequence of functions to individual arguments. In JS this translates to creating a bunch of Functions which has a significant cost at runtime. However, this also has benefits in expressiveness for instance:</p>
</blockquote>
<p>// the mapping function is
// created at each invocation of add2
const add2 = (coll) =&gt; map((x) =&gt; x + 2, coll);</p>
<p>// the mapping function is
// created once
const add2 = map((x) =&gt; x + 2);</p>
<blockquote>
<p>This illustrates that</p>
</blockquote>
<blockquote>
<p>currying is putting emphasis on the fact that functions are 1st class citizens in your language and your domain (you pass around functions and values to model your domain).
it has significant costs in JS if currying happens on a critical path of your app.
curried functions must be consistent in their argument positioning. For instance by convention, transformation functions will take the collection on which to iterate as the last argument.</p>
</blockquote>
<p>Currying or Partial Application can have a bit of execution overhead when used in Javascript. There will be multiple object created at runtime to support this.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Functional Programming has many valuable concepts that lend to better code. However, FP is just a tool. It shouldn&rsquo;t be applied blindly or superficially imitated aka cargo cult. Sometimes, a plain old C-style for loop is exactly what is needed. Take the concepts and apply them where appropriate in your language / framework with some thought.</p>
]]></content>
        </item>
        
        <item>
            <title>OOP vs FP</title>
            <link>//localhost:1313/posts/oop-vs-fp/</link>
            <pubDate>Sat, 02 Dec 2023 14:35:19 -0500</pubDate>
            
            <guid>//localhost:1313/posts/oop-vs-fp/</guid>
            <description>There has been numerous reactions to the reactions to the reactions of a certain Tech Influencer, who works at Netflix BTW, reacting to a Continuous Deliver video about OOP vs FP.
FP Functions are the main abstraction Functions are pure a) referential transparency: same output for a given input b) no side-effects: no mutation, no outside state (no IO) First, let&amp;rsquo;s actually define OOP and FP. FP is the easiest to define because it is based on lambda calculus.</description>
            <content type="html"><![CDATA[<p>There has been numerous reactions to the reactions to the reactions of a certain Tech Influencer, who works at Netflix BTW, reacting to a Continuous Deliver video about OOP vs FP.</p>
<h2 id="fp">FP</h2>
<ol>
<li>Functions are the main abstraction</li>
<li>Functions are pure
a) referential transparency: same output for a given input
b) no side-effects: no mutation, no outside state (no IO)</li>
</ol>
<p>First, let&rsquo;s actually define OOP and FP. FP is the easiest to define because it is based on lambda calculus. There are only two rules: no mutation, referencial transparency of functions, that&rsquo;s it. For loops require mutation so recursion is used instead. The runtime can cause side-effects but they&rsquo;re abstracted away from the code, making the code pure.</p>
<p>OOP is much more difficult to define. We learn in university the pillars of OOP are Abstraction, Encapsulation, Polymorphism and Inheritance. The funny thing is that only inheritance is distinctive of OOP even though any competent OO programmer will tell you composition should be prefered over inheritance. So OO&rsquo;s most distinctive feature is as huge code smell. ALL software is about abstractions, FP has many abstractions like high-order functions. Encapsulation isn&rsquo;t unique either, though FP since everything is immutable tends to make things more public.</p>
<h2 id="oop">OOP</h2>
<ol>
<li>Objects are the main abstraction; functions don&rsquo;t exist.</li>
<li>Objects communicate with other objects by message passing aka dispatch.</li>
<li>ALL data is encapsulated in an object.</li>
<li>Inheritance is compiler-assisted copy-paste</li>
</ol>
<h2 id="abstraction">Abstraction</h2>
<p>The art of hiding details we don&rsquo;t care about.</p>
<h2 id="encapsulation">Encapsulation</h2>
<h2 id="inheritance">Inheritance</h2>
<h2 id="polymorphism">Polymorphism</h2>
<p>There multiple types of polymorphism and multiple methods to implement them.</p>
<h2 id="parametric">Parametric</h2>
<h2 id="ad-hoc">Ad-hoc</h2>
<h2 id="sub-type">Sub-type</h2>
<h2 id="procedural">Procedural</h2>
<p>A procedure is like a function but may have no parameters and not return a value. Procedures aren&rsquo;t pure. Procedural usually
is more A then B then C, style of programming</p>
]]></content>
        </item>
        
        <item>
            <title>Theory vs Practice in Software</title>
            <link>//localhost:1313/posts/theory-vs-practice/</link>
            <pubDate>Fri, 24 Nov 2023 20:49:30 -0500</pubDate>
            
            <guid>//localhost:1313/posts/theory-vs-practice/</guid>
            <description>I notice that when I have discourse with other developers online that there is a disconnect. Most developers, about 58%, have less than 10 years of experience. This means that more often than not, I have more experience than the developer I am debating with. Experience doesn&amp;rsquo;t make me correct of course, I&amp;rsquo;m a mediocre developer at best. However, having more experience means that I&amp;rsquo;ve seen &amp;ldquo;TDD&amp;rdquo;, &amp;ldquo;Agile&amp;rdquo;, &amp;ldquo;ORMs&amp;rdquo; and many other technologies, methodogies both succeed and fail in real-world use.</description>
            <content type="html"><![CDATA[<p>I notice that when I have discourse with other developers online that there is a disconnect. Most developers, about 58%, have less than 10 years of experience. This means that more often than not, I have more experience than the developer I am debating with. Experience doesn&rsquo;t make me correct of course, I&rsquo;m a mediocre developer at best. However, having more experience means that I&rsquo;ve seen &ldquo;TDD&rdquo;, &ldquo;Agile&rdquo;, &ldquo;ORMs&rdquo; and many other technologies, methodogies both succeed and fail in real-world use.</p>
<p>Take TDD for example. I&rsquo;m sure it is amazing. I use TDD for my own personal projects even! I may have a decade of experience but I know I&rsquo;m lacking in TDD skills. So often I argue <strong>against TDD</strong>, WHY?! Because in theory, theory and practice are the same but in practice they are not. TDD is great but if management doesn&rsquo;t give the developers time to write quality tests and only looks at code coverage, which is easy to falsify via simple tests or <code>ExcludeFromCodeCoverage</code> in <code>C#</code>, that means tests often have a net negative value while giving a false sense of security. Who is reviewing PRs for tests AND code? The are usually <em>MUCH</em> more important and low hanging fruit to fix in a team than yet another cargo cult of TDD. We might as well add yet another SCRUM ceremony while we&rsquo;re at it. Is software a religion or a science?</p>
<p>Same thing for Agile. Agile was designed for internal software, NOT consulting.</p>
<h2 id="big-o-is-a-lie">Big O is a lie</h2>
<p>Take Big O Notation that we all learned in computer science, I taught myself after getting an AAS degree. Big O is great to know and understand, BUT it is NOT the real world. In the real world, theory doesn&rsquo;t matter, facts and results do.</p>
<p>A naive junior developer could spend 5 hours writing an algorithm that run is O(n) time while a senior spends 30 minutes writing a naive algorithm that runs in O(n^2) time. Which one is better? Well maybe the senior understands a few <em>REAL WORLD</em> parameters</p>
<ol>
<li>N will always be small and the optimized algorithm that uses hashes will <em>practically</em> be slower because of the <strong>FIXED</strong> overhead</li>
<li>Time to deliver the software is more important i.e. in a startup.</li>
<li>The practical difference won&rsquo;t be noticeable : 3ms vs 60ms is a 20x difference but humans won&rsquo;t notice.</li>
<li>The code is a small percentage of the total performance. If the code takes up 5% of the total runtime @ 60ms, improving it by 20X, will only save 57 ms or 4.75% improvement on total speed. <strong>CACHING</strong> is a big factor as well.</li>
</ol>
<h2 id="caching">Caching</h2>
<p>Sometimes being <em>LESS</em> efficient is MORE optimal because of caching. Having 60 separate JS files might actually be more efficient because if ONE changes the other 59 are still cached. IF we bundle all 60 into <code>acme.bundle.js</code>, a single character change will invalidate the <strong>WHOLE</strong> cache.</p>
]]></content>
        </item>
        
        <item>
            <title>Silicon Part 2</title>
            <link>//localhost:1313/posts/silicon/si-2/</link>
            <pubDate>Sat, 04 Nov 2023 21:56:31 -0500</pubDate>
            
            <guid>//localhost:1313/posts/silicon/si-2/</guid>
            <description>In my previous Silicon post, I mentioned Ohm.js, which is the PEG-based parser generator that I&amp;rsquo;m using.
OHM has several advantages.
Allows left recursion rules to be defined Better and more accurate error handling (because of left-recursion fix) PEG grammar support Semantic rules: allows for linters, formatters etc to easily be made from same grammar Editor to check grammar against a list of test cases Learning my Parser Generator This has been a blast this week learing OHM.</description>
            <content type="html"><![CDATA[<p>In my previous Silicon post, I mentioned <a href="https://ohmjs.org/">Ohm.js</a>, which is the PEG-based parser generator that I&rsquo;m using.</p>
<p>OHM has several advantages.</p>
<ul>
<li>Allows left recursion rules to be defined</li>
<li>Better and more accurate error handling (because of left-recursion fix)</li>
<li>PEG grammar support</li>
<li>Semantic rules: allows for linters, formatters etc to easily be made from same grammar</li>
<li>Editor to check grammar against a list of test cases</li>
</ul>
<h2 id="learning-my-parser-generator">Learning my Parser Generator</h2>
<p>This has been a blast this week learing OHM.js. I&rsquo;m really loving it. I notice that 90% of the time I define a rule and it works first try (when I try the rule directly in the editor). I also found if I test my new rule based on the root of the grammar, that it fails 99% of the time! That is because I didn&rsquo;t understand precedence and how some rules are pretty ambigous.</p>
]]></content>
        </item>
        
        <item>
            <title>Silicon Part 4</title>
            <link>//localhost:1313/posts/silicon/si-4/</link>
            <pubDate>Sat, 04 Nov 2023 21:56:31 -0500</pubDate>
            
            <guid>//localhost:1313/posts/silicon/si-4/</guid>
            <description>Hey interwebs! So Silicon and Sigil have come a long way this month. I have most of the grammar finalize and Silicon is already compiling to Javascript with support for a dozen Web APIs and Node APIs.
I&amp;rsquo;m started getting WASM code gen working as well!</description>
            <content type="html"><![CDATA[<p>Hey interwebs! So Silicon and Sigil have come a long way this month. I have most of the grammar finalize and Silicon is already compiling to Javascript with support for a dozen Web APIs and Node APIs.</p>
<p>I&rsquo;m started getting WASM code gen working as well!</p>
]]></content>
        </item>
        
        <item>
            <title>Typing Speed Matters for Software Developers</title>
            <link>//localhost:1313/posts/typing-speed-matters-for-software-developers/</link>
            <pubDate>Sat, 23 Sep 2023 21:56:58 -0400</pubDate>
            
            <guid>//localhost:1313/posts/typing-speed-matters-for-software-developers/</guid>
            <description>Typing efficiency and speed is an often underrated and underappreciated skill for new and novice developers. I teach a coding bootcamp. I see adults of all ages, talents, backgrounds and walks of life start their journey into software development.
One issue, of many, I have with coding bootcamps is that they say there are no prerequisits when there definitely are. I&amp;rsquo;ve seen students start bootcamp with a brand-new laptop, likely their first, log onto the Zoom class all bright eyed with ethusiam and wonder.</description>
            <content type="html"><![CDATA[<p>Typing efficiency and speed is an often underrated and underappreciated skill for new and novice developers. I teach a coding bootcamp. I see adults of all ages, talents, backgrounds and walks of life start their journey into software development.</p>
<p>One issue, of many, I have with coding bootcamps is that they say there are no prerequisits when there definitely are. I&rsquo;ve seen students start bootcamp with a brand-new laptop, likely their first, log onto the Zoom class all bright eyed with ethusiam and wonder. They&rsquo;re ready to learn, only to then be crushed because the type minutes per word, have no idea how to work their computer and they quickly burn out. If you&rsquo;ve never downloaded a zip file and extracted it, or done basic computer tasks, learning to code may be something you should wait on doing, especially if you&rsquo;re planning on dropping $10,000 USD and 6 month of your life on a coding bootcamp.</p>
<p>One of those many skills that help with this is typing and a good keyboard. Software developers type A LOT. I always hear the poor argument &ldquo;programmers spend most of their time thinking, not coding&rdquo; as to justify very slow typing speeds. I bet those same people would get mad if they waited 30 minutes for their food at a sit-down restaurant only to see the waiter spend 10 minutes slowly walking to their table to bring them their food; &ldquo;most, 75%, of the time was spend cooking it, not serving it&rdquo;.</p>
<p>Developers don&rsquo;t just type code, we write Slack messages, emails, JIRA comments, JIRA tickets, documentation, GIT commit messages, terminal commands, Google queries etc. That is a LOT of typing. If a developer types 5,000 words per day and they type only 30 words per minute that is 2 hours and 46 minutes of typing per day. If that same developer works up to a decent 90 words per minute that time drops to 55 minutes; saving nearly 2 HOURS per day to do other things! That means they get a whole extra 9 hours and 25 minutes per week, basically an extra work day per week!</p>
<p>Small changes add up to a lot. Even if YOU only type 2,000 words per day and go from 45 WPM to 60 WPM that is still an extra 11 minutes per day or nearly hour per week or 44 hours per year which is still a whole extra week of productivity!</p>
<p><img alt="Monkey Type Test Result" src="/images/typing_example.png"></p>
<h2 id="steps-to-a-professional-typist">Steps to a Professional Typist</h2>
<p>I&rsquo;ll cover the steps to becoming an efficient (notice I didn&rsquo;t say fast) typist.</p>
<h3 id="ten-finger-typing">Ten Finger Typing</h3>
<p>Type with all 10 of your fingers. Not pointer fingers, not 4 fingers, all 10. I promise it is worth it in the long run.</p>
<h3 id="home-row">Home Row</h3>
<p>Always have your fingers start and return to the home row when you are typing. One can even type over 100 WPM while always returning to the homerow. This increases accuracy.</p>
<p>For faster typists, I suggest what I call the <code>prancing method</code> which jsut means that you type each word as quickly as possible but pause long enough between words to return your fingers to the homerow and read / think-of the next word. This works well over 100wpm. The pause between words will eventually shrink and you&rsquo;ll learn to read / think ahead when you are typing. Again, I personally care more about efficiency and accuracy than raw speed.</p>
<h3 id="touch-typing">Touch Typing</h3>
<p>Learn to type without looking at your keyboard. This does take some practice but it can be done.</p>
<h3 id="hover">Hover</h3>
<p>Don&rsquo;t rest your palms on the keyboard or laptop. They should hover. This may seem weird at first but this keeps the wrist straight and prenvent RSI.</p>
<h3 id="ctrl-shift">CTRL, SHIFT</h3>
<p>Learn to use the left control and shift for right letters. For QWERTY, you should be using LEFT SHIFT for writing &lsquo;P&rsquo; since P is on the right hand. You can turn this setting on in Monkey Type to enforce this. I personally don&rsquo;t but it isn&rsquo;t a bad idea.</p>
<h3 id="advanced-techniques">Advanced Techniques</h3>
<p>Just pratice Monkey type for 5 minutes per day. Really focus on 100% accuracy, touch typing and proper technique; speed comes with time. Some other things to practice are rolling letters.</p>
<h3 id="dvorak--alternative-layout">DVORAK / alternative layout</h3>
<p>I recommend DVORAK, COLEMAK or any common alternative keyboard layout. Later, sure make your own custom layout but having a common one makes it easy to switch your work computer.</p>
<h3 id="ergo-keyboard">ERGO Keyboard</h3>
<p>There are many ergo keyboards out there. I prefer something concave, and split with thumb clusters like the KINESIS. I like my MOONLANDER but the keys are pretty far apart and don&rsquo;t work for small hands and it isn&rsquo;t concave. The GLOVE80 or DACTYL are good alternatives.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Software developers type, A LOT, I&rsquo;m typing this blog post right now. The more efficiently and quickly we can type the more time we have for coffee breaks an occasionally touch grass. I&rsquo;m not saying everyone needs to type 160WPM.</p>
<p>I think 80-100 wpm with 90% accuracy over hours is a great long-term goal. Also, get yourself an ergonomic keyboard, they&rsquo;re expensive but last years and will prevent RSI. Especially one that supports QMK so you can program your own macros which actually reduces the number of keystrokes you need; again efficiency &gt; raw speed. My Moonlander is great but it doesn&rsquo;t work the best for raw speed, but I don&rsquo;t care. I can easily type 80-WPM all day long with fewer keystrokes and less strain on my wrists than if I typed on this MBA keyboard, what I&rsquo;m using right now. Granted it is so much easer type 160 WPM on a low profile MBA keyboard but I have a very hard time sustaining it. My Kinesis however is amazing. I can type full-speed on that thing and it is <strong>SO</strong> comfortable.</p>
<blockquote>
<p>This is also why developers should know their operating system of choice, their IDE and other tools well. Learning to navigate code even 2% more efficently adds up to over 40 hours of time savings in a year, that&rsquo;s a whole extra WEEK worth of work! If you find 5 places to become 2% more efficent then suddenly you are saving 5 weeks worth of effort per year. I&rsquo;m not saying go crazy about optimizing everything, but it is worth spending a few hours per month learning to be just a little more efficient with your tools.</p>
</blockquote>
<p>Another thought</p>
<blockquote>
<p>I think 70-100 WPM is sufficient. We aren&rsquo;t going for speed records but long-sustained typing speed and efficiency. My mom was a medical transcriptionist for many year and can type 115 WPM, fast but not 200wpm like world records, BUT her speed is extremely impressive when you realize she could write 125 WPM with full punctuation, no mistakes AND doing it for 8 hours straight. I remember writing up a school paper by hand and forgetting to type it up as a kid. I dictated the paper to her and she was typing faster than I was reading! Printing seemed to take longer.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Microservices: Death by a Thousand Papercuts</title>
            <link>//localhost:1313/posts/microservices-death-by-a-thousand-papercuts/</link>
            <pubDate>Mon, 04 Sep 2023 14:21:35 -0500</pubDate>
            
            <guid>//localhost:1313/posts/microservices-death-by-a-thousand-papercuts/</guid>
            <description>Microservices is another hot buzzword in tech right now. I&amp;rsquo;m not hear to talk bad about microservices; I&amp;rsquo;m no expert. I have had some experience though.
Best Buy I couldn&amp;rsquo;t get the payment information. Completely separate services and database. So I didn&amp;rsquo;t do the task. The fact my manager was mad says a lot. Did he NOT look at the user story? That is a really easy thing to catch. Backroom does not have any pricing information.</description>
            <content type="html"><![CDATA[<p>Microservices is another hot <em>buzzword</em> in tech right now. I&rsquo;m not hear to talk bad about microservices; I&rsquo;m no expert. I have had some experience though.</p>
<h2 id="best-buy">Best Buy</h2>
<p>I couldn&rsquo;t get the payment information. Completely separate services and database. So I didn&rsquo;t do the task. The fact my manager was mad says a lot. Did he NOT look at the user story? That is
a <em>really</em> easy thing to catch. Backroom does not have any pricing information.</p>
<h2 id="fiserv">FiServ</h2>
<h3 id="punchprofileprocessor">PunchProfileProcessor</h3>
<h3 id="unapprovedemployee-filter">UnapprovedEmployee Filter</h3>
<p>This task sounds stupidly easy, 2 story points at most. I just needed to get the number of unapproved timesheet for employees under a specific manager for a specific time period
for filtering on the front-end. So Service A needed to call Service B and Service C and then do a manual in-code join of the data and return it. It was ugly, but it worked.</p>
<h2 id="moral-of-the-story">MORAL OF THE STORY</h2>
<p>Microservices are a great <em>optimization</em>. Like most optimizations, you can do them prematurely. Don&rsquo;t default to microservices unless you REALLY KNOW what you&rsquo;re doing (YOU DON&rsquo;T).</p>
<p>The main difficulty in my limited experience over the 3 years I&rsquo;ve spent with microservices is that defining barriers is a deceivingly difficult problem. Which is a theme of software that
I&rsquo;ve learned over the lazy decade. Software is tightly coupled no matter what you do. Separation of code doesn&rsquo;t mean it is loosely coupled.</p>
<p>Microservices can get REALLY chatty. Imagine making a PBJ sandwhich BUT instead of ONE human, you have three. Human <strong>M</strong> can move items. Human <strong>S</strong> can SEE (others are blindfolded) and Human <strong>D</strong> can do thing with their hands. The amount of communication would be insane.</p>
<p>Especially at the database level. Microservices kills me when in my head I just need to query 2-3 table and then realize instead of 3 tables, it is 3 databases, 3 services and then need to manually join the data in memory with code.</p>
<p>The solution to virtually all Microservice problems is MORE microservices.</p>
]]></content>
        </item>
        
        <item>
            <title>The Last Monad Tutorial</title>
            <link>//localhost:1313/posts/monad/last-monad-tutorial/</link>
            <pubDate>Tue, 08 Aug 2023 11:49:16 -0500</pubDate>
            
            <guid>//localhost:1313/posts/monad/last-monad-tutorial/</guid>
            <description>Monad Definition:
Monad is a monoid in the category of endofunctors
That&amp;rsquo;s it!
Just kidding.
Monad is a container type that has some associated methods
interface monad&amp;lt;T&amp;gt; { wrap(T): Monad&amp;lt;T&amp;gt;; unwrap&amp;lt;T&amp;gt;(): T; map(monad: monad&amp;lt;T&amp;gt;): monad&amp;lt;T&amp;gt;; flatmap(monad: monad&amp;lt;T&amp;gt;, fn): monad&amp;lt;T&amp;gt;; } The simplist monad is an array.
[1]; We can unwrap the array and get the containing values.
function unwrap(array:[]any):any { return array[0] } we can wrap a value into an array</description>
            <content type="html"><![CDATA[<h1 id="monad">Monad</h1>
<p>Definition:</p>
<blockquote>
<p>Monad is a monoid in the category of endofunctors</p>
</blockquote>
<p>That&rsquo;s it!</p>
<p>Just kidding.</p>
<p>Monad is a container type that has some associated methods</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">monad</span>&lt;<span style="color:#f92672">T</span>&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">wrap</span>(<span style="color:#a6e22e">T</span>)<span style="color:#f92672">:</span> <span style="color:#a6e22e">Monad</span>&lt;<span style="color:#f92672">T</span>&gt;;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">unwrap</span>&lt;<span style="color:#f92672">T</span>&gt;()<span style="color:#f92672">:</span> <span style="color:#a6e22e">T</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">monad</span>: <span style="color:#66d9ef">monad</span>&lt;<span style="color:#f92672">T</span>&gt;)<span style="color:#f92672">:</span> <span style="color:#a6e22e">monad</span>&lt;<span style="color:#f92672">T</span>&gt;;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">flatmap</span>(<span style="color:#a6e22e">monad</span>: <span style="color:#66d9ef">monad</span>&lt;<span style="color:#f92672">T</span>&gt;, <span style="color:#a6e22e">fn</span>)<span style="color:#f92672">:</span> <span style="color:#a6e22e">monad</span>&lt;<span style="color:#f92672">T</span>&gt;;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The simplist monad is an <em>array</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>];
</span></span></code></pre></div><p>We can <code>unwrap</code> the array and get the containing values.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">unwrap</span>(<span style="color:#a6e22e">array</span><span style="color:#f92672">:</span>[]<span style="color:#66d9ef">any</span>)<span style="color:#f92672">:</span><span style="color:#66d9ef">any</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">array</span>[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>we can <code>wrap</code> a value into an array</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">wrap</span>(<span style="color:#a6e22e">value</span>:<span style="color:#66d9ef">any</span>)<span style="color:#f92672">:</span>[]<span style="color:#66d9ef">any</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> [<span style="color:#a6e22e">value</span>]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>we can <code>flatmap</code> an array. Meaning we unwrap it, perform some operation on the values and rewrap them.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">flatmap</span>(<span style="color:#a6e22e">items</span><span style="color:#f92672">:</span>[]<span style="color:#66d9ef">any</span>,  <span style="color:#a6e22e">action</span><span style="color:#f92672">:</span>(<span style="color:#66d9ef">any</span>)<span style="color:#f92672">:</span>[]<span style="color:#66d9ef">any</span>)<span style="color:#f92672">:</span>[]<span style="color:#66d9ef">any</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">items</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">action</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="summary">Summary</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">wrap</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">value</span>) =&gt; [<span style="color:#a6e22e">values</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">unwrap</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">array</span>, <span style="color:#a6e22e">index</span>) =&gt; <span style="color:#a6e22e">array</span>[<span style="color:#a6e22e">index</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">flatMap</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">array</span>, <span style="color:#a6e22e">func</span>) =&gt; <span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">func</span>);
</span></span></code></pre></div><h2 id="thats-it">That&rsquo;s it?!</h2>
<p>Basically. The difficult part is seeing the true abstraction here.</p>
<h2 id="maybe">Maybe?!</h2>
<p>The common example is to use maybe. Basically wrapped types have more information. Example, sending a letter requires the letter be put into an envelope, <code>wrap</code> and then sent.</p>
<p>The envelope adds information `u</p>
<h2 id="io-monad">IO Monad</h2>
<p>We <em>can</em> do IO in a pure way, sorta. So instead of our code reaching out into the world to get console input or logging, we ask the runtime to do it and pass it to the program as a parameter</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">world</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">input</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Bob&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getNameFromConsole</span>(<span style="color:#a6e22e">world</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">world</span>.<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">input</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The above function <strong>is</strong> pure because the <code>world</code> is now a parameter and not some mutable outside state.</p>
]]></content>
        </item>
        
        <item>
            <title>Referential Transparency</title>
            <link>//localhost:1313/posts/referential-transparency/</link>
            <pubDate>Thu, 03 Aug 2023 07:07:19 -0500</pubDate>
            
            <guid>//localhost:1313/posts/referential-transparency/</guid>
            <description>Referential Transparency is a confusing term. It is a really simple concept, I promise.
Referential Transparency is a fancy term for the substitution property of equality. Meaning = really means those two things are equal and interchangeable.
Let&amp;rsquo;s see as simple example.
const a = 1; a + a === 1 + 1; // true If a = 1 then we can replace all instances of a with 1 and everything works the same.</description>
            <content type="html"><![CDATA[<p>Referential Transparency is a confusing term. It is a <em>really</em> simple concept, I promise.</p>
<p>Referential Transparency is a fancy term for the substitution property of equality. Meaning <code>=</code> really means those two things are equal and interchangeable.</p>
<p>Let&rsquo;s see as simple example.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; <span style="color:#75715e">// true
</span></span></span></code></pre></div><p>If <code>a = 1</code> then we can replace all instances of <code>a</code> with <code>1</code> and everything works the same. Let&rsquo;s keep going.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">random</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">====</span> Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">+</span> Math.<span style="color:#a6e22e">random</span>(); <span style="color:#75715e">// FALSE
</span></span></span></code></pre></div><p>NOPE! They&rsquo;re not the same. We run into problems with <em>impure</em> functions. Functions that aren&rsquo;t predictable don&rsquo;t work. Now let&rsquo;s imagine we had a random function that was predictable that took a seed value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">random</span>(<span style="color:#a6e22e">seed</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">random</span>(<span style="color:#a6e22e">seed</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">random</span>(<span style="color:#a6e22e">seed</span>); <span style="color:#75715e">// true
</span></span></span></code></pre></div><p>Let&rsquo;s pretend <code>readChar</code> is a generator function that reads the following CSV file character by character and parses it as an integer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">readCharAsNumber</span>(); <span style="color:#75715e">// 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span>; <span style="color:#75715e">// 2
</span></span></span></code></pre></div><p>Simple enough. We call <code>readCharAsNumber</code> and get <code>&quot;1&quot;</code> which we parse as <code>1</code>. Then we take that value and add it twice.</p>
<p>So any time we write <code>=</code> that means we can replace the left side with the right side and get the same result. If <code>x = 3</code> then <code>x + x</code> is the same as <code>3 + 3</code>. Let&rsquo;s try that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">readCharAsNumber</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">readCharAsNumber</span>() <span style="color:#f92672">+</span> <span style="color:#a6e22e">readCharAsNumber</span>(); <span style="color:#75715e">// 3
</span></span></span></code></pre></div><p>We got <code>3</code> ?! On no. Every time we call our function it runs and gives us a different result!</p>
<p>If we want the next value, we need to say that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">readCharAsNumber</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">readCharAsNumber</span>() <span style="color:#f92672">+</span> <span style="color:#a6e22e">readCharAsNumber</span>(); <span style="color:#75715e">// 2 !!!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">readCharAsNumber</span>() <span style="color:#f92672">+</span> <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#a6e22e">next</span> <span style="color:#a6e22e">readCharAsNumber</span>(); <span style="color:#75715e">// 3
</span></span></span></code></pre></div><p>The <code>@next</code> keyword basically does this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">readCharAsNumber</span>().<span style="color:#a6e22e">next</span>().<span style="color:#a6e22e">value</span>;
</span></span></code></pre></div><p>We get a different function every time we call <code>.next</code> which means we maintain referential transparency while doing IO!</p>
<p>Effectively think of it as</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">next</span>(<span style="color:#a6e22e">index</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">readFileLine</span>(<span style="color:#a6e22e">index</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Tests vs Types</title>
            <link>//localhost:1313/posts/tests-vs-types/</link>
            <pubDate>Wed, 02 Aug 2023 08:52:40 -0500</pubDate>
            
            <guid>//localhost:1313/posts/tests-vs-types/</guid>
            <description>&amp;ldquo;We don&amp;rsquo;t need complex, stupid, cumbersome types and compilation to prevent bugs in production, types can&amp;rsquo;t prevent all bugs anyways. Just write more tests!&amp;rdquo; &amp;ndash; Tess
&amp;ldquo;Yes we do! We wouldn&amp;rsquo;t need to write so many complex mocks for tests that take forever to run in our CI / CD pipeline if we used a REAL language that is statically typed. &amp;quot; &amp;ndash; Tyler
As you can see from the conversation, or argument above, Tess prefers Tests and Tyler prefers types; who is correct?</description>
            <content type="html"><![CDATA[<blockquote>
<p>&ldquo;We don&rsquo;t need complex, stupid, cumbersome types and compilation to prevent bugs in production, types can&rsquo;t prevent all bugs anyways. Just write more tests!&rdquo; &ndash; Tess</p>
</blockquote>
<blockquote>
<p>&ldquo;Yes we do! We wouldn&rsquo;t need to write so many complex mocks for tests that take forever to run in our CI / CD pipeline if we used a REAL language that is statically typed. &quot; &ndash; Tyler</p>
</blockquote>
<p>As you can see from the conversation, or argument above, Tess prefers Tests and Tyler prefers types; <em>who is correct?</em></p>
<h2 id="two-sides-same-coin">Two sides; Same Coin</h2>
<p>I myself believed one side of this false dichotomy at one point. They aren&rsquo;t mutually exclusive. Now <strong>PLEASE</strong> I am not getting into the weed of TDD, type systems etc in this post. I&rsquo;m merely showing that Types cannot <em>fully</em> replace tests, generally, and tests cannot <em>fully</em> replace types, generally.</p>
<p>When I say <code>test</code> I mean <em>Black box unit testing</em>.</p>
<h2 id="the-proof-is-in-the-code">The Proof is in the Code</h2>
<p>So let&rsquo;s write a Jest test for a simple <code>sum</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;./sum&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">test</span>(<span style="color:#e6db74">&#34;adds 1 + 2 to equal 3&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">sum</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>)).<span style="color:#a6e22e">toBe</span>(<span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Here is the implementation of the <code>sum</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>;
</span></span></code></pre></div><p>So what if we write a new function to calculate the bill total at a restaurant.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">billTotal</span>(<span style="color:#a6e22e">subtotal</span>, <span style="color:#a6e22e">tax</span>, <span style="color:#a6e22e">tip</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">subtotal</span>, <span style="color:#a6e22e">tax</span>, <span style="color:#a6e22e">tip</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">billTotal</span>(<span style="color:#ae81ff">70.2</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;5%&#34;</span>);
</span></span></code></pre></div><p>Notice that we are <em>using</em> the function incorrectly. Where does our test prevent that? It doesn&rsquo;t. Sure a unit test <em>could</em> handle that but unit tests are for business logic, not type checking. Our <code>billTotal</code> function still wouldn&rsquo;t work. Yes, we could write <code>yet another test</code> to test billTotal BUT tests should verify implementation, NOT usage. This also makes it the user&rsquo;s responsibility to check that. A type system would catch this immediately, no test required.</p>
<p>With Types</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">a</span>: <span style="color:#66d9ef">number</span>, <span style="color:#a6e22e">b</span>: <span style="color:#66d9ef">number</span>)<span style="color:#f92672">:</span> <span style="color:#66d9ef">number</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="advanced-types">Advanced Types</h2>
<p>Types can do A LOT more than that. <code>Rust</code> uses Types to create safe and fast code. Prevent race conditions. In fact, <code>great</code> language like <code>OCaml</code> have types but <em>you</em> don&rsquo;t write them, they&rsquo;re inferred.</p>
<p>Types can replace logic checks. Error handling.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">TempResult</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Tempdata</span> <span style="color:#f92672">|</span> Error;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">Foo</span>(<span style="color:#a6e22e">request</span>: <span style="color:#66d9ef">Request</span>)<span style="color:#f92672">:</span> <span style="color:#a6e22e">ResultError</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">Foo</span>() <span style="color:#f92672">===</span> Error) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// handle error
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bar</span>();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">bar</span>(<span style="color:#a6e22e">temp</span>: <span style="color:#66d9ef">Tempdata</span>)<span style="color:#f92672">:</span> <span style="color:#66d9ef">bool</span> {}
</span></span></code></pre></div><h3 id="types-instead-of-garbage-collection">Types instead of Garbage Collection</h3>
<p>Rust uses its types system to prevent data races, memory leaks and many other common errors that are often prevented or cleaned up by garbage collectors and runtimes. Types systems CAN prove anything you want them to.</p>
<p>Prolog for example uses types with a SMT solver to actually fill in the blanks and solve programming problems for you!</p>
<h2 id="types-are-never-hidden">Types are never HIDDEN</h2>
<p>Many developers that write Javascript, Python, PHP or the like feel like they don&rsquo;t have to think about types; this isn&rsquo;t true. They have to constantly think about them or run into errors when they assume something has a different property than it actually does. Any API that application code calls, needs to get back a response. What is the format of that response?</p>
<h2 id="dev-speed">Dev Speed</h2>
<p>Tests and Types ultimately speed up software development. Types speed up development by documenting how the code should behave, allowing for safer refactors in the future. Types speed up development in the short-term by making it faster to write code against an API without having to look at ofter incompleted or missing documentation (source code if that fails).</p>
]]></content>
        </item>
        
        <item>
            <title>Tailwind: Debunking the Debunkers</title>
            <link>//localhost:1313/posts/tailwind-debunking-the-debunkers/</link>
            <pubDate>Tue, 01 Aug 2023 00:00:00 -0500</pubDate>
            
            <guid>//localhost:1313/posts/tailwind-debunking-the-debunkers/</guid>
            <description>I&amp;rsquo;ve seen a TON of hate for Tailwind. While I don&amp;rsquo;t care much about which technologies other developers use, I do care when developers spread lies because they are religiously for or against a particular technology. I&amp;rsquo;m not much of a technology fan-boy; I use what works for the given requirements. Don&amp;rsquo;t get me wrong, I still have plenty of strong opinions but they&amp;rsquo;re more about general techniques, attitudes etc and not about specific libraries or technologies.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve seen a TON of hate for Tailwind. While I don&rsquo;t care much about which technologies other developers use, I do care when developers spread lies because they are religiously for or against a particular technology. I&rsquo;m not much of a technology fan-boy; I use what works for the given requirements. Don&rsquo;t get me wrong, I still have plenty of strong opinions but they&rsquo;re more about general techniques, attitudes etc and not about specific libraries or technologies.</p>
<p>&ldquo;Strong opinions, loosely held&rdquo;</p>
<p>If I&rsquo;m wrong, then great! That means I get to learn something. If I know anything, according to my employer I do, it is because I&rsquo;ve been wrong and dumb for a very long time.</p>
<p>This is a long post. I&rsquo;ve been compiling all the &lsquo;debunking&rsquo; points that bloggers use against Tailwind for awhile. I&rsquo;m also not a Tailwind fan-boy. I like it, it seems to work but I thought Bootstrap and jQuery were mana from heaven at one point too.</p>
<p>I&rsquo;ll give you the TL;DR at the beginning. You&rsquo;re using Tailwind Incorrectly then calling it a bad tool because you&rsquo;re trying to force it to work within your current mental model of how CSS and styles &lsquo;should&rsquo; work. Everyone hated JSX at first too.</p>
<p>Another disclaimer, I don&rsquo;t use Tailwind at work and for my own projects I prefer styled components</p>
<h2 id="the-problem">The Problem</h2>
<p>Before we talk about Tailwind as a potential solution to CSS problems. Let&rsquo;s define the problems. BEM on the surface seems fine IF all of the components are defined ahead of time and there are little to no changes. The problem with BEM is that your CSS cares about your HTML structure which can change. Furthermore, as we all know child selectors get involved and quickly we&rsquo;re fighting with specificity.</p>
<p>The problem arises with 50,000 lines of CSS. For example, what if we have a <code>CTA-list</code> class for a call to action list. Then we want another list that is similar but show credit card benefits. Semantically, <code>cta-list</code> doesn&rsquo;t make sense anymore.</p>
<h2 id="debunking-reason-1-tailwind-is-just-inline-styles">Debunking &ldquo;Reason 1: Tailwind is just inline styles&rdquo;</h2>
<p>This one really irks me. This is a lazy opinion that shows a developer doesn&rsquo;t understand the difference between classes and inline styles. This has nothing to do with Tailwind specifically.</p>
<p>CSS Classes can:</p>
<ol>
<li>Use psuedo classes / psuedo elements</li>
<li>Use attribute selectors</li>
<li>Use media queries</li>
<li>Contain multiple styles</li>
<li>Define level of specificity</li>
<li>Class styles cascade</li>
<li>Caching: external CSS file can be cached longer that the HTML</li>
<li>Have higher preformance they are parsed onced and cached</li>
<li>Create animations</li>
<li>Uility classes can be generated</li>
<li>CSS classes can use child selectors</li>
<li>CSS classes can be reused</li>
</ol>
<p>As you can see. CSS classes are <strong>NOTHING</strong> like inline styles. Even if we make those classes fairly small and call them utility classes.</p>
<h2 id="debunking-reason-2-tailwind-promotes-ugly-ass-html">Debunking &ldquo;Reason 2: Tailwind promotes ugly-ass HTML&rdquo;</h2>
<p>I thought JSX was an abomination too at first, I was wrong as usual. You know what I find MORE ugly? A 3 MB CSS file that I have to search through to find a class I need, which is probably mispelt. I cannot remove ANY CSS because I cannot know if it is used or not. So I inevitably copy and paste a class that is similar but has the wrong semantic name, give it a new name and modify it from there. YES, &ldquo;use SASS mixins etc&rdquo;. Sure, but that actually takes time to optimize and I&rsquo;m not the only idiot touching the CSS.</p>
<p>A good remedy is <strong>Make Smaller Components</strong></p>
<blockquote>
<p>&ldquo;too many utility classes means YOUR COMPONENTS ARE TOO BIG&rdquo; &lsquo;&ndash; NatesCode</p>
</blockquote>
<p>I hated ugly HTML too. Then I realize something&hellip; YOUR COMPONENTS ARE TOO BIG. This is what I call conflating Symptoms and Problems which is a whole different post. The ugly HTML isn&rsquo;t the problem but a symptom of having too large of components. Remember S in SOLID ? Yeah CSS can do too much: style, position and animation.</p>
<p>Besides, <em>WHY DO YOU SEE THE CLASSES</em>? You should be following Atomic CSS to some degree. See the component below. Where are all the &ldquo;ugly&rdquo; Tailwind classes? They&rsquo;re hidden</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Button</span> <span style="color:#a6e22e">Variant</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">ButtonType</span>.<span style="color:#a6e22e">Primary</span>}&gt;
</span></span></code></pre></div><h3 id="style-position--layout-and-animation">Style, Position / Layout and Animation</h3>
<p>CSS can do too much. CSS should be separated into three parts</p>
<ul>
<li>Styles: font, color, weight</li>
<li>Layout: position, flexbox, grid</li>
<li>Animation</li>
</ul>
<p>Generally we are using some kind of html component system: React, Vue, Hugo, Web Components etc. so that helps with repeating styles, plus class styles do cascade.</p>
<p>I personally have used Atomic Design very successfully.</p>
<p>You can put the long styles in a variable in your framework
You can break down repeated styles (elements) into components
You can, in the cases where CSS repeats a lot, make your own components with those classes applied.
NO @apply is not the answer. If you&rsquo;re using @apply everywhere then you&rsquo;re using it wrong.</p>
<h2 id="debunking-reason-3-apply-is-fundamentally-incompatible-and-non-standard-and-largely-unnecessary">Debunking &ldquo;Reason 3: @apply is fundamentally incompatible and non-standard (and largely unnecessary).&rdquo;</h2>
<p>100% agree. STOP USING @apply everywhere. You&rsquo;re using Tailwind incorrectly and then calling it a bad tool. A flathead screwdriver makes a bad chisel but that doesn&rsquo;t make it a bad tool.</p>
<p>Why are you trying to swap out CSS frameworks regularly?! That&rsquo;s like saying BEM is bad because it requires a ton of refactoring if you switch to SMACSS.</p>
<p>FALSE, switching from Tailwind is pretty easy. I even made an NPM package so you can, called Tailwind-Eject. I&rsquo;d suggest using Tailwind-Convert (my other package that converts all your CSS to customized Tailwind with custom props and shows you how much space and rendering time you&rsquo;re saving). It reads all the Tailwind classes on your class or className attributes and creates CSS classes for them based on the file name etc.</p>
<h2 id="reason-4-tailwinds-focus-on-design-systems-and-tokens-could-mostly-be-replaced-by-css-custom-properties-aka-variableswhich-is-a-standard">Reason 4: Tailwind&rsquo;s focus on design systems and tokens could mostly be replaced by CSS Custom Properties (aka variables)—which IS a standard.</h2>
<p>So then use them WITH Tailwind!!! You supposedly use this tool for a year and didn&rsquo;t figure this out yet? I have tons of variables defined.</p>
<p>No, it can&rsquo;t. You define variables in styles. Which live where? In style sheets ! Now you&rsquo;re back to writing long CSS.</p>
<p>You want to name and type this?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">my-poorly-named-thing</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">font-size</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>my<span style="color:#f92672">-</span>font<span style="color:#f92672">-</span>size);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">font-weight</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>my<span style="color:#f92672">-</span>font<span style="color:#f92672">-</span><span style="color:#66d9ef">weight</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>or this?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">h1</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-title font-bold&#34;</span>&gt;&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span></code></pre></div><p>Which if used with <a href="https://bradfrost.com/blog/post/atomic-web-design/">Atom Design</a>, it would read like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">Title</span>&gt;&lt;/<span style="color:#f92672">Title</span>&gt;
</span></span></code></pre></div><p>No CSS in sight!</p>
<p>I know which one I&rsquo;d choose. Tailwind limits what you can do. You can&rsquo;t do anything janky.</p>
<blockquote>
<p>&ldquo;The problem is that all these tokens are defined…in JavaScript. A CSS framework. Using JavaScript for its design tokens. In 2021.&rdquo; Please don&rsquo;t tell him about CSS-in-JS or HTML-in-JS (JSX) !</p>
</blockquote>
<blockquote>
<p>&ldquo;So for example, in Tailwind you can write class=&ldquo;mb-8&rdquo; and you get a margin-bottom: 2rem style applied. But guess what you could do instead? Define :root { &ndash;spacing-8: 2rem } in your stylesheet, and then write margin-bottom: var(&ndash;spacing-8) anywhere you want. As in literally anywhere: a stylesheet, or a JS component, or even a style= attribute directly in HTML!&rdquo;</p>
</blockquote>
<p>True. Then use open props project. But then you&rsquo;re still stuck writing your own classes which will grow or writing <code>margin-bottom: var(--spacing-8)</code> inline everywhere which is even worse.</p>
<h2 id="debunking-reason-5-tailwind-forgets-that-web-components-exist">Debunking &ldquo;Reason 5: Tailwind forgets that web components exist.&rdquo;</h2>
<p>EXACTLY THE POINT! CSS should be HTML Agnostic. <a href="https://www.csszengarden.com/">CSS Zen Garden</a> was a lie.</p>
<p>He has a point but Chrome and Firefox do support linking stylesheets inside the shadow DOM now.</p>
<p>If it doesn&rsquo;t work then done use it. Again, doesn&rsquo;t mean it is a bad tool, just the wrong one for you.</p>
<h2 id="debunking-reason-6-finally-tailwind-encourages-divspan-tag-soup">Debunking &ldquo;Reason 6: Finally, Tailwind encourages div/span-tag soup.&rdquo;</h2>
<p>Okay, this is just a lazy point. If you&rsquo;re a bad dev then you&rsquo;ll use &lsquo;div/span soup&rsquo;. Tailwind is HTML agnostic. Why would more divs be created? You put classes on what needs them and many properties are inheritable.</p>
<p>See many still use BEM and Sass. What BEM gets wrong is that your CSS is structuring your HTML.</p>
<p>Arguments against Tailwind
Utility class === inline styles
Ugly HTML
@apply
no separation of concerns</p>
<p>We separate unrelated things. Your button being green, round and text bold is NOT a separate concern. I.E. JSX.
lack of support for web components: import external stylesheet. Or maybe this is a good reason to use something else.</p>
<p>arrogant to try another framework</p>
<p>renames CSS, cocky to say designers of CSS are dumb and re-design it: No</p>
<p>div / span soup: Sounds like you don&rsquo;t know how to code</p>
<p>hard to migrate: Tailwind-Eject</p>
<p>hard to maintain: ROFL, compared to what? Have you worked on enterprise 30MB CSS ?</p>
<p>It cannot do some of the basic stuff that UI frameworks offer these days, like media queries in JS (useMediaQuery). Basically what Tailwind does is compile a huge list of classes before any JS code is actually run. This means you cannot use any kind of variable value from JS. The only way to do so, is by using CSS variables and change the value of those in runtime using JS. TODO: need to do more research or make an NPM package. This may be VERY legit issue or an exception which is okay</p>
<h2 id="debunking-reason-7-no-child-selectors">Debunking &ldquo;Reason 7: No child selectors&rdquo;</h2>
<p>Again, that is like saying React is bad because you don&rsquo;t directly manipulate the DOM. That is the point! Child selectors are generally bad! Tailwind has them now, has had plugins for them as well. They&rsquo;re bad because that makes yours CSS dependent an your HTML structure, which is a bad idea. Your components already define the structure and semantics.</p>
<p>Alternative to child selectors (in ALL CSS)</p>
<ul>
<li>use inheritance (font, color etc all cascade)</li>
</ul>
<h2 id="quotes">Quotes</h2>
<p>Developer that needed a full component framework that added A11y features automatically but used a CSS Library and was disappointed by the wrong tool choice. Bad tool choice, not bad tool. I personally have built my own UI component framework with Next, React and Tailwind.</p>
<blockquote>
<p>&ldquo;I mean along the lines of html element roles, like role=button for clickable elements for screen readers, proper aria labels for label/input relationships etc. There&rsquo;s a lot, more than I care to maintain myself, so having a UI framework that takes care of that for me is a big help.&rdquo;</p>
</blockquote>
<blockquote>
<p>&ldquo;&ldquo;We also follow a rule now that says: &ldquo;Keep related things together&rdquo; because it makes things easier to find and understand for new devs.&rdquo;</p>
</blockquote>
<p>You mean like utility classes? (I said this but the developer couldn&rsquo;t accept that)</p>
<p>What about Accessibility?</p>
<p>This was a great counter-point. We had a bit of a heated debate about Tailwind. It was clear he was burnt out by a team that didn&rsquo;t use Tailwind correctly and didn&rsquo;t think about accessibility in their HTML components; something that is lacking.</p>
<p>So what do we do about the HTML part of accessibility?</p>
<ul>
<li>RADIX</li>
<li>Headless UI</li>
<li>Mantine (my presonal favorite)</li>
</ul>
<p>Tailwind is a CSS library, NOT a component library.</p>
<p>Tailwind&rsquo;s killer feature, IMHO
I think Tailwind is GREAT if one is working on a large team with developers that might not have great CSS skills. You don&rsquo;t have to worry about someone copying and pasting a class then renaming it and slightly modifying it. Also, English isn&rsquo;t everyone&rsquo;s first language and spelling mistakes can and do happen. Which makes finding a class by name almost impossible (Yes, I&rsquo;ve run into this MANY times. A good reason to enforce spelll checking in PRs).</p>
<p>Yes, SASS mixins exist but I have rarely seen them consistently done well. That is the killer feature for me. Devs can use tailwind-config-viewer and see 100% of all the classes instantly. Everything is already documented.</p>
<h2 id="why-im-not-using-tailwind">Why I&rsquo;m NOT using Tailwind</h2>
<p>Some of the negatives are true. It bloats HTML and it is an abstraction that I personally don&rsquo;t think is necessary. I&rsquo;m experimenting with using styled components + CSS Linters + subset CSS (plugin that restricts the usage of CSS and using CSS props to get that benefit that Tailwind does have).</p>
<p>I prefer linters / parsers automatically checking and preventing mistake than having to write 30 css classes. Tailwind can&rsquo;t do 100% of what normal CSS can do either. There are just some things that must or should be done in pure regular non-utility CSS. I&rsquo;m a bit of a purist so we&rsquo;ll see how that goes! I think this approach, or something similar will be closer to what Theo calls &ldquo;Safety Nets&rdquo; and less of &ldquo;Guard Rails&rdquo;.</p>
<h2 id="disingenuous-or-stupid">Disingenuous or Stupid?</h2>
<p>Let&rsquo;s look at some code from yet another Medium article claiming Tailwind bloats HTML, spoiler alert ALL CSS IS BAD WHEN YOU DON&rsquo;T UNDERSTAND CASCADING.</p>
<p>HE&rsquo;S EITHER LYING and over-exaggerating to make his point or genuinely shouldn&rsquo;t be allowed to write CSS for a living. I was able to clean up this code by 30%!!! Remember Tailwind is just CSS. So blaming the tool here doesn&rsquo;t matter.</p>
<p>PLEASE if you&rsquo;re gonna hate a tool, at least don&rsquo;t make yourself look like an incompetent dev doing it.</p>
<p>You can see the original code at the [https://javascript.plainenglish.io/tailwind-is-an-anti-pattern-ed3f64f565f0](author&rsquo;s post here).</p>
<p>The author&rsquo;s disingenous CSS.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden md:block md:ml-10 md:pr-4 md:space-x-8&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-gray-500 hover:text-gray-900&#34;</span>&gt;Product&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-gray-500 hover:text-gray-900&#34;</span>&gt;Features&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-gray-500 hover:text-gray-900&#34;</span>&gt;Marketplace&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-gray-500 hover:text-gray-900&#34;</span>&gt;Company&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-medium text-indigo-600 hover:text-indigo-500&#34;</span>&gt;Log in&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>I would instantly deny this pull-request. Firstly, I know this is just an example but 99% of the time the links would be data-driven which remove all of the repetition anyways. Secondly, we CAN remove the repetition by using the <code>C</code> in <code>CSS</code>. Font size, colors etc all cascade. So we can put them on the parent. That&rsquo;s is the beautiful thing about utility classes in CSS, they ALL have the same specificity! We don&rsquo;t have to worry about some random selector on line 13,370 that does <code>div &gt; a</code> overriding our styles.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden md:block md:ml-10 md:pr-4 md:space-x-8 font-medium text-gray-500 hover:text-hover-gray-900&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>&gt;Product&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>&gt;Features&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>&gt;Marketplace&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>&gt;Company&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text-indigo-600 hover:text-indigo-500&#34;</span>&gt;Log in&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>SO much cleaner already! Now, unless you&rsquo;re doing PHP and JQuery like it is 2007, you&rsquo;re most likely going to break down this into sematic components. Those could be web components, React or Vue components.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">Navigation-Desktop</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span>&gt;Product&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span>&gt;Features&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span>&gt;Marketplace&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span>&gt;Company&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Link</span> <span style="color:#a6e22e">Selected</span>&gt;Log in&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>Where is all the <code>ugly ass HTML</code> you mentioned? Again, the component has the structure and semantics, NOT the styles.</p>
<h2 id="not-a-panacea">Not a panacea</h2>
<p>VERY few people anti-tailwind bloggers actually have valid negative points against Tailwind. They&rsquo;re not compenent enough to development a decent argument for or against it. Tailwind is by far no panacea. Because I claim to be unbias, I&rsquo;m going to give my negatives against Tailwind, based on actual exprience and understand how enterprise CSS projects work.</p>
<ul>
<li>No way to prevent arbitrary <code>[100px]</code> values being used. SERIOUSLY!?</li>
<li>DSL still requires a bit of learning.</li>
<li>Bloated if hard link from a CDN. It doesn&rsquo;t work well without pre-processing and JIT to only generate the styles you need.</li>
<li>Utility classes don&rsquo;t support 100% of the capabilities of CSS (child selectors are just bad).</li>
<li>YET ANOTHER build step</li>
<li>Cannot do EVERYTHING that plain CSS can do</li>
<li>Styled Components are better in every way.</li>
</ul>
<h2 id="the-perfect-css-tool">The Perfect CSS tool</h2>
<ul>
<li>No DSL to learn</li>
<li>No runtime overhead</li>
<li>Little to no build step</li>
<li>co-location with HTML &amp; JS</li>
</ul>
<p>The only way to do this is native CSS. I think a close second is styled components with some linter plugins, which is my new approach I&rsquo;m trying.</p>
<p>So PLEASE if you&rsquo;re going to rebuttal, do it from a point of logic and competence. I&rsquo;m not even using tailwind for this blog.</p>
<p>Cheers!</p>
]]></content>
        </item>
        
        <item>
            <title>Software Softskills</title>
            <link>//localhost:1313/posts/software-softskills/</link>
            <pubDate>Sun, 09 Jul 2023 17:50:45 -0500</pubDate>
            
            <guid>//localhost:1313/posts/software-softskills/</guid>
            <description>Software despite the stereotypes, does require soft skills. Software products have millions of lines of code. One developer cannot possibly write that themselves. Collaboration is necessary. I&amp;rsquo;ve never been afraid to present or voice my opinion.
This is a fitting post because I recently landed my first lead / architect position where I&amp;rsquo;ll be spending 70% of my time with people and 30% with code. The first time in 10 years that I won&amp;rsquo;t be slinging code 40 hours per week.</description>
            <content type="html"><![CDATA[<p>Software despite the stereotypes, does require soft skills. Software products have millions of lines of code. One developer cannot
possibly write that themselves. Collaboration is necessary. I&rsquo;ve never been afraid to present or voice my opinion.</p>
<p>This is a fitting post because I recently landed my first lead / architect position where I&rsquo;ll be spending 70% of my time with people and 30% with code. The first time in 10 years that I won&rsquo;t be slinging code 40 hours per week. I&rsquo;m really excited. I&rsquo;ll still be helping my team, writing code, but I&rsquo;ll also be mentoring, architecting and guiding the project to success and completion.</p>
]]></content>
        </item>
        
        <item>
            <title>Silicon Part 1</title>
            <link>//localhost:1313/posts/silicon/si-1/</link>
            <pubDate>Wed, 21 Jun 2023 15:36:46 -0700</pubDate>
            
            <guid>//localhost:1313/posts/silicon/si-1/</guid>
            <description>Implementation Details aka HOW? For a more serious project, the intepreter / compiler, in this case Sigil, needs to be written in some language. A parser generator is also a REALLY good idea because you can then have a single document that specifies the language&amp;rsquo;s grammar and the implemenation can be changes more easily by changing the grammar and adding a little bit of code. Historically, the best languages for this task include: C, C++, OCaML, and Rust.</description>
            <content type="html"><![CDATA[<h2 id="implementation-details-aka-how">Implementation Details aka HOW?</h2>
<p>For a more serious project, the intepreter / compiler, in this case Sigil, needs to be written in some language. A parser generator is also a REALLY good idea because you can then have a single document that specifies the language&rsquo;s grammar and the implemenation can be changes more easily by changing the grammar and adding a little bit of code. Historically, the <em>best</em> languages for this task include: C, C++, OCaML, and Rust. I say <em>best</em> because these languages have good LLVM api support, parser generators and Ocaml and Rust have pattern matching and sum types which help a lot.</p>
<p>Since Sigil doesn&rsquo;t output native binaries for hardware like X86 or ARM, Sigil doesn&rsquo;t care about LLVM or other projects. SIMPLER!</p>
<pre><code>NOTE
  Absolutely nothing against LLVM, clang etc which take intermediate language code and optimive and target hardware (and can JIT too) but they're complex to work with, can have limitation on what the language does (Rust ran into this) and are yet another moving dependency (Go philosophy) that isn't actually needed here.
</code></pre>
<p>Silicon <em>can</em> indirectly target native by using tools that use LLVM to compile WASM binaries to native code. Again, standing on the shoulder of giants is our goal.</p>
<p>A PROJECT goal that isn&rsquo;t really a goal of the implementation is eventually getting help from others. I&rsquo;m sure I could get plenty of people to help me write it in Rust but since</p>
<ol>
<li>I&rsquo;m still new to R*st</li>
<li>The R*st foundation is evil</li>
<li>The project will be boostrapped within the first year anyways. So quick interation is priority over speed and memory safety.</li>
<li>More developers know Ecmascript or Typescript.</li>
<li>Typescript is the best language for the job out of the languages I know (Go, Python, C#, Java, JS/TS) and finally</li>
<li>There is a really good PEG parser generator written in JS / TS called <code>ohm.js</code>. I&rsquo;ll be using Ecmascript / Typescript for the initial language.</li>
<li>JS runs in the browser so the Sigil can be easily deployed to make a playground for others to try out the language easily (like the Go playground). Which helps with adoption.</li>
</ol>
<h2 id="tools">Tools</h2>
<p>I believe in working backwards. I had my requirements for a parser Generator: be in a language I know, work in the web, support PEG grammar, be flexible. The
best fit is <code>Ohmjs</code>. JS is easy, is runs in the browser and really is good enough, well Typescript is anyways. OHM more than makes up for the fact it uses Javascript. I&rsquo;ll explain more later.</p>
]]></content>
        </item>
        
        <item>
            <title>Silicon Part 3</title>
            <link>//localhost:1313/posts/silicon/si-3/</link>
            <pubDate>Wed, 21 Jun 2023 15:36:46 -0700</pubDate>
            
            <guid>//localhost:1313/posts/silicon/si-3/</guid>
            <description>Features List TYPES
ADTs that use @sum keyword not enum or union Typeclasses / Traits Interfaces that are structurally typed Monads with Monad Trait Type constraints OOP
@struct value type, public fields, no constructor, no pointers / references @class reference type, private fields, (de)constructor, pointers / reference types OPTIMIZATIONS
Data Oriented Design like Zig explicit tail-recursion optimization @rec structural interfaces like Go
Traits / Typeclasses like Rust or OCaml
built-in testing (unit, ui, fuzzing, benchmark, E2E)</description>
            <content type="html"><![CDATA[<h1 id="features-list">Features List</h1>
<ul>
<li>
<p>TYPES</p>
<ul>
<li>ADTs that use <code>@sum</code> keyword not <code>enum</code> or <code>union</code></li>
<li>Typeclasses / Traits</li>
<li>Interfaces that are structurally typed</li>
<li>Monads with Monad Trait</li>
<li>Type constraints</li>
</ul>
</li>
<li>
<p>OOP</p>
<ul>
<li><code>@struct</code> value type, public fields, no constructor, no pointers / references</li>
<li><code>@class</code> reference type, private fields, (de)constructor, pointers / reference types</li>
</ul>
</li>
<li>
<p>OPTIMIZATIONS</p>
<ul>
<li>Data Oriented Design like <code>Zig</code></li>
<li>explicit tail-recursion optimization <code>@rec</code></li>
</ul>
</li>
<li>
<p><del>structural interfaces like <code>Go</code></del></p>
</li>
<li>
<p>Traits / Typeclasses like <code>Rust</code> or <code>OCaml</code></p>
</li>
<li>
<p>built-in testing (unit, ui, fuzzing, benchmark, E2E)</p>
</li>
<li>
<p>ML FEATURES</p>
<ul>
<li>optional partial function application <code>Haskell</code></li>
<li>pattern matching with <code>@match</code></li>
</ul>
</li>
<li>
<p>generics like <code>C#</code></p>
</li>
<li>
<p>structs and classes</p>
</li>
<li>
<p>File system based module system</p>
</li>
<li>
<p>MACROS</p>
<ul>
<li>language macros liku <code>Lisp</code></li>
<li>comptime like <code>Zig</code></li>
</ul>
</li>
<li>
<p>SYNTAX</p>
<ul>
<li>series / range operator <code>1..10</code></li>
<li>negative indices <code>array[-1]</code> // or <code>#array.tail 1</code></li>
<li>Auto semicolon insertion</li>
<li>No extra parens</li>
<li>no <code>&lt;&gt;</code> for generics. Use <code>'T</code> or <code>::type</code> syntax instead</li>
</ul>
</li>
<li>
<p>ITERATORS &amp; LOOPS</p>
<ul>
<li>internal &amp; external iterators like <code>Ruby</code></li>
<li>non-local return (keyword, enum or possibly labels via Symbols?) like <code>Zig</code></li>
<li>All-Purpose <code>@for</code> loops with series kinda like <code>Zig</code> or <code>Go</code></li>
</ul>
</li>
<li>
<p>CONCURRENCY</p>
<ul>
<li>fully asymmetric coroutines with optional channels (multiple independent call stacks) like <code>Lua</code></li>
</ul>
</li>
<li>
<p>MEMORY MANAGEMENT</p>
<ul>
<li>locality for stack based memory like <code>Janestreet Ocaml</code>
<ul>
<li><code>@local</code> and <code>@global</code> keeps type system easy to use</li>
</ul>
</li>
<li>Reference counting, Unique pointers like <code>C++</code> and <code>Rust</code></li>
<li>Optional GC, tracing, generational and arena allocation</li>
<li>custom allocators like <code>Zig</code></li>
<li><del>*Lifetimes won&rsquo;t be types and they&rsquo;ll all be inferred</del></li>
</ul>
</li>
<li>
<p>BUILD SYSTEM</p>
<ul>
<li>targets WASM &amp; Zig</li>
<li>FAST builds!</li>
<li>WEB, Node + Express, WASI(X) and POSIX APIs</li>
<li>Web APIs, Node APIs and WASIX are priority.</li>
</ul>
</li>
</ul>
<h2 id="noteable-non-features">Noteable NON-FEATURES</h2>
<ul>
<li>inheritance (later only single inheritance of <code>abstract</code> classes)</li>
<li>real classes / <code>new</code> keyword</li>
<li>so async / await all the way</li>
<li>Borrower Checker</li>
</ul>
<h3 id="non-local-return">Non-local return</h3>
<p>Using internal iterator Symbol. Like labeled-for in Zig but the label name can be passed.</p>
<p><strong>Nov 4,2023</strong> Likely will do with with values since there are only implicit returns in Silicon now.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span>    <span style="color:#75715e">/// array, fn -&gt; void
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">@fn</span> <span style="color:#a6e22e">map</span> <span style="color:#a6e22e">array</span>,<span style="color:#a6e22e">func</span> {
</span></span><span style="display:flex;"><span>       <span style="color:#a6e22e">$outer</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">@for</span> <span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">length</span>, <span style="color:#a6e22e">$item</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// pass current item
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#75715e">// AND the label for the for-loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#a6e22e">func</span>(<span style="color:#a6e22e">$item</span>, <span style="color:#a6e22e">$outer</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">fn</span>(<span style="color:#a6e22e">item</span>,<span style="color:#a6e22e">$label</span>){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">item</span> <span style="color:#f92672">===</span> <span style="color:#66d9ef">null</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span> <span style="color:#a6e22e">$label</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    })
</span></span></code></pre></div><h3 id="generics">Generics</h3>
<p>Real runtime Generics like C#.</p>
<p>C</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> reverse&lt;T&gt;(T[] collection){
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// reverse</span>
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Si</p>
<p>Si doesn&rsquo;t need the Generic Type parameter because it is assumed. . . is that possible?</p>
<pre tabindex="0"><code class="language-silicon" data-lang="silicon">    /// []T -&gt; void
    @fn reverse:void collection:[&#39;t]
        // code
    @
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Silicon Part 0</title>
            <link>//localhost:1313/posts/silicon/si-0/</link>
            <pubDate>Wed, 21 Jun 2023 15:33:29 -0700</pubDate>
            
            <guid>//localhost:1313/posts/silicon/si-0/</guid>
            <description>This is part 0 of a new series that documents my journey developing my own production-grade compiler, sigil, for my programming language, Silicon, that targets WASM.
This post will cover high-level goals,and non-goals.
Language Design Step 0 was learning how interpreters and compilers work. Following the interpreter book, I just implemented an interpreter and compiler for an already created language, Monkey; the language was created for the book.
What about my own language?</description>
            <content type="html"><![CDATA[<p>This is part 0 of a new series that documents my journey developing my own production-grade compiler, sigil, for my programming language, Silicon, that targets WASM.</p>
<p>This post will cover high-level goals,and non-goals.</p>
<h2 id="language-design">Language Design</h2>
<p>Step 0 was learning how interpreters and compilers work. Following the interpreter book, I just implemented an interpreter and compiler for an already created language, Monkey; the language was created for the book.</p>
<p>What about my own language? That is <strong>REALLY</strong> difficult. First, I started with <em>sillyscript</em> which was just a fun C-like scripting language of my own.</p>
<p>Once I got serious, I needed a goal.</p>
<h3 id="the-prime-directive">The Prime Directive</h3>
<p>Every project needs some high level goals to guide it. This simplifies the decision process. For example, if ease of use is a priority then a garbage collector is a great idea.</p>
<p>If performance at all costs is the goal, then no GC for you!</p>
<p>My goal was to replace javascript as the only <em>good</em> full-stack language. There are plenty of great server-side languages but they all suck as client web languages. WASM (Web Assembly) was created and allowed C/C++ and Rust to work in the browser but those aren&rsquo;t really great to work in; especially C++. Rust isn&rsquo;t bad mind you, just not ideal in my humble opinion. C# has gotten much better with Blazor but still leaves Rust to be desired.</p>
<p>WASM doesn&rsquo;t have GC yet so Rust is your best bet really.</p>
<p>I wanted a language that was like Go, Rust, Zig and ML that could work with or without a GC and had all the great ML abstractions like pattern matching, sum types and type inference.</p>
<p>So that is how <em>Silicon</em> and <em>Sigil</em> were born. <em>Silicon</em> is the <strong>language</strong> while <em>Sigil</em> is the <strong>toolchain</strong>: compiler, interpreter, formatter, package manager, build system etc..</p>
<p>I read a non-academic paper by a brilliant software engineer, Johnathan Goodwin, on the concept of <em>gradual memory management</em>, which means a language <em>could</em> be both garbage collected, manual memory managed (C), borrower checked (Rust) and have custom allocators (like Zig). While mixing memory management techniques isn&rsquo;t new, there are GCs for C and C++ has smart pointers etc. The paper really laid out how to do gradual memory management to a MUCH larger extent. I knew this is what I wanted to do because WASM doesn&rsquo;t have a GC yet and the low-level control would be useful for keeping load times low. Yes, I could always compile to Javascript, but that wasn&rsquo;t really my goal here.</p>
<h3 id="the-user-story">The User Story</h3>
<p><strong>AS A</strong> <em>developer</em></p>
<p><strong>I WANT TO</strong> <em>code in a WASM optimized language</em></p>
<p><strong>SO THAT</strong> <em>I can build robust full-stack websites and mobile application without Javascript while reusing existing code in other language and being able to use Silicon (WASM) in any language I want</em></p>
<h3 id="the-non-goals">The NON-GOALS</h3>
<p>I think these are important as well to prevent scope creep.</p>
<p>Silicon doesn&rsquo;t care about non-wasm / non-JS environments nor about compiling to native, that can be done after you get a WASM binary anyways.</p>
<ul>
<li>don&rsquo;t target anything but WASM &amp; Ecmascript (I&rsquo;m sure I&rsquo;ll have to sadly)</li>
<li>no optimizations (WASM tooling)</li>
<li>no native compilation</li>
<li>no WASM interpreter / runtime / package manager (see WASMER, WASMTIME, WAPM etc)</li>
</ul>
<p>This makes my job as the solo developer on Sigil MUCH easer, still hard, but orders of magnitude easier. Even package management is currently a non-goal since WAPM exists within WASMER (I don&rsquo;t know if it&rsquo;ll suffice but we&rsquo;ll see).</p>
<p>Silicon is purposely a leaky abstraction for WASM.</p>
<p>Silicon&rsquo;s primitive types are meant to easily work with WASM, and Javascript.</p>
<p>Silicon primitive types</p>
<pre><code>atom = type with only one value, itself. I.E `$true`. Maps to JS symbol, sorta. (useful).

bool = sum type of `$true` and `$false' atoms. Maps to JS bool and WASM int.

opaque = type that hides internal implementation (WASM).

int = LEB128 variable length integer. Maps to Javascript BigInt (WASM).

float = IEEE 754 float. Maps to JS number or WASM float 32/64.

&lt;!-- rune = NOT a character. Represents a single unicode code point. --&gt;
&lt;!-- char = no character type because it is poorly defined --&gt;

string = UTF-16 string maps to JS string and WASM int 32/64.

// null / undefined = optionals are used instead
</code></pre>
<h2 id="grammar-syntax-etc">Grammar, Syntax etc</h2>
<p>Grammar, Syntax etc are really important. I&rsquo;ve spent a long time thinking about how syntax affects future features. As I tell my students, the sign of good code is that is can easily handle changing requirements. What if Silicon adds 3 new keywords? Will they conflict with existing identifiers? What if a new
language construct is added? Does the syntax for generics require infinite lookahead? (Yes, if you use <code>&lt;&gt;</code>).</p>
<h3 id="simple-is-safe">Simple is safe</h3>
<p>Simplicity is safety. If the grammar is simple BUT flexible, then future changes won&rsquo;t have major consequences with parsing, coding, reasoning or migration of code bases.</p>
<p>Silicon doesn&rsquo;t have unary operators <code>x++</code>, <code>x--</code>,<code>-5</code>.
ALL of Silicon&rsquo;s grammar constructs are either built-in functions are definitions with <code>=</code> syntax.</p>
<p>The grammar is painfully simple and straightforward. I&rsquo;ve even removed operator precedence! (I&rsquo;m completely mad I know).</p>
<p><a href="/si-1">Part 2</a> will cover implemetation tools.</p>
]]></content>
        </item>
        
        <item>
            <title>Making a Programming Language</title>
            <link>//localhost:1313/posts/making-a-programming-language/</link>
            <pubDate>Wed, 21 Jun 2023 14:06:47 -0700</pubDate>
            
            <guid>//localhost:1313/posts/making-a-programming-language/</guid>
            <description>Where do programming languages come from? Could I make my own?
These are the questions the lead me on a journey to learn DSA, interpreters, compilers and more!
While C++ was my first programming language, I was self-taught in high-school and then didn&amp;rsquo;t code for a few years. I never learned DSA or computer science in my programming two-year degree. I learned web development and 7 programming languages though.
Once I landed my first job, I felt imposter syndrome.</description>
            <content type="html"><![CDATA[<p>Where do programming languages come from? Could I make my own?</p>
<p>These are the questions the lead me on a journey to learn DSA, interpreters, compilers and more!</p>
<p>While C++ was my first programming language, I was self-taught in high-school and then didn&rsquo;t code for a few years. I never learned DSA or computer science in my programming two-year degree. I learned web development and 7 programming languages though.</p>
<p>Once I landed my first job, I felt imposter syndrome. Especially since I somehow got a job with an amazing local company that had a great reputation. Everyone else had 4 year degrees or where mathematicians. I was just a stupid nerd that coded a bit in highschool so I could do my math homework faster, and make games so I could screw around with my friends more.</p>
<p>So I let curiousity teach me. There were plenty of classic C tutorials, which I recommend. The best I found was a book <em>Writing an Interpreter in Go</em> by Thorsten Ball. I like it because it is simple, clear and uses Go which I was learning at the time and Go is a REALLY simple but effective language (think C but easier).</p>
<h2 id="language-design">Language Design</h2>
<p>Step 0 was learning how interpreters and compilers work. Following the interpreter book, I just implemented an interpreter and compiler for an already created language, Monkey; the language was created for the book.</p>
<p>What about my own language? That is <strong>REALLY</strong> difficult. First, I started with <em>sillyscript</em> which was just a fun C-like scripting language of my own.</p>
<p>Once I got serious, I needed a goal.</p>
<h3 id="the-prime-directive">The Prime Directive</h3>
<p>Every project needs some high level goals to guide it. This simplifies the decision process. For example, if ease of use is a priority then a garbage collector is a great idea and pointer are not.</p>
<p>If performance at all costs is the goal, then no GC for you!</p>
<p>My goal was to replace javascript as the only <em>good</em> full-stack language. There are plenty of great server-side languages but they all suck as client web languages. WASM (Web Assembly) was created and allowed C/C++ and Rust to work in the browser but those are really great to work in; especially C++. Rust isn&rsquo;t bad mind you, just not ideal in my humble opinion.</p>
<p>WASM doesn&rsquo;t have GC yet so Rust is your best bet really, especially now.</p>
<p>I wanted a language that was like Go, Rust, Zig and ML that could work with or without a GC and had all the great ML abstractions like pattern matching, algebraic data types and type inference.</p>
<p>So that is how <em>Silicon</em> and <em>Sigil</em> were born. <em>Silicon</em> is the <strong>language</strong> while <em>Sigil</em> is the <strong>toolchain</strong>: compiler, interpreter, formatter, package manager, build system etc..</p>
<p>I read a non-academic paper by a brilliant software engineer, Johnathan Goodwin, on the concept of <em>gradual memory management</em>, which means a language <em>could</em> be both garbage collected, manual memory managed (C), borrower checked (Rust) and have custom allocators (like Zig). While mixing memory management techniques isn&rsquo;t new, there are GCs for C and C++ has smart pointers etc. The paper really laid out how to do gradual memory management to a MUCH larger extent. I knew this is what I wanted to do because WASM doesn&rsquo;t have a GC yet and the low-level control would be useful for keeping load times low. Yes, I could always compile to Javascript, but that wasn&rsquo;t really my goal here.</p>
<h3 id="the-user-story">The User Story</h3>
<p><strong>AS A</strong> <em>developer</em></p>
<p><strong>I WANT TO</strong> <em>code in a WASM optimized language</em></p>
<p><strong>SO THAT</strong> <em>I can build robust full-stack websites and mobile application without Javascript while still using all the same APIs: Web APIs and Node APIs.</em></p>
<h3 id="the-non-goals">The NON-GOALS</h3>
<p>I think these are important as well to prevent scope creep.</p>
<p>Silicon doesn&rsquo;t care about non-wasm environment nor about compiling to native, that can be done after you get a WASM binary anyways.</p>
<ul>
<li>don&rsquo;t target anything but WASM</li>
<li>no optimizations</li>
<li>no native compilation</li>
<li>no WASM interpreter / runtime (see WASMER, WASMTIME etc)</li>
</ul>
<p>This make my job as the solo developer on Sigil MUCH easer, still hard, but orders of magnitude easier. Even package management is currently a non-goal since WAPM exists within WASMER.</p>
<p>Silicon is a leaky abstraction for WASM, just like C is a leaky abstraction for assembly.</p>
<p>Silicon&rsquo;s primitive types are meant to easily work with WASM, and Javascript.</p>
<p>Silicon primitive types</p>
<pre><code>atom = type with only one value, itself. I.E true. Maps to JS symbol, sorta. (useful)

bool = sum type of `true` and `false' atoms. Maps to JS bool and wasm int.

externfunc = type that hide internal implementation (WASM)

int = LEB128 variable length integer. Maps to Javascript BigInt (WASM)

float = IEEE 754 float. Maps to JS number or WASM float 32/64.

decimal = backed by LEB128. 

//char = no character type because it is poorly defined

string = UTF-16 string maps to JS string

// null / undefined = optionals are used instead
</code></pre>
<h2 id="implementation-details-aka-how">Implementation Details aka HOW?</h2>
<p>For a more serious project, the intepreter / compiler, in this case Sigil, needs to be written in some language. A parser generator is also a REALLY good idea because you can then have a single document that specifies the language&rsquo;s grammar and the implemenation can be changes more easily by changing the grammar and adding a little bit of code.</p>
<p>Since Sigil doesn&rsquo;t output native binaries for hardware like X86 or ARM, Sigil doesn&rsquo;t care about LLVM or other projects. SIMPLER!</p>
<pre><code>NOTE
  Absolutely nothing against LLVM, clang etc which take intermediate language code and optimive and target hardware (and can JIT too) but they're complex to work with, can have limitation on what the language does (Rust ran into this) and are yet another moving dependency (Go philosophy) that isn't actually needed here.
</code></pre>
<p>Silicon <em>can</em> indirectly target native by using tools that use LLVM to compile WASM binaries to native code. Again, standing on the shoulder of giants is our goal.</p>
<p>In fact, Sigil does ZERO optimizations! <strong>GASP</strong> because, again, Sigil only care about getting Silicon source code into WASM. There are other tools to work with WASM and interprete it, optimize it, JIT it, compile it or translate it to C. WASMER even has <code>wapm</code> which is a WASM package manager! Yet another tool I don&rsquo;t need to build (though I&rsquo;ll likely make a Silicon specific package manager later).</p>
]]></content>
        </item>
        
        <item>
            <title>Coding From Scratch</title>
            <link>//localhost:1313/posts/coding-from-scratch/</link>
            <pubDate>Sat, 08 Apr 2023 16:06:14 -0500</pubDate>
            
            <guid>//localhost:1313/posts/coding-from-scratch/</guid>
            <description>&amp;ldquo;Where do I even begin?&amp;rdquo; and &amp;ldquo;I have no idea how to code this&amp;rdquo; are common thoughts or comments from my students.
Let&amp;rsquo;s go over a design for a simple game, Tic-Tac-Toe (naught and crosses for my friends across the pond).
Don&amp;rsquo;t worry, we won&amp;rsquo;t be using React, npm or any tooling. Just plain ol&amp;rsquo; Javascript, CSS and HTML.
The Design Here is the design file.
I want you, the reader, to think about the different elements of the design.</description>
            <content type="html"><![CDATA[<p>&ldquo;Where do I even begin?&rdquo; and &ldquo;I have no idea how to code this&rdquo; are common thoughts or comments from my students.</p>
<p>Let&rsquo;s go over a design for a simple game, Tic-Tac-Toe (naught and crosses for my friends across the pond).</p>
<p>Don&rsquo;t worry, we won&rsquo;t be using React, npm or any tooling. Just plain ol&rsquo; Javascript, CSS and HTML.</p>
<h2 id="the-design">The Design</h2>
<p>Here is the design <img> file.</p>
<p>I want you, the reader, to think about the different elements of the design. Which HTML tags will you use? How should the
board be broken up?</p>
<p>Start with high level thinking. There are 9 squares arranged in 3 rows of 3 squares.</p>
<p>Take your time and think about it. Use <a href="https:www.codepen.io">codepen.io</a>. Remember, even for a simple design like this, there are numerous correct ways
to design it. My way isn&rsquo;t the highway. I can guarantee my code won&rsquo;t be perfect.</p>
<h2 id="tho-user-stories">Tho User Stories</h2>
<p>I&rsquo;ve created user stories on <a href="/">my trello</a>. You can copy them to your own Trello board and work on them yourself. User Stories are how professional developers break down tasks.</p>
<h2 id="the-mvp">The MVP</h2>
<p>Agile talks about <em>incremental value</em>. So let&rsquo;s assume we want a lot more functionality but we&rsquo;re going to do it later. We will only have a board and the ability for pass-and-play mode. No win condition checks either.</p>
<h2 id="the-pseudo-code">The PSEUDO code</h2>
<p>Again, I write code comments / psuedo code before I worry about actual code. Let&rsquo;s do that here.</p>
<h3 id="html">HTML</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-HTML" data-lang="HTML"><span style="display:flex;"><span>// document
</span></span><span style="display:flex;"><span>// game title
</span></span><span style="display:flex;"><span>// turn counter
</span></span><span style="display:flex;"><span>// reset button
</span></span><span style="display:flex;"><span>// game board
</span></span><span style="display:flex;"><span>// 3 rows
</span></span><span style="display:flex;"><span>// 3 columns in each row
</span></span></code></pre></div><p>Now let&rsquo;s translate that into code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- game title --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">h1</span>&gt;Tic Tac Toe&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- turn counter --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>&gt;Turn: &lt;/<span style="color:#f92672">label</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;turn&#34;</span>&gt;1&lt;/<span style="color:#f92672">span</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- reset button --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">button</span> <span style="color:#a6e22e">onclick</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;reset()&#34;</span>&gt;Reset&lt;/<span style="color:#f92672">button</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- game board --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;board&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!-- three rows --&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!-- column 1 --&gt;</span>
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;square&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;square&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;square&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!-- column 2 --&gt;</span>
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;square&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;square&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;square&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!-- column 3 --&gt;</span>
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;square&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;square&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;square&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>Hopefully that is pretty straight forward. A beginner might be tempted to make literal row classes. Do we need the code to ever think about rows and columns, or just squares?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rows&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><h3 id="css">CSS</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">//</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Two Crystal Balls Problem</title>
            <link>//localhost:1313/posts/two-crystal-ball-problem/</link>
            <pubDate>Wed, 29 Mar 2023 02:12:10 -0500</pubDate>
            
            <guid>//localhost:1313/posts/two-crystal-ball-problem/</guid>
            <description>This is a famous software engineering interview question from Google. I thought I&amp;rsquo;d provide my explanation that is borderline pedantic. Let&amp;rsquo;s solve this problem as naively as possible then again with nothing more than highschool maths.
The Problem There are a few different versions of this question. Sometimes it is crystal balls, or eggs or something else.
There is a 100 story building. We have two magic glass orbs. The orbs will only break at or above floor X.</description>
            <content type="html"><![CDATA[<p>This is a famous software engineering interview question from Google. I thought I&rsquo;d provide my explanation that is borderline pedantic. Let&rsquo;s solve
this problem as naively as possible then again with nothing more than highschool maths.</p>
<h2 id="the-problem">The Problem</h2>
<p>There are a few different versions of this question. Sometimes it is crystal balls, or eggs or something else.</p>
<p>There is a 100 story building. We have two magic glass orbs. The orbs will only break at or above floor X. We need to find what floor X is, in as few drops as possible. No matter how many times we drop an orb, it will only break at or above floor X. We are given two orbs. What is the fewest drops to find the floor no matter what the floor is? We are trying to minimize the worst case here.</p>
<h2 id="the-worst-case-scenario">The Worst Case Scenario</h2>
<p>What make this problem unique is that we have limited failed tries, 2, and must optimize for the worst case-scenario more than the average runtime. I think that is an important concept to highlight.</p>
<h2 id="naive">Naive</h2>
<h3 id="simplify-the-problem">Simplify the problem</h3>
<p>If we only had one ball, then we&rsquo;d just have to start at the bottom floor and work our way up. If we had infinite balls, we could just do a binary search and we&rsquo;d only need log(n) balls at most (7 balls for 100 floor) But 2? HMM. So obviously, once the second orb breaks, we&rsquo;ll be falling back to the floor-by-floor algorithm.</p>
<h3 id="first-thoughts">First thoughts</h3>
<p>Most will first think about cutting the floors in half. So let&rsquo;s do that. Give a building with N floor, n=100 here, we start at floor 50 (n/2), if the ball breaks, then we check from 1-49. If the ball doesn&rsquo;t break, then we check 51-100. So we broke the building into 2 sections of size 50. The worst case is 51.</p>
<blockquote>
<p><strong>NOTE</strong> I&rsquo;m being less efficient in the first example on purpose. If we check floor 50 and the orb doesn&rsquo;t break, then we can continue doing a binary search 50 75 88 94 97 99 100 which is 7 drops. The worst case is 50 then.</p>
</blockquote>
<p>We might realize we could break the building up into differently sized sections.</p>
<p>If we break it into 4 sections of 25 then our worst case is 25+4-1 = 28.</p>
<p><code>25,50,75,100,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99</code></p>
<p>WE can see the pattern and make a formula. sections, S, and section size B. So tries, T make is</p>
<p>$$where \ S \ and \ B \ are \ factors \ of \ N$$
$$T=S+B-1$$</p>
<p>So we can manually find a <strong>good</strong> solution</p>
<pre><code>2,50 = 51
4,25 = 28
5,20 = 24
10,10 = 19
</code></pre>
<p>After 10,10 it just gets worse again. You might even realize since S and B are the same, we could think of that as <code>sqrt n</code>. Which is a <em>good</em> answer. Not the <em>ideal</em> answer but a decent one.</p>
<p>Our generalized worst case would be to jump by</p>
<p>$$ \sqrt(n) $$</p>
<p>So for any building size N. We can solve it in</p>
<p>$$ 2 \sqrt(n) - 1$$</p>
<p>tries. For N=100, that is 19 (18 with inference).</p>
<p>If X = 99 then we try 10,20,30,40,50,60,70,80,90,100,91,92,93,94,95,96,97,98.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="the-quadratics">The Quadratics</h2>
<p>The ideal solution comes from understanding that as we check the top of each section, we have already dropped for each previous section.</p>
<p>For example, if we jump by 10 each time then at floor 30 we have already jumped 2 times, 10,20. If the ball breaks we still have to check 10 places, 21-30
which make our total 12, not 10. Ideally that number would be consistent. We need to find an equalibrium. We would jump by 10 then by 9 because then we&rsquo;d have a max of 10 jumps. We can try this but 10 doesn&rsquo;t quite work. We end at 55. So we need a bigger number. 55 is the sum of 1 to 10. We could manually find that 14 + 13 + 12 + 11.. is 104 which is enough! But as computer scientists, we should look for the generalized solution.</p>
<!-- raw HTML omitted -->
<p>So each jump must be one less than the previous. All jumps must add up to 100 (or more). We get the following formula that you&rsquo;ll see in other blog posts.</p>
<p>$$n+n-1+n-2+n-3+n-4&hellip;=100$$</p>
<p>I&rsquo;ve seen this formula on many blog posts that don&rsquo;t explain it clearly for the beginners. This formula is really the same as</p>
<p>$$ \sum_{i=1}^n i $$</p>
<p>Which just means <em>&ldquo;Add all numbers from 1 to N&rdquo;</em>.</p>
<p>With a little thinking we realize that is is going to go down to 1. So really we are adding 1 to N and the sum being 100. We were just defining it in a backwards sense.</p>
<p>So we can figure out the sum off all numbers 1 to n with the following formula that is easy to figure out on your own.</p>
<p>Adding 1 to 10, we can make 10 pairs that add up to 10. There are always $ n \over 2 $ pairs. The middle number doesn&rsquo;t pair up so we add that.</p>
<p>10 + 0 = 10
9 + 1 = 10
8 + 2 = 10
7 + 3 = 10
6 + 4 = 10</p>
<p>$$ n (n + 1) \over 5 $$</p>
<p>Which can be simplified to</p>
<p>$$ .5n^2 + .5n = floors $$</p>
<p>Or in our case of 100 floors</p>
<p>$$ .5n^2 + .5n = 100 $$</p>
<p>Then make it all equal 0 for balance</p>
<p>$$ .5n^2 + .5n - 100 = 0 $$</p>
<p>BOOM! we have a quadratic formula we can solve.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Remember your quadratics? Yeah! That&rsquo;s just a quadratic formula that we can solve!</p>
<p>$$(ax^2 + bx + c = 0)$$</p>
<p>Our formula is</p>
<p>$$a = .5$$
$$b = .5$$
$$c = -100$$</p>
<p>and the quadratic formula.</p>
<p>$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a} $$</p>
<p>So solve this formula (just use an <a href="https://www.mathsisfun.com/quadratic-equation-solver.html">online solver</a>)</p>
<p>$$x = {-.5 \pm \sqrt{.5^2-4(.5)(-100)} \over 2*.5} $$</p>
<p>$$x = {-.5 \pm \sqrt{(.25)-(-200)} \over 1} $$</p>
<p>$$x = {-.5 \pm \sqrt{200.25}} $$</p>
<p>So if we do that, we get <code>13.650971698085</code> for the positive solution. We can ignore the negative solution.</p>
<p>Now, we can only have a whole floor number so we round to the nearest number and that is <code>14</code>.</p>
<p>I used <a href="https://www.desmos.com">desmos</a> to chart the formula out. You can see the <a href="https://www.desmos.com/calculator/yaxygr4jvi">chart here</a>. Or enjoy the screenshot below.</p>
<p><img alt="Parabola touching 13.6 on the x axis" src="/images/parabola.png"></p>
<p>So <code>n=14</code>. Which means that we start at floor n, <code>14</code> then move <code>n-1</code> floors to <code>27</code>. We continue moving one less floor each time.</p>
<p>I.E if we try <code>14,27</code> then the ball breaks at 27,
we have to try 15-26 which is 12 tries plus the two from before = 14! Each time we have one less try for the in-between floors.</p>
<h4 id="1427395060697784909599100"><code>14,27,39,50,60,69,77,84,90,95,99,100</code></h4>
<hr>
<h2 id="the-code">The Code</h2>
<p>We have solved the problem and did the math. Now it is time to translate this into code. I&rsquo;m going to write this in javascript, the language
I typically use for interviews.</p>
<p>We don&rsquo;t need to solve the quadratic equation in code. Remember the reverse formula? <code>n+n-1+n-2...</code>? We can just start at the top and subtract 1, then 2, then 3 etc. Until we get to 0 or less.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">findFloor</span>(<span style="color:#a6e22e">floors</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">steps</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">step</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">floor</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">steps</span>.<span style="color:#a6e22e">unshift</span>(<span style="color:#a6e22e">floor</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">floor</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">floor</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">step</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">steps</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">steps</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You&rsquo;ll notice this gives us a different answer! We have a different sequence of floors.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>[<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">22</span>, <span style="color:#ae81ff">34</span>, <span style="color:#ae81ff">45</span>, <span style="color:#ae81ff">55</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">72</span>, <span style="color:#ae81ff">79</span>, <span style="color:#ae81ff">85</span>, <span style="color:#ae81ff">90</span>, <span style="color:#ae81ff">94</span>, <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">99</span>, <span style="color:#ae81ff">100</span>];
</span></span></code></pre></div><p>Still, the worst case is <code>14</code>. This one is ever so slightly more efficient because if the ball breaks on
floor 9, then we only have 9 tries, everything else is 14.</p>
<h2 id="the-same-answer">The Same Answer</h2>
<p>That was just a fun detour. We <em>can</em> code it to get the same floors. We would have to solve the quadratic formula THEN start at
that floor and jumping by one less each time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">findFloor</span>(<span style="color:#a6e22e">n</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">n</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// solve quadratic
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">floor</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">ceil</span>((<span style="color:#f92672">-</span><span style="color:#a6e22e">b</span> <span style="color:#f92672">+</span> Math.<span style="color:#a6e22e">sqrt</span>((<span style="color:#a6e22e">b</span> <span style="color:#f92672">^</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">c</span>)) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">a</span>));
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// walk the floors
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">steps</span> <span style="color:#f92672">=</span> [<span style="color:#a6e22e">floor</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">step</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">floor</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">floor</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">n</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">floor</span> <span style="color:#f92672">+=</span> <span style="color:#f92672">--</span><span style="color:#a6e22e">step</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">steps</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">floor</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">floor</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">steps</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<hr>
<h2 id="what-about-3-orbs-5-infinite">What about 3 Orbs? 5? Infinite?</h2>
<p>I was discussing this with a friend and she brought this up. I hadn&rsquo;t really though about what the actual answer would be. Here is the algorithm depending on the number of orbs relative to the number of floors.</p>
<p>Algorithm 1: For 1 orb = go floor by floor from 1..floors</p>
<p>Algorithm 2: For 2 orbs = start at this floor $ .5n^2 + .5n = floors $ then jump by one less floor each time until 1 orb remains, see algorithm 1.</p>
<p>Algorithm 3: For 3 to log2(floors) Orbs = hen do a binary search until only 2 orbs remain, see algorithm 2.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I know that was a <em>REALLY</em> long explanation but I think it was much more thorough than any other blog post about it.</p>
]]></content>
        </item>
        
        <item>
            <title>Comment Driven Development</title>
            <link>//localhost:1313/posts/comment-driven-development/</link>
            <pubDate>Sun, 26 Mar 2023 02:28:19 -0500</pubDate>
            
            <guid>//localhost:1313/posts/comment-driven-development/</guid>
            <description>One of my students asked a great question along the lines of &amp;ldquo;how long did it take you until you could code without being stuck or having to look things up?&amp;rdquo;. I replied &amp;ldquo;it took years&amp;rdquo;, which it did to code at a professional level. I picked up programming pretty quickly by teaching myself in high school. One of my first programs was calculating the quadratic formula, then later I moved onto making games.</description>
            <content type="html"><![CDATA[<p>One of my students asked a great question along the lines of &ldquo;how long did it take you until you could code without being stuck or having to look things up?&rdquo;. I replied &ldquo;it took years&rdquo;, which it did to code at a professional level. I picked up programming pretty quickly by teaching myself in high school. One of my first programs was calculating the quadratic formula, then later I moved onto making games.</p>
<p>Here are my tips for helping you get code written and progress made. First, sofware is about solving problem, NOT writing code. So even if AI can write
the code for me, which prevents me from getting RSI, it&rsquo;ll never be able to perfectly solve the problems for me (just like how Google translate doesn&rsquo;t replace accurate translators and interpreters).</p>
<h2 id="clarify-the-problem">Clarify the Problem</h2>
<p>I had a student ask me to help him translate some Python code to Javascript. &ldquo;easy, no problem&rdquo;, I thought. In the future, I would just use Chat GPT. I already have for translating C# to Rust.
But then the student sent me incomplete code that also didn&rsquo;t have a clear intention behind it. That made my
task impossible. Not the student&rsquo;s fault because he just hadn&rsquo;t clarified what he was building yet, or <em>how</em> to build it. So that was more of the issue than translating from Python to Javascript.</p>
<h2 id="break-the-problem-down-into-comments">Break the problem down into Comments</h2>
<p>This is what I call <em>Comment-Driven Development</em>. You write comments for your program first, <em>then</em> break those
comments down into smaller comments until you can turn each line into code individually. This can be <a href="/">psuedocode</a> or just plain English. I know many already do this as a way to work
with coding AIs like Copilot and Tabnine.</p>
<p>Here is an example for implementing <em>Fizzbuzz</em> for the first time.</p>
<p>To be clear, I think this is great for software <em>students</em>. While I do this a little bit professionally, often, I find it better
to write code as quickly as possible because then I have the feedback of the program output, errors etc to guide me than trying to plan it out perfectly first.
Still, a basic plan is always needed.</p>
<p>Let&rsquo;s breakdown Fizzbuzz using Comment-Driven Development.</p>
<h3 id="the-user-story">The User Story</h3>
<p>As a user, I want to provide two numbers and their associated words. I want to be able to choose the starting number and ending number to count to.
If a number is a factor of one of the provided numbers then the associated word with that number should be printed out. If it is a factor of both the numbers, then
both words should be printed out on a new line. If not, then just print the number.</p>
<p>I want the ability to output the numbers to somewhere other than the console. Maybe save to a text file, in memory DB, or send to some API. The words and numbers should also be configureable,
without changing the code.</p>
<h3 id="cdd-interaction-1">CDD Interaction #1</h3>
<h3 id="simplify-the-problem-and-build-the-subset">Simplify the problem and build the subset</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// fizzbuzz
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// count from 1 to 30 (later from &#39;start&#39; to &#39;end&#39;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// if number is factor of 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// print &#34;fizz&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// if number is factor of 5
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// print &#34;buzz&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// if number is factor of 3 and 5
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// print &#34;fizzbuzz&#34;
</span></span></span></code></pre></div><h3 id="cdd-interaction-2">CDD Interaction #2</h3>
<p>I realize that if need to check for the &ldquo;fizzbuzz&rdquo; case first,
or we&rsquo;ll get &ldquo;fizz&rdquo; and &ldquo;buzz&rdquo; separately when get to &ldquo;15&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// fizzbuzz
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// count from 1 to 30
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// if number is factor of 3 and 5
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// print &#34;fizzbuzz&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// if number is factor of 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// print &#34;fizz&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// if number is factor of 5
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// print &#34;buzz&#34;
</span></span></span></code></pre></div><h3 id="cdd-interaction-3">CDD Interaction #3</h3>
<p>Finally, I feel like my comments are concise enough that they can by translated to code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// fizzbuzz
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fizzbuzz</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// count from 1 to 30
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">number</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">number</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">30</span>; <span style="color:#f92672">++</span><span style="color:#a6e22e">number</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// if number is factor of 15 (3 and 5)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">15</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// print &#34;fizzbuzz&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;fizzbuzz&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// if number is factor of 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// print &#34;fizz&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;fizz&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// if number is factor of 5
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// print &#34;buzz&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;buzz&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="thats-not-all">That&rsquo;s Not All!</h2>
<p>The v3 of our code actually works now. But we could refactor it a few different ways.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">cost</span> <span style="color:#a6e22e">fizzbuzz</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">number</span> =&gt; (
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#e6db74">&#34;fizz&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#f92672">+</span> (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#e6db74">&#34;buzz&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#f92672">||</span><span style="color:#a6e22e">number</span>
</span></span><span style="display:flex;"><span>  );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">number</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">number</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">30</span>; <span style="color:#f92672">++</span><span style="color:#a6e22e">number</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">fizzbuzz</span>(<span style="color:#a6e22e">number</span>));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now this is much better code. Mainly because we have broken how <code>fizzbuzz</code> to be a pure function. It <em>only</em> calculate the correct string
to return &ldquo;fizz&rdquo;, &ldquo;buzz&rdquo; or &ldquo;fizzbuzz&rdquo;. I used ternaries here in a slighly clever way, but you don&rsquo;t have to.</p>
<p>Now we don&rsquo;t care if we are counting from 1 to 30 or just wanting to calculate &lsquo;237&rsquo; (&ldquo;fizz&rdquo;).
We also don&rsquo;t care about <code>console.log</code>. What if we want to write to file? Save to memory? Or send the result somewhere else?</p>
<p>What if we want to say &ldquo;oogabooga&rdquo; instead of &ldquo;fizzbuzz&rdquo; ?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">matrix</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;ooga&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">7</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;booga&#34;</span>,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">fizzbuzzSetup</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">matrix</span>) =&gt; (<span style="color:#a6e22e">number</span>) =&gt;
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">matrix</span>)[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">?</span> <span style="color:#a6e22e">matrix</span>[Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">matrix</span>)[<span style="color:#ae81ff">0</span>]]
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">matrix</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">?</span> <span style="color:#a6e22e">matrix</span>[Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">matrix</span>)[<span style="color:#ae81ff">1</span>]]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">number</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">oogabooga</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fizzbuzzSetup</span>(<span style="color:#a6e22e">matrix</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">number</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">number</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">30</span>; <span style="color:#f92672">++</span><span style="color:#a6e22e">number</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">oogabooga</span>(<span style="color:#a6e22e">number</span>));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I hand fun with using lambdas here. Again, those aren&rsquo;t the point and if my team wasn&rsquo;t using lambdas, especially with HOF,
then I wouldn&rsquo;t write it this way for clarity.</p>
<p>I made a lookup table or matrix so we can do &ldquo;fizz buzz&rdquo; or &ldquo;ooga booga&rdquo; or whatever we want. The <code>fizzbuzzSetup</code> function create a unique
function based on the two number we want to use as factors and their respective / corresponding words.</p>
<p>Using a HOF is nice here because then we don&rsquo;t need to pass matrix around everywhere. Fizzbuzz only cares about the number before and that shouldn&rsquo;t change.
I&rsquo;ll write it a bit cleaner for those less ternary happy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">matrix</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;ooga&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">7</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;booga&#34;</span>,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fizzbuzzSetup</span>(<span style="color:#a6e22e">matrix</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">number</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">keys</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">matrix</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">keys</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) <span style="color:#a6e22e">result</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">keys</span>[<span style="color:#ae81ff">0</span>]];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">keys</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) <span style="color:#a6e22e">result</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">keys</span>[<span style="color:#ae81ff">1</span>]];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">number</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">oogabooga</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fizzbuzzSetup</span>(<span style="color:#a6e22e">matrix</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">number</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">number</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">30</span>; <span style="color:#f92672">++</span><span style="color:#a6e22e">number</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">oogabooga</span>(<span style="color:#a6e22e">number</span>));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="cdd-iteration-4-final-form-super-saiyon-blue">CDD Iteration #4 Final Form super saiyon blue</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">matrix</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;ooga&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">7</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;booga&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">start</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">end</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">30</span>,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">readMatrixFromFile</span>() {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">readNumberRangeFromFile</span>() {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fizzbuzzSetup</span>(<span style="color:#a6e22e">matrix</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">number</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">keys</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">matrix</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">keys</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">result</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">keys</span>[<span style="color:#ae81ff">0</span>]];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">number</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">keys</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">result</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">keys</span>[<span style="color:#ae81ff">1</span>]];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">number</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">iterateAndIO</span>(<span style="color:#a6e22e">start</span>, <span style="color:#a6e22e">end</span>, <span style="color:#a6e22e">out</span>, <span style="color:#a6e22e">func</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">number</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">start</span>; <span style="color:#a6e22e">number</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">end</span>; <span style="color:#f92672">++</span><span style="color:#a6e22e">number</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">out</span>(<span style="color:#a6e22e">func</span>(<span style="color:#a6e22e">number</span>));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">oogabooga</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fizzbuzzSetup</span>(<span style="color:#a6e22e">matrix</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">iterateAndIo</span>(<span style="color:#a6e22e">matrix</span>.<span style="color:#a6e22e">start</span>, <span style="color:#a6e22e">matrix</span>.<span style="color:#a6e22e">end</span>, <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">oogabooga</span>);
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Fun Function Fundamentals</title>
            <link>//localhost:1313/posts/fun-function-fundamentals/</link>
            <pubDate>Sun, 26 Mar 2023 02:28:19 -0500</pubDate>
            
            <guid>//localhost:1313/posts/fun-function-fundamentals/</guid>
            <description>Functions are great. Let&amp;rsquo;s cover some function fundamentals.
Closures The following code will print 11 10 times. This is because Javascript using var is function scoped, closures.
for (var x = 0; x &amp;lt; 10; ++x) { setTimeout(() =&amp;gt; console.log(x), 100); } The old school solution is to use a closure.
for (var x = 0; x &amp;lt; 10; ++x) { (function () { setTimeout(() =&amp;gt; console.log(x), 100); })(x); } A closure is when a function wraps another function.</description>
            <content type="html"><![CDATA[<p>Functions are great. Let&rsquo;s cover some function fundamentals.</p>
<h2 id="closures">Closures</h2>
<p>The following code will print <code>11</code> 10 times. This is because Javascript using <code>var</code> is function scoped, closures.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">x</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>; <span style="color:#f92672">++</span><span style="color:#a6e22e">x</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setTimeout</span>(() =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">x</span>), <span style="color:#ae81ff">100</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The old school solution is to use a closure.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">x</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>; <span style="color:#f92672">++</span><span style="color:#a6e22e">x</span>) {
</span></span><span style="display:flex;"><span>  (<span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setTimeout</span>(() =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">x</span>), <span style="color:#ae81ff">100</span>);
</span></span><span style="display:flex;"><span>  })(<span style="color:#a6e22e">x</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>A closure is when a function wraps another function.</p>
<h3 id="closures-as-modules">Closures as modules</h3>
<blockquote>
<p>&ldquo;Back in my day we didn&rsquo;t have fancy CommonJS or ES modules, we had Closures, up hill both ways.&rdquo;</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myModule</span>;
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">module</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  };
</span></span><span style="display:flex;"><span>)(<span style="color:#a6e22e">myModule</span>);
</span></span></code></pre></div><h2 id="high-order-functions">High-Order Functions</h2>
<p>A high-order function is a function that takes a function as an argument and/or returns a function as a result.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">withLogging</span>(<span style="color:#a6e22e">fn</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">fn</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> \n </span><span style="color:#e6db74">${</span>...<span style="color:#a6e22e">args</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fn</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">cube</span>(<span style="color:#a6e22e">n</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">n</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">cubeWithLogging</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">withLogging</span>(<span style="color:#a6e22e">cube</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cubeWithLogging</span>(<span style="color:#ae81ff">3</span>) <span style="color:#75715e">// returns 27; console &#34;cube&#34; &#34;3&#34;
</span></span></span></code></pre></div><h3 id="practical-example-with-expressjs">Practical example with Express.JS</h3>
<h2 id="dependency-injection">Dependency Injection</h2>
<p>Passing a function to a function, high-order function, is a common form of dependency injection!</p>
<p>function</p>
<h2 id="middleware">Middleware</h2>
<h2 id="currying">Currying</h2>
]]></content>
        </item>
        
        <item>
            <title>Backend</title>
            <link>//localhost:1313/posts/backend/</link>
            <pubDate>Sun, 26 Mar 2023 02:18:25 -0500</pubDate>
            
            <guid>//localhost:1313/posts/backend/</guid>
            <description>Again, even though we&amp;rsquo;ll talk mostly about nodejs, I want to make sure I&amp;rsquo;m teaching you to be a backend developer, not just a node developer. In fact, I want you all to be great software engineers not just REACT developer or JAVA developer.
I&amp;rsquo;ve used C#, Javascript, Groovy, Bootstrap, Vue, React, AWS, Azure, Sitecore, Kentico, Optimizely etc in my career. I have done my best to not be defined by a specific technology (I was by CMS dev for awhile.</description>
            <content type="html"><![CDATA[<p>Again, even though we&rsquo;ll talk mostly about <em>nodejs</em>, I want to make sure I&rsquo;m teaching you to be a <em>backend</em> developer, not just a <em>node developer</em>. In fact,
I want you all to be great <em>software engineers</em> not just <em>REACT developer</em> or <em>JAVA developer</em>.</p>
<p>I&rsquo;ve used C#, Javascript, Groovy, Bootstrap, Vue, React, AWS, Azure, Sitecore, Kentico, Optimizely etc in my career. I have done my best to not
be defined by a specific technology (I was by CMS dev for awhile. Hence the Sitecore, Kentico and Optimizely).</p>
<h2 id="backend-is-its-own-stack">Backend is its own Stack</h2>
<p>Front-end is essentially HTML, CSS and Javascript. There is UX, A11y, i18n, performance etc of course to but essentially that is all front-end is. Some basic understanding of
the browser and HTTP is all that is needed.</p>
<p>Back-End is NOT just another front-end. There are numerous languages used on the backend: C#, Java, Groovy, PHP, Javascript, Go, Rust, C++, Ruby, Python etc.</p>
<ul>
<li>Service / API layer</li>
<li>Business layer</li>
<li>Data Access layer</li>
<li>Data layer</li>
<li>Networking</li>
<li>Deployments</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Interfaces</title>
            <link>//localhost:1313/posts/interfaces/</link>
            <pubDate>Sun, 26 Mar 2023 02:07:32 -0500</pubDate>
            
            <guid>//localhost:1313/posts/interfaces/</guid>
            <description>Interfaces are a crucial concept in software. There are APIs or Application Programming Interfaces, there are ABIs Application Binary Interfaces, UIs User Interfaces, they are everywhere! Even the humble function signature is an interface. Let&amp;rsquo;s not forget the actual interface keyword in many languages too! So what is a @#$% interface?
Let&amp;rsquo;s find out.
Baby&amp;rsquo;s first abstraction &amp;ldquo;&amp;hellip;abstract thinking is a higher-level mode of thinking that involves processing theoretical concepts and allows us to make connections and see patterns.</description>
            <content type="html"><![CDATA[<p>Interfaces are a crucial concept in software. There are APIs or Application Programming Interfaces, there are ABIs Application Binary Interfaces, UIs User Interfaces,
they are everywhere! Even the humble function signature is an interface. Let&rsquo;s not forget the actual <code>interface</code> keyword in many languages too! So what is a @#$% interface?</p>
<p>Let&rsquo;s find out.</p>
<h2 id="babys-first-abstraction">Baby&rsquo;s first abstraction</h2>
<blockquote>
<p>&ldquo;&hellip;abstract thinking is a higher-level mode of thinking that involves processing theoretical concepts and allows us to make connections and see patterns. &ndash; Calmerry.com&rdquo;</p>
</blockquote>
<p>I really like the use of &ldquo;connections&rdquo; and &ldquo;patterns&rdquo; here.</p>
<p>My first abstraction when I taugh myself TI-BASIC was functions. Function have input and ouput. As far as the caller is concerned, everything in the middle is magic. Just like fast food is like a function. Your order and money go in, food comes out. The details in the middle don&rsquo;t matter. The point of execution or calling is the interface. The contract that is agreed upon, explicitly or implicitly, for two systems to communicate. The RULES around that communication is know as a <em>PROTOCOL</em>; that&rsquo;s for a different blog post.</p>
<p>Interfaces are <em>really</em> important.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">foo</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">c</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>(<span style="color:#a6e22e">c</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see that Foo assumes a is a boolean, b is function and c is a parameter for b. If have a function that accepts a <code>foo</code> function, as long as our function acts the same, we&rsquo;re good.</p>
]]></content>
        </item>
        
        <item>
            <title>&#39;This&#39; That and Dispatch</title>
            <link>//localhost:1313/posts/this-that-and-dispatch/</link>
            <pubDate>Thu, 23 Mar 2023 14:54:18 -0500</pubDate>
            
            <guid>//localhost:1313/posts/this-that-and-dispatch/</guid>
            <description>There are numerous blogs and videos about Javascript&amp;rsquo;s this keyword. In my opinion, virtually all of them fall short and fail to even mention dispatch or binding.
As always, I encourage polyglot programming. So I&amp;rsquo;ll be showing examples is Javascript, C#, Go and Rust.
Back to the basics First, let us cover some really basic but critical Javascript.
function greet(name) { console.log(`hello, ${name}`); } function greet() { console.log(`hello, stranger`); } greet(&amp;#34;natescode&amp;#34;); Which function is called?</description>
            <content type="html"><![CDATA[<p>There are numerous blogs and videos about Javascript&rsquo;s <code>this</code> keyword. In my opinion, virtually all of them fall short and
fail to even mention <code>dispatch</code> or <code>binding</code>.</p>
<p>As always, I encourage polyglot programming. So I&rsquo;ll be showing examples is Javascript, C#, Go and Rust.</p>
<h2 id="back-to-the-basics">Back to the basics</h2>
<p>First, let us cover some <em>really</em> basic but critical Javascript.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>(<span style="color:#a6e22e">name</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, stranger`</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">greet</span>(<span style="color:#e6db74">&#34;natescode&#34;</span>);
</span></span></code></pre></div><p><strong>Which function is called?</strong></p>
<p>If you said the first function, that is <em>incorrect</em>.</p>
<p>Javascript <em>ONLY</em> cares about the function name, not the parameters. In the case of duplicate function names, the last one defined wins; just like CSS.</p>
<h2 id="methods-vs-functions">Methods vs Functions</h2>
<p>Now, when we get to methods, somethings change. Let us make our previous example use methods.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">name</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Bob</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, stranger`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">person</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Alice</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">Greet</span>(<span style="color:#e6db74">&#34;natescode&#34;</span>);
</span></span></code></pre></div><p>Now, even though <code>Alice</code> and <code>Bob</code> both have <code>greet</code> functions, there is no longer a name conflict! Hey, I though Javascript functions had to have unique names? They do, but not methods! Because methods are functions that are related to a specific function. They have their own scope / context.</p>
<p>Now let&rsquo;s change the example to use the object&rsquo;s context.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Alysan&#34;</span>,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Bob</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Robert&#34;</span>,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`hello, stranger. I am </span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// they&#39;ll both use the same function as a method
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">Alice</span>.<span style="color:#a6e22e">greet</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">greet</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Bob</span>.<span style="color:#a6e22e">greet</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">greet</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Alice</span>.<span style="color:#a6e22e">greet</span>(<span style="color:#e6db74">&#34;NatesCode&#34;</span>);
</span></span></code></pre></div><p>You&rsquo;ll see I changed the <code>greet</code> methods back to a single function. I did this to highlight the fact that methods are just functions executed within an specific object&rsquo;s context. Technically, ALL javascript functions are methods since everything is on the <code>window</code> object. The plain <code>greet</code> function will <em>not</em> return <code>null</code> or <code>undefined</code> because the <code>name</code> exists as <code>window.name</code>; it is usually an empty string though.</p>
<p>You&rsquo;ll the two lines that associate the <code>Greet</code> function with both the <code>Alice</code> and <code>Bob</code> objects.</p>
<p>When we call their respecitve <code>greet</code> methods, the output changes based on the object the function was called on. Methods, unlike functions, have a special parameter called the <em>receiver</em>. This is <em>really</em> obvious in <code>Go</code> where the receiver parameter comes before the method name, the same order we call it in.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// &#39;this&#39; could be called anything since it is just a parameter.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// normally it would be called `person` by convention
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#a6e22e">Person</span>) <span style="color:#a6e22e">greet</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>){
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;hello, &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="still-unclear-oh-my">Still unclear? Oh MY!</h2>
<p>To clear up how <code>this</code> works. I show you an example in English. Here
is a script for you to read.</p>
<pre tabindex="0"><code>  Hello, my name is [your name], and today . . .
</code></pre><p>Did you say &ldquo;your name&rdquo; or did you say your actual name? &ldquo;you&rdquo; and &ldquo;me&rdquo; and &ldquo;my&rdquo; are relative! They don&rsquo;t refer to the same person all the time. It depends <em>WHO</em> says it!</p>
<p>Let&rsquo;s change the code example to read more like English and say
&ldquo;my name is Alice&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Alysan&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`My name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">my</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Bob</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Robert&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`My name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">my</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Alice</span>.<span style="color:#a6e22e">greet</span>(); <span style="color:#75715e">// My name is Alysan
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">Bob</span>.<span style="color:#a6e22e">greet</span>(); <span style="color:#75715e">// My name is Robert
</span></span></span></code></pre></div><p>So <code>this</code> refers to the object that we are calling the function on, <em>the reciever</em> again. <code>this</code> is really just a special parameter as we saw in <code>Go</code>. We can think of
the following two code snippets as being conceptually equivalent.</p>
<h4 id="using-this">Using <code>this</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`my name is </span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="receiver-object-parameter">receiver object parameter</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greet</span>(<span style="color:#a6e22e">receiver</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`my name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">receiver</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I hope that clears up at least the basic understanding of <code>this</code>.</p>
<h2 id="dispatch">Dispatch</h2>
<p>Ok. So hopefully now <code>this</code> is starting to make sense. We are now going to take the minecar into the cave of deeper knowledge! Let&rsquo;s talk about dispatch!</p>
<p>First a code example. Can you tell me which method will be run?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Alysan&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`My name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">my</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Bob</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Robert&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">greet</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">my</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`My name is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">my</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// we are picking Alice or Bob at random.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Nothing else important about this code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">friend</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0.5</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">Alice</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">Bob</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">friend</span>.<span style="color:#a6e22e">greet</span>();
</span></span></code></pre></div><p>Hopefully, you answered <code>no, I cannot predict something inherently random!</code>. My point exactly. This is called <code>dynamic dispatch</code> or <code>late binding</code>. Those are just fancy terms for <code>Let's figure out which method to call on which object when we RUN the code, not before</code></p>
<p>In statically typed languages, we know for 100% certainty which type <code>friend</code> will be, before the code runs.</p>
<h2 id="c-dispatch">C# Dispatch</h2>
<p>Let&rsquo;s translate that example into C#</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Alice</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Alysan&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Alice(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Bob</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Robert&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Bob(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// csharp does have VAR but that just infers the type</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// it isn&#39;t dynamic</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> friend = Math.random() &gt; <span style="color:#ae81ff">0.5</span> ? Alice : Bob;
</span></span><span style="display:flex;"><span>friend.greet();
</span></span></code></pre></div><p>This code won&rsquo;t even compile. We&rsquo;ll get an `` error. Because we
don&rsquo;t know which type friend is going to be. The most direct translation would change the last two lines to look like this.</p>
<h3 id="using-dynamic">Using <code>dynamic</code></h3>
<p>** NEVER DO THIS **</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// NEVER, EVER, EVER, for the love of keeping your job</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// and not being replaced by AI, NEVER EVER DO THIS!!!!</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">dynamic</span> friend = Math.random() &gt; <span style="color:#ae81ff">0.5</span> ? Alice : Bob;
</span></span><span style="display:flex;"><span>friend.greet();
</span></span></code></pre></div><p>Now friend&rsquo;s type is not set until we run the code. This will work. Just don&rsquo;t do it! Promise? Okay.</p>
<h3 id="using-interface">Using <code>interface</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// we define an interface that has a greet method</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IGreetable</span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> greet();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Alice</span>: IGreetable {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Alysan&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Alice(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Bob</span>: IGreetable {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Robert&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Bob(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// csharp does have VAR but that just infers the type</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// it isn&#39;t dynamic</span>
</span></span><span style="display:flex;"><span>IGreetable friend = Math.random() &gt; <span style="color:#ae81ff">0.5</span> ? Alice : Bob;
</span></span><span style="display:flex;"><span>friend.greet();
</span></span></code></pre></div><p>Now, friend is of a shared type <code>iGreetable</code>. An interface is a type that defines which methods should exist on an object. Now we don&rsquo;t care if we get an <code>Alice</code> or <code>Bob</code>, we are <em>ONLY</em> looking for any object that fits
the <code>IGreetable</code> interface, in this case that means anything with a <code>greet</code> method that take no parameters and returns nothing.</p>
<blockquote>
<p>NOTE: statically typed languages do differentiate between methods/functions with different number of parameters, parameter types and return types. <code>greet</code> with a return type or parameter of <code>string name</code> would be a different method all together</p>
</blockquote>
<h3 id="using-inheritance">Using Inheritance</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// we define an interface that has a greet method</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> greet(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> my = <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    Console.Writeline(<span style="color:#e6db74">$&#34;My name is {my.name}&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Alice</span>: Person {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Alysan&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Alice(){
</span></span><span style="display:flex;"><span>    super();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Bob</span>: Person {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;Robert&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Bob(){
</span></span><span style="display:flex;"><span>    super();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// csharp does have VAR but that just infers the type</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// it isn&#39;t dynamic</span>
</span></span><span style="display:flex;"><span>Person friend = Math.random() &gt; <span style="color:#ae81ff">0.5</span> ? Alice : Bob;
</span></span><span style="display:flex;"><span>friend.greet();
</span></span></code></pre></div><p>Inheritance look similar to interfaces. <code>Bob</code> and <code>Alice</code> both inherit from the <code>Person</code> object. You can think of inheritance as a compiler-assisted copy-paste. So Alice doesn&rsquo;t have her own <code>greet</code> method anymore but that is okay because her parent does! Similar to have Javascript&rsquo;s prototypal inheritance works.</p>
<h3 id="using-sum-types">Using Sum Types</h3>
<p>I wasn&rsquo;t going to include this one, but man it is too good to pass up. I&rsquo;m going to write this example in language of the gods, <code>Rust</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// define a Person struct with a greet method
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Person</span> {
</span></span><span style="display:flex;"><span>    name: String,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Person {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">greet</span>(<span style="color:#f92672">&amp;</span>self) {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;My name is </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, self.name);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// define an enum for friend type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">enum</span> <span style="color:#a6e22e">Friend</span> {
</span></span><span style="display:flex;"><span>    Alice,
</span></span><span style="display:flex;"><span>    Bob,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// create Alice and Bob structs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> alice <span style="color:#f92672">=</span> Person { name: String::from(<span style="color:#e6db74">&#34;Alysan&#34;</span>) };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> bob <span style="color:#f92672">=</span> Person { name: String::from(<span style="color:#e6db74">&#34;Robert&#34;</span>) };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// randomly choose between Alice and Bob
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> friend <span style="color:#f92672">=</span> <span style="color:#66d9ef">if</span> rand::random() { Friend::Alice } <span style="color:#66d9ef">else</span> { Friend::Bob };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// call greet method on chosen friend
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">match</span> friend {
</span></span><span style="display:flex;"><span>    Friend::Alice <span style="color:#f92672">=&gt;</span> alice.greet(),
</span></span><span style="display:flex;"><span>    Friend::Bob <span style="color:#f92672">=&gt;</span> bob.greet(),
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>** BTW the above Rust code was generated by Chat GPT. I had it translate the previous C# code into rust but use enums for the friend type. The FUUUUTUUURE!</p>
<p><img alt="Squidward saying future" src="/images/squidward_future.jpg"></p>
<p>So let&rsquo;s explain the Rust code for those unfamiliar. We define a <code>struct</code> which is like a <code>class</code> in many ways. It only has data though, no methods.
We then define an <code>impl</code> block which just defines the methods for that <code>struct</code> separately. Unlike Javascript, Rust and other languages allow us to define our own
actual types. Even if we define a <code>class Person</code> in Javascript, the type will always be <code>object</code> and we&rsquo;d have to use the <code>Object.prototype.isPrototypeOf()</code> method to see if something is from a <code>Person</code> object.</p>
<p>The <code>enum</code> in a type that combines types. So <code>friend</code> can either be of type <code>Alice</code> or type <code>Bob</code>.
We create new object literals of type <code>Person</code> for both Alice and Bob. The enum is our ticket for the train to <code>polymophism</code>.</p>
<p>You&rsquo;ll see that Rust defines an enum type which is just a type that combines two more types, type addition aka Algebraic Data Types.</p>
<p>Friend is of the shared type. Then at runtime, we check which variant of Friend we have and call the approprait method. This isn&rsquo;t dynmic dispatch because we KNOW the type of Friend before the code runs. There is some <em>dynamic</em> checking however which comes with a small performance overhead. The enum is like a C union but with a bit that tells us which variant we currently have.</p>
<p>Effectively, enums make types into values. Like a <code>string name</code> in C# must always be a string but can change to different values.</p>
<h2 id="ms-poly-morphism">Ms. Poly Morphism</h2>
<p><code>Polymorphism</code> is a tough term to define. I&rsquo;m going to define it as the following.</p>
<blockquote>
<p>Polymorphism is the process of treating code (objects, data, types) based on their shared similarities</p>
</blockquote>
<p>In all the previous examples, we were simply trying to <code>abstract</code> away the differences and focus on the similarites between <code>bob</code> and <code>alice</code> so
that we could treat them equally; even code can be inclusive!</p>
<p>Abstraction is another term we need to define since <em>polymorphism</em> is a from of <em>abstraction</em>. Most, if not all, definiton talk about <em>hiding</em> details.
I think, at least in software, it isn&rsquo;t about hiding unneeded details but <em>ignoring</em> them. Furthermore, <em>abstraction</em>, is really about trying to describe the
essense of the thing that doesn&rsquo;t only apply to one thing. For example, my nephew told my daughter Luna something about his <code>iPad</code> and she called it a <code>tablet</code>. He
corrected her that it is an <code>iPad</code>. They were both correct. He was being more concrete or exact while Luna was using a more abstract, less accurate, term.</p>
<p>So for instance, if you know how to drive a vehicle then it doesn&rsquo;t matter if the vehicle&rsquo;s make is a <strong>Ford</strong> , <strong>Chevy</strong>, or <strong>Dodge</strong> because all you care is that
it has two pedals (three for manual), a wheel and shifter. Everything else doesn&rsquo;t matter and is not a <strong>concern</strong>.</p>
<h2 id="and-beyond">And Beyond!</h2>
<p>We could go further and start talking about VTABLES and more, but I think that is best saved for another blog post and video. I really hope this helps. Constructive feedback is encouraged and welcome.</p>
<p>Until next time</p>
<p><code>return 0;</code></p>
]]></content>
        </item>
        
        <item>
            <title>Beyond Coding Bootcamp: Now What?</title>
            <link>//localhost:1313/posts/beyond-bootcamp-now-what/</link>
            <pubDate>Thu, 23 Mar 2023 14:54:18 -0500</pubDate>
            
            <guid>//localhost:1313/posts/beyond-bootcamp-now-what/</guid>
            <description>So you graduated a coding bootcamp, or freecodecamp.org, or degree of some sort like AAS in programming or BS in Computer Science, now what?
Here are some tips for my new graduates.
Skills While you&amp;rsquo;re looking you should be working on your skills. Work backwards by finding the type of jobs you want and working on the skills they mention.
For my bootcamp students, just build stuff with what you&amp;rsquo;ve already learned.</description>
            <content type="html"><![CDATA[<p>So you graduated a coding bootcamp, or freecodecamp.org, or degree of some sort like AAS in programming or BS in Computer Science,
now what?</p>
<p>Here are some tips for my new graduates.</p>
<h2 id="skills">Skills</h2>
<p>While you&rsquo;re looking you should be working on your skills. Work backwards by finding the type of jobs you want and working on the skills they mention.</p>
<p>For my bootcamp students, just build stuff with what you&rsquo;ve already learned. Maybe try Typescript but just master MERN first.</p>
<h2 id="resume">Resume</h2>
<p>I&rsquo;m NOT the one to ask about having a good resume. Here are my tips though.</p>
<ol>
<li>
<p>Make a linkedIn.com profile with professional photo and your work, project and education history. LinkedIn.com/jobs is how I found most of my jobs. Easy Apply is great!</p>
</li>
<li>
<p>Make a resume that is easy to parse by application websites. A pretty simple version of your LinkedIn profile in Word doc will work just fine.</p>
</li>
<li>
<p>Make a more professional version of your resume using Overleaf that can be exported as a PDF. I use this version for humans.</p>
</li>
<li>
<p>Ask for help with making your resume highlight your unique skills. Remember there are 10,000 other MERN bootcamp students who have the exact same projects and tech stack that you do. Learn Typescript, Vue, Angular, Go, Postgres etc will set you apart.</p>
</li>
</ol>
<h2 id="interview">Interview</h2>
<h2 id="career">Career</h2>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="want-more">Want more?</h2>
<p>Try <a href="https://www.beyondcodecamp.org/">Beyond Code Camp</a>! That is my new project / company that is trying to help all novice
developers succeed at landing their first jobs and get to Senior developer with that sweet $100,000 USD salary working from the beach in their swimsuit!</p>
]]></content>
        </item>
        
        <item>
            <title></title>
            <link>//localhost:1313/posts/gatekeeping-misinformation/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>//localhost:1313/posts/gatekeeping-misinformation/</guid>
            <description>Gatekeeping Misinformation This post should go viral due to my selection of two hot, divisive buzzwords. In all seriousness, this is an opinion post. I word really hard to write quality posts, this is why my quantity is lower.
Gatekeeping this not this I feel like there is general support for gatekeeping misinformation. (I&amp;rsquo;m NOT going political with this). Yet, when a software engineer with 2 decades of experience posted on LinkedIn that he has reservations about making blog posts to teach because teaching is so difficult to do well, even for someone competent like himself, he is accused of &amp;ldquo;gatekeeping&amp;rdquo; as if &amp;ldquo;gatekeeping&amp;rdquo; poor quality blog posts about technology is any different than the war on &amp;ldquo;misinformation&amp;rdquo;.</description>
            <content type="html"><![CDATA[<h1 id="gatekeeping-misinformation">Gatekeeping Misinformation</h1>
<p>This post should go viral due to my selection of two hot, divisive buzzwords. In all seriousness, this is an opinion post. I word <em>really</em> hard to write quality posts, this is why my quantity is lower.</p>
<h2 id="gatekeeping-this-not-this">Gatekeeping <code>this</code> not <code>this</code></h2>
<p>I feel like there is general support for gatekeeping misinformation. (I&rsquo;m <strong>NOT</strong> going political with this). Yet, when a software engineer with 2 decades of experience posted on LinkedIn that he has reservations about making blog posts to teach because teaching is so difficult to do well, even for someone competent like himself, he is accused of <em>&ldquo;gatekeeping&rdquo;</em> as if <em>&ldquo;gatekeeping&rdquo;</em> poor quality blog posts about technology is any different than the war on <em>&ldquo;misinformation&rdquo;</em>.</p>
<blockquote>
<p>&ldquo;gatekeeping noun - the activity of controlling, and usually limiting, general access to something.&rdquo;</p>
</blockquote>
<p>If we don&rsquo;t gatekeep negative value technological misinformation then we gatekeep positive value technological information by allowing it to be hidden and diluted. Basically, if we allow the plethora of poor software blog posts, they will drown out the actual good quality teaching resources that do exist, effectively gatekeeping valuable information.</p>
<p>The other day I was Google searching a technology I don&rsquo;t know a lot about, the point of Google search. The #1 ranked result was a Medium.com article that was poorly written, though I couldn&rsquo;t tell until I saw a comment debunking all the misinformation in the post. That is exactly the problem. I didn&rsquo;t know enough that the blog article was wrong. If it wasn&rsquo;t for that comment, I would have believed it until I ran into issues causing me to question my understanding.</p>
<h2 id="curated-blogging-platform-sweblogsdev">Curated Blogging Platform (sweblogs.dev)</h2>
<p>This is subscription (for readers) an Invite only (for bloggers) platform that treats blog posts like pull requests: other bloggers
in the same space (sub-topic) have to review and approve your post. It&rsquo;ll be a bit like Stackoverflow with a reputation
system to ensure quality blog posts and limit WHO can review posts.</p>
<h2 id="subscription">Subscription</h2>
<p>To prevent indexing by search engines, stolen content by humans and AI, alike, the blogging platform is subscription based. The prices are localized
so countries with lots of great devs, Brazil!, can still access great content.</p>
<h3 id="profit-sharing">PROFIT sharing</h3>
<p>Bloggers / writters are PAID a share of the site&rsquo;s profits. Writters are paid 100% of net revenue, basically after
paying for costs to run the website and staff salaries, bloggers get 100% of the spoils, basically running like a non-profit.</p>
<p>This is a blogging platform for tech bloggers, by tech bloggers.</p>
]]></content>
        </item>
        
    </channel>
</rss>
