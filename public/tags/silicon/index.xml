<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Silicon on Hello Friend NG</title>
    <link>//localhost:1313/tags/silicon/</link>
    <description>Recent content in Silicon on Hello Friend NG</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 04 Nov 2023 21:56:31 -0500</lastBuildDate>
    <atom:link href="//localhost:1313/tags/silicon/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Silicon Part 2</title>
      <link>//localhost:1313/posts/silicon/si-2/</link>
      <pubDate>Sat, 04 Nov 2023 21:56:31 -0500</pubDate>
      <guid>//localhost:1313/posts/silicon/si-2/</guid>
      <description>In my previous Silicon post, I mentioned Ohm.js, which is the PEG-based parser generator that I&amp;rsquo;m using.&#xA;OHM has several advantages.&#xA;Allows left recursion rules to be defined Better and more accurate error handling (because of left-recursion fix) PEG grammar support Semantic rules: allows for linters, formatters etc to easily be made from same grammar Editor to check grammar against a list of test cases Learning my Parser Generator This has been a blast this week learing OHM.</description>
    </item>
    <item>
      <title>Silicon Part 4</title>
      <link>//localhost:1313/posts/silicon/si-4/</link>
      <pubDate>Sat, 04 Nov 2023 21:56:31 -0500</pubDate>
      <guid>//localhost:1313/posts/silicon/si-4/</guid>
      <description>Hey interwebs! So Silicon and Sigil have come a long way this month. I have most of the grammar finalize and Silicon is already compiling to Javascript with support for a dozen Web APIs and Node APIs.&#xA;I&amp;rsquo;m started getting WASM code gen working as well!</description>
    </item>
    <item>
      <title>Silicon Part 1</title>
      <link>//localhost:1313/posts/silicon/si-1/</link>
      <pubDate>Wed, 21 Jun 2023 15:36:46 -0700</pubDate>
      <guid>//localhost:1313/posts/silicon/si-1/</guid>
      <description>Implementation Details aka HOW? For a more serious project, the intepreter / compiler, in this case Sigil, needs to be written in some language. A parser generator is also a REALLY good idea because you can then have a single document that specifies the language&amp;rsquo;s grammar and the implemenation can be changes more easily by changing the grammar and adding a little bit of code. Historically, the best languages for this task include: C, C++, OCaML, and Rust.</description>
    </item>
    <item>
      <title>Silicon Part 3</title>
      <link>//localhost:1313/posts/silicon/si-3/</link>
      <pubDate>Wed, 21 Jun 2023 15:36:46 -0700</pubDate>
      <guid>//localhost:1313/posts/silicon/si-3/</guid>
      <description>Features List TYPES&#xA;ADTs that use @sum keyword not enum or union Typeclasses / Traits Interfaces that are structurally typed Monads with Monad Trait Type constraints OOP&#xA;@struct value type, public fields, no constructor, no pointers / references @class reference type, private fields, (de)constructor, pointers / reference types OPTIMIZATIONS&#xA;Data Oriented Design like Zig explicit tail-recursion optimization @rec structural interfaces like Go&#xA;Traits / Typeclasses like Rust or OCaml&#xA;built-in testing (unit, ui, fuzzing, benchmark, E2E)</description>
    </item>
    <item>
      <title>Silicon Part 0</title>
      <link>//localhost:1313/posts/silicon/si-0/</link>
      <pubDate>Wed, 21 Jun 2023 15:33:29 -0700</pubDate>
      <guid>//localhost:1313/posts/silicon/si-0/</guid>
      <description>This is part 0 of a new series that documents my journey developing my own production-grade compiler, sigil, for my programming language, Silicon, that targets WASM.&#xA;This post will cover high-level goals,and non-goals.&#xA;Language Design Step 0 was learning how interpreters and compilers work. Following the interpreter book, I just implemented an interpreter and compiler for an already created language, Monkey; the language was created for the book.&#xA;What about my own language?</description>
    </item>
  </channel>
</rss>
