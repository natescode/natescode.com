<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>natescode blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on natescode blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>All Rights Reserved</copyright>
    <lastBuildDate>Fri, 29 Nov 2024 11:39:31 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Productivity Life Hacks for Software Engineers</title>
      <link>http://localhost:1313/posts/2024/11/productivity-life-hacks-for-software-engineers/</link>
      <pubDate>Fri, 29 Nov 2024 11:39:31 -0600</pubDate>
      <guid>http://localhost:1313/posts/2024/11/productivity-life-hacks-for-software-engineers/</guid>
      <description>My co-worker, Abdullahi, encouraged me to write this post. Since I&amp;rsquo;m on Thanskgiving vacation, I thought why not? Plus, writting this post proves him correct; I&amp;rsquo;m very productive.&#xA;I generally don&amp;rsquo;t think of myself as very productive. I was diagnosed with ADHD. I&amp;rsquo;ve always tried to take on too many projects, jobs and challenges; failing multiple responsibilities simultaneously.&#xA;I work 2 jobs, sometimes 3, I am a father of twin girls that are in school plus I make time to work on NatesCode blog posts, videos, exercise and be a son, boyfriend and play DnD.</description>
    </item>
    <item>
      <title>Pair Programming</title>
      <link>http://localhost:1313/posts/2024/10/pair-programming/</link>
      <pubDate>Sat, 19 Oct 2024 21:22:59 -0500</pubDate>
      <guid>http://localhost:1313/posts/2024/10/pair-programming/</guid>
      <description>Pair Programming is a part of of XP programming which seemed to be pushed mostly in the early 2000&amp;rsquo;s. I have heard that it can work, of course it sounds like a huge waste of time most of the time.&#xA;Pair Programming Defined I think we need to define it. Some XP evangelists say that one person coding and another watching is NOT pair programming. Ok, then what is?&#xA;Pair programming can be</description>
    </item>
    <item>
      <title>Wordle Interview Challenge</title>
      <link>http://localhost:1313/posts/2024/10/wordle-interview-challenge/</link>
      <pubDate>Fri, 04 Oct 2024 21:54:34 -0500</pubDate>
      <guid>http://localhost:1313/posts/2024/10/wordle-interview-challenge/</guid>
      <description>I like Wordle, currently I have a 117 day streak on hard mode.&#xA;Here is what I think is a really good interview question concerning Wordle.</description>
    </item>
    <item>
      <title>More TDD Less PRs</title>
      <link>http://localhost:1313/posts/2024/07/more-tdd-less-prs/</link>
      <pubDate>Sat, 13 Jul 2024 07:37:52 -0500</pubDate>
      <guid>http://localhost:1313/posts/2024/07/more-tdd-less-prs/</guid>
      <description>I wanted a fancy title that wasn&amp;rsquo;t clickbaity. I&amp;rsquo;ve been experimenting with a coding approach at work that I want to share. At work, like any good company we write tests for our code. Not always first, but at least we generally have quality tests. The IT Director has pushed hard for code coverage which I strongly disagree with. One engineer spend 2 full days writing tests in order to commit 17 lines of code because the code coverage percentage fell, oh no we ONLY had 95% code coverage.</description>
    </item>
    <item>
      <title>Optimize Code by Doing Less</title>
      <link>http://localhost:1313/posts/2024/07/optimize-code-by-doing-less/</link>
      <pubDate>Sat, 13 Jul 2024 01:55:29 -0500</pubDate>
      <guid>http://localhost:1313/posts/2024/07/optimize-code-by-doing-less/</guid>
      <description>Null is innocent, blame the type system! So for a long time I was confused about null. I kept hearing null is bad but then seeing the answer being Optional&amp;lt;T&amp;gt; and Some x or None. I was like okay so null is bad but None is okay? Couldn&amp;rsquo;t we just call None null ?&#xA;The answer is that null isn&amp;rsquo;t the problem, the type system is! Here is an example in C#.</description>
    </item>
    <item>
      <title>Optimize Code by Doing Less</title>
      <link>http://localhost:1313/posts/2024/07/optimize-code-by-doing-less/</link>
      <pubDate>Sat, 13 Jul 2024 01:29:33 -0500</pubDate>
      <guid>http://localhost:1313/posts/2024/07/optimize-code-by-doing-less/</guid>
      <description>Anytime code needs to be optimized for performance, be that performance in time or memory usage, we can simply say &amp;ldquo;well just do less&amp;rdquo;. I always think &amp;ldquo;do less&amp;rdquo; when I&amp;rsquo;m optimizing code. Here are my thoughts of what exactly &amp;ldquo;do less&amp;rdquo; means by answering &amp;ldquo;Do less of what?&amp;rdquo;.&#xA;&amp;ldquo;Do less of what?&amp;rdquo; &amp;ndash; ME at 01:00 AM&#xA;Do Less: Less Algorithmic Complexity The most intuitive change is to create an algorithm that performance fewer steps.</description>
    </item>
    <item>
      <title>Dry Brittle Code</title>
      <link>http://localhost:1313/posts/2024/06/dry-brittle-code/</link>
      <pubDate>Fri, 28 Jun 2024 10:24:34 -0600</pubDate>
      <guid>http://localhost:1313/posts/2024/06/dry-brittle-code/</guid>
      <description>Software Engineer students will hear &amp;ldquo;DRY&amp;rdquo; or Don&amp;rsquo;t Repeat Yourself numerous times as they are learning to design, build and test software. Even professionals will argue over removing duplicate code. Unfortunately, making code DRY isn&amp;rsquo;t as cut-and-dry (pun intended).&#xA;Here is a really simple example of DRY and brittle code. Say we have some CSS like below.&#xA;```css .service-card { font-family: monospace; background-color: #18B218; width: 320px; height: 200px; } .product-card{ font-family: monospace; background-color: #18B218; width: 320px; height: 200px; } ``` Just because there are duplicate values does not mean there are duplicate semantics.</description>
    </item>
    <item>
      <title>What to Know Before Coding Bootcamp</title>
      <link>http://localhost:1313/posts/2024/06/what-to-know-before-coding-bootcamp/</link>
      <pubDate>Fri, 21 Jun 2024 15:11:13 -0500</pubDate>
      <guid>http://localhost:1313/posts/2024/06/what-to-know-before-coding-bootcamp/</guid>
      <description>I am a lead software engineer by day and a coding bootcamp instructor by night. Here are some prerequisites skills to know before attending a coding bootcamp.&#xA;Basic Computer Skills I see many students that don&amp;rsquo;t know what a ZIP file is or how to unzip it.&#xA;Basic computer shortcuts like copy (CTRL + C) and paste (CTRL + V).&#xA;Understanding how you files are structured i.e. you user folder aka home is C:/users/your_name on Windows.</description>
    </item>
    <item>
      <title>Separation of Concerns Not Code</title>
      <link>http://localhost:1313/posts/2024/05/separation-of-concerns-not-code/</link>
      <pubDate>Thu, 30 May 2024 10:46:44 -0500</pubDate>
      <guid>http://localhost:1313/posts/2024/05/separation-of-concerns-not-code/</guid>
      <description>I was going to name this post &amp;ldquo;Concerns vs Responsibilities&amp;rdquo; which I&amp;rsquo;ll be covering here anyways.&#xA;S.O.L.I.D starts with S for &amp;ldquo;Single-Responibliity Principle&amp;rdquo;, making sure code: function, object etc. do one thing well. We also have the concept of &amp;ldquo;Separation of Concerns&amp;rdquo;. I think Responsilibities and Concerns get conflated and the definitions get confused. The follow is completely my opinion based on my experience and not anything canon or &amp;ldquo;official&amp;rdquo;.</description>
    </item>
    <item>
      <title>Practical Principles of Programming Paradigms</title>
      <link>http://localhost:1313/posts/2024/05/practical-principles-of-programming-paradigms/</link>
      <pubDate>Mon, 13 May 2024 23:45:53 -0500</pubDate>
      <guid>http://localhost:1313/posts/2024/05/practical-principles-of-programming-paradigms/</guid>
      <description>Ultimately, all software paradigms are made of serveral different applications of code augmentation strategies.&#xA;I wasn&amp;rsquo;t sure what to call this post. I was thinking about how to categorize the different ways software developers add new code to existing code, augmentation. These tie in closely with software paradigms but they are not paradigms in and of themselves.&#xA;I will go over three methods of code augmentation.&#xA;Encapsulation (Composition) High Order Functions (or components) Decorators (Decorator pattern and language features aka attributes) Dependency Injection Middleware / hooks / frameworks Encapsulation is all about wrapping existing code with new code.</description>
    </item>
  </channel>
</rss>
